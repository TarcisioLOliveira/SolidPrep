/*
 *   Copyright (C) 2021 Tarc√≠sio Ladeia de Oliveira.
 *
 *   This file is part of SolidPrep
 *
 *   SolidPrep is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SolidPrep is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SolidPrep.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include "element/TRI3.hpp"
#include "cblas.h"
#include "logger.hpp"
#include <BRepBuilderAPI_MakeVertex.hxx>
#include <BRepBuilderAPI_MakeEdge.hxx>
#include <BRepBuilderAPI_MakeWire.hxx>
#include <BRepBuilderAPI_MakeFace.hxx>
#include <Eigen/src/Core/Matrix.h>
#include <TopoDS_Wire.hxx>
#include <TopoDS_Face.hxx>
#include <TopoDS.hxx>
#include <IntTools_EdgeEdge.hxx>

namespace element{

TRI3::TRI3(ElementShape s):
    MeshElementCommon2DTri<TRI3>(s.nodes){
    const size_t N = this->NODES_PER_ELEM;
    
    gp_Pnt p[3];
    for(size_t i = 0; i < N; ++i){
        const auto& n = this->nodes[i];
        p[i] = n->point;
    }
    for(size_t i = 0; i < N; ++i){
        size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        a[i] = p[j].X()*p[k].Y() - p[k].X()*p[j].Y();
        b[i] = p[j].Y() - p[k].Y();
        c[i] = p[k].X() - p[j].X();
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    this->delta = 0.5*std::abs(deltaM.Determinant());
}

std::vector<double> TRI3::get_k(const std::vector<double>& D, const double t) const{
    const size_t N = this->NODES_PER_ELEM;

    std::vector<double> B(3*2*N, 0);

    for(size_t i = 0; i < N; ++i){
        B[i*2 + 0*2*N] = b[i]/(2*delta);
        B[i*2 + 1*2*N] = 0;
        B[i*2 + 2*2*N] = c[i]/(2*delta);
        B[i*2 + 0*2*N + 1] = 0;
        B[i*2 + 1*2*N + 1] = c[i]/(2*delta);
        B[i*2 + 2*2*N + 1] = b[i]/(2*delta);
    }

    std::vector<double> DB(3*2*N, 0);

    cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 3, 2*N, 3, 1, D.data(), 3, B.data(), 2*N, 0, DB.data(), 2*N);

    std::vector<double> K(2*N*2*N, 0);
    cblas_dgemm(CblasRowMajor, CblasTrans, CblasNoTrans, 2*N, 2*N, 3, 1, B.data(), 2*N, DB.data(), 2*N, 0, K.data(), 2*N);

    cblas_dscal(K.size(), t*delta, K.data(), 1);

    return K;
}

std::vector<double> TRI3::get_DB(const std::vector<double>& D, const gp_Pnt& point) const{
    (void)point;
    const size_t N = this->NODES_PER_ELEM;

    std::vector<double> B(3*2*N, 0);

    for(size_t i = 0; i < N; ++i){
        B[i*2 + 0*2*N] = b[i]/(2*delta);
        B[i*2 + 1*2*N] = 0;
        B[i*2 + 2*2*N] = c[i]/(2*delta);
        B[i*2 + 0*2*N + 1] = 0;
        B[i*2 + 1*2*N + 1] = c[i]/(2*delta);
        B[i*2 + 2*2*N + 1] = b[i]/(2*delta);
    }

    std::vector<double> DB(3*2*N, 0);

    cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 3, 2*N, 3, 1, D.data(), 3, B.data(), 2*N, 0, DB.data(), 2*N);

    return DB;
}

std::vector<double> TRI3::get_B(const gp_Pnt& point) const{
    (void)point;
    std::vector<double> B{
    b[0]/(2*delta)
    ,
    0
    ,
    b[1]/(2*delta)
    ,
    0
    ,
    b[2]/(2*delta)
    ,
    0
    ,
    0
    ,
    c[0]/(2*delta)
    ,
    0
    ,
    c[1]/(2*delta)
    ,
    0
    ,
    c[2]/(2*delta)
    ,
    c[0]/(2*delta)
    ,
    b[0]/(2*delta)
    ,
    c[1]/(2*delta)
    ,
    b[1]/(2*delta)
    ,
    c[2]/(2*delta)
    ,
    b[2]/(2*delta)
    };
    return B;
}

std::vector<double> TRI3::get_Nf(const double t, const std::vector<gp_Pnt>& points) const{
    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};

    std::vector<double> Nf({
    t*(2*a[0] + b[0]*x[0] + b[0]*x[1] + c[0]*y[0] + c[0]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
    ,
    0
    ,
    0
    ,
    t*(2*a[0] + b[0]*x[0] + b[0]*x[1] + c[0]*y[0] + c[0]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
    ,
    t*(2*a[1] + b[1]*x[0] + b[1]*x[1] + c[1]*y[0] + c[1]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
    ,
    0
    ,
    0
    ,
    t*(2*a[1] + b[1]*x[0] + b[1]*x[1] + c[1]*y[0] + c[1]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
    ,
    t*(2*a[2] + b[2]*x[0] + b[2]*x[1] + c[2]*y[0] + c[2]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
    ,
    0
    ,
    0
    ,
    t*(2*a[2] + b[2]*x[0] + b[2]*x[1] + c[2]*y[0] + c[2]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
    });
    
    return Nf;
}

std::vector<double> TRI3::get_nodal_density_gradient(gp_Pnt p) const{
    (void)p;
    
    return std::vector<double>{b[0]/(2*delta), b[1]/(2*delta), b[2]/(2*delta),
                               c[0]/(2*delta), c[1]/(2*delta), c[2]/(2*delta)};
}


std::vector<double> TRI3::get_R(const std::vector<double>& K, const double t, const std::vector<gp_Pnt>& points) const{
    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};

    std::vector<double> R{
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[0]*a[0] + 3*a[0]*b[0]*x[0] + 3*a[0]*b[0]*x[1] + 3*a[0]*c[0]*y[0] + 3*a[0]*c[0]*y[1] + b[0]*b[0]*x[0]*x[0] + b[0]*b[0]*x[0]*x[1] + b[0]*b[0]*x[1]*x[1] + 2*b[0]*c[0]*x[0]*y[0] + b[0]*c[0]*x[0]*y[1] + b[0]*c[0]*x[1]*y[0] + 2*b[0]*c[0]*x[1]*y[1] + c[0]*c[0]*y[0]*y[0] + c[0]*c[0]*y[0]*y[1] + c[0]*c[0]*y[1]*y[1])/(12*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[0]*a[0] + 3*a[0]*b[0]*x[0] + 3*a[0]*b[0]*x[1] + 3*a[0]*c[0]*y[0] + 3*a[0]*c[0]*y[1] + b[0]*b[0]*x[0]*x[0] + b[0]*b[0]*x[0]*x[1] + b[0]*b[0]*x[1]*x[1] + 2*b[0]*c[0]*x[0]*y[0] + b[0]*c[0]*x[0]*y[1] + b[0]*c[0]*x[1]*y[0] + 2*b[0]*c[0]*x[1]*y[1] + c[0]*c[0]*y[0]*y[0] + c[0]*c[0]*y[0]*y[1] + c[0]*c[0]*y[1]*y[1])/(12*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[0]*a[0] + 3*a[0]*b[0]*x[0] + 3*a[0]*b[0]*x[1] + 3*a[0]*c[0]*y[0] + 3*a[0]*c[0]*y[1] + b[0]*b[0]*x[0]*x[0] + b[0]*b[0]*x[0]*x[1] + b[0]*b[0]*x[1]*x[1] + 2*b[0]*c[0]*x[0]*y[0] + b[0]*c[0]*x[0]*y[1] + b[0]*c[0]*x[1]*y[0] + 2*b[0]*c[0]*x[1]*y[1] + c[0]*c[0]*y[0]*y[0] + c[0]*c[0]*y[0]*y[1] + c[0]*c[0]*y[1]*y[1])/(12*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[0]*a[0] + 3*a[0]*b[0]*x[0] + 3*a[0]*b[0]*x[1] + 3*a[0]*c[0]*y[0] + 3*a[0]*c[0]*y[1] + b[0]*b[0]*x[0]*x[0] + b[0]*b[0]*x[0]*x[1] + b[0]*b[0]*x[1]*x[1] + 2*b[0]*c[0]*x[0]*y[0] + b[0]*c[0]*x[0]*y[1] + b[0]*c[0]*x[1]*y[0] + 2*b[0]*c[0]*x[1]*y[1] + c[0]*c[0]*y[0]*y[0] + c[0]*c[0]*y[0]*y[1] + c[0]*c[0]*y[1]*y[1])/(12*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[1]*a[1] + 3*a[1]*b[1]*x[0] + 3*a[1]*b[1]*x[1] + 3*a[1]*c[1]*y[0] + 3*a[1]*c[1]*y[1] + b[1]*b[1]*x[0]*x[0] + b[1]*b[1]*x[0]*x[1] + b[1]*b[1]*x[1]*x[1] + 2*b[1]*c[1]*x[0]*y[0] + b[1]*c[1]*x[0]*y[1] + b[1]*c[1]*x[1]*y[0] + 2*b[1]*c[1]*x[1]*y[1] + c[1]*c[1]*y[0]*y[0] + c[1]*c[1]*y[0]*y[1] + c[1]*c[1]*y[1]*y[1])/(12*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[1]*a[1] + 3*a[1]*b[1]*x[0] + 3*a[1]*b[1]*x[1] + 3*a[1]*c[1]*y[0] + 3*a[1]*c[1]*y[1] + b[1]*b[1]*x[0]*x[0] + b[1]*b[1]*x[0]*x[1] + b[1]*b[1]*x[1]*x[1] + 2*b[1]*c[1]*x[0]*y[0] + b[1]*c[1]*x[0]*y[1] + b[1]*c[1]*x[1]*y[0] + 2*b[1]*c[1]*x[1]*y[1] + c[1]*c[1]*y[0]*y[0] + c[1]*c[1]*y[0]*y[1] + c[1]*c[1]*y[1]*y[1])/(12*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1] + 3*a[0]*b[1]*x[0] + 3*a[0]*b[1]*x[1] + 3*a[0]*c[1]*y[0] + 3*a[0]*c[1]*y[1] + 3*a[1]*b[0]*x[0] + 3*a[1]*b[0]*x[1] + 3*a[1]*c[0]*y[0] + 3*a[1]*c[0]*y[1] + 2*b[0]*b[1]*x[0]*x[0] + 2*b[0]*b[1]*x[0]*x[1] + 2*b[0]*b[1]*x[1]*x[1] + 2*b[0]*c[1]*x[0]*y[0] + b[0]*c[1]*x[0]*y[1] +b[0]*c[1]*x[1]*y[0] + 2*b[0]*c[1]*x[1]*y[1] + 2*b[1]*c[0]*x[0]*y[0] + b[1]*c[0]*x[0]*y[1] + b[1]*c[0]*x[1]*y[0] + 2*b[1]*c[0]*x[1]*y[1] + 2*c[0]*c[1]*y[0]*y[0] + 2*c[0]*c[1]*y[0]*y[1] + 2*c[0]*c[1]*y[1]*y[1])/(24*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[1]*a[1] + 3*a[1]*b[1]*x[0] + 3*a[1]*b[1]*x[1] + 3*a[1]*c[1]*y[0] + 3*a[1]*c[1]*y[1] + b[1]*b[1]*x[0]*x[0] + b[1]*b[1]*x[0]*x[1] + b[1]*b[1]*x[1]*x[1] + 2*b[1]*c[1]*x[0]*y[0] + b[1]*c[1]*x[0]*y[1] + b[1]*c[1]*x[1]*y[0] + 2*b[1]*c[1]*x[1]*y[1] + c[1]*c[1]*y[0]*y[0] + c[1]*c[1]*y[0]*y[1] + c[1]*c[1]*y[1]*y[1])/(12*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[1]*a[1] + 3*a[1]*b[1]*x[0] + 3*a[1]*b[1]*x[1] + 3*a[1]*c[1]*y[0] + 3*a[1]*c[1]*y[1] + b[1]*b[1]*x[0]*x[0] + b[1]*b[1]*x[0]*x[1] + b[1]*b[1]*x[1]*x[1] + 2*b[1]*c[1]*x[0]*y[0] + b[1]*c[1]*x[0]*y[1] + b[1]*c[1]*x[1]*y[0] + 2*b[1]*c[1]*x[1]*y[1] + c[1]*c[1]*y[0]*y[0] + c[1]*c[1]*y[0]*y[1] + c[1]*c[1]*y[1]*y[1])/(12*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[0]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[2]*a[2] + 3*a[2]*b[2]*x[0] + 3*a[2]*b[2]*x[1] + 3*a[2]*c[2]*y[0] + 3*a[2]*c[2]*y[1] + b[2]*b[2]*x[0]*x[0] + b[2]*b[2]*x[0]*x[1] + b[2]*b[2]*x[1]*x[1] + 2*b[2]*c[2]*x[0]*y[0] + b[2]*c[2]*x[0]*y[1] + b[2]*c[2]*x[1]*y[0] + 2*b[2]*c[2]*x[1]*y[1] + c[2]*c[2]*y[0]*y[0] + c[2]*c[2]*y[0]*y[1] + c[2]*c[2]*y[1]*y[1])/(12*delta*delta)
    ,
    K[1]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[2]*a[2] + 3*a[2]*b[2]*x[0] + 3*a[2]*b[2]*x[1] + 3*a[2]*c[2]*y[0] + 3*a[2]*c[2]*y[1] + b[2]*b[2]*x[0]*x[0] + b[2]*b[2]*x[0]*x[1] + b[2]*b[2]*x[1]*x[1] + 2*b[2]*c[2]*x[0]*y[0] + b[2]*c[2]*x[0]*y[1] + b[2]*c[2]*x[1]*y[0] + 2*b[2]*c[2]*x[1]*y[1] + c[2]*c[2]*y[0]*y[0] + c[2]*c[2]*y[0]*y[1] + c[2]*c[2]*y[1]*y[1])/(12*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2] + 3*a[0]*b[2]*x[0] + 3*a[0]*b[2]*x[1] + 3*a[0]*c[2]*y[0] + 3*a[0]*c[2]*y[1] + 3*a[2]*b[0]*x[0] + 3*a[2]*b[0]*x[1] + 3*a[2]*c[0]*y[0] + 3*a[2]*c[0]*y[1] + 2*b[0]*b[2]*x[0]*x[0] + 2*b[0]*b[2]*x[0]*x[1] + 2*b[0]*b[2]*x[1]*x[1] + 2*b[0]*c[2]*x[0]*y[0] + b[0]*c[2]*x[0]*y[1] +b[0]*c[2]*x[1]*y[0] + 2*b[0]*c[2]*x[1]*y[1] + 2*b[2]*c[0]*x[0]*y[0] + b[2]*c[0]*x[0]*y[1] + b[2]*c[0]*x[1]*y[0] + 2*b[2]*c[0]*x[1]*y[1] + 2*c[0]*c[2]*y[0]*y[0] + 2*c[0]*c[2]*y[0]*y[1] + 2*c[0]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[1]*a[2] + 3*a[1]*b[2]*x[0] + 3*a[1]*b[2]*x[1] + 3*a[1]*c[2]*y[0] + 3*a[1]*c[2]*y[1] + 3*a[2]*b[1]*x[0] + 3*a[2]*b[1]*x[1] + 3*a[2]*c[1]*y[0] + 3*a[2]*c[1]*y[1] + 2*b[1]*b[2]*x[0]*x[0] + 2*b[1]*b[2]*x[0]*x[1] + 2*b[1]*b[2]*x[1]*x[1] + 2*b[1]*c[2]*x[0]*y[0] + b[1]*c[2]*x[0]*y[1] +b[1]*c[2]*x[1]*y[0] + 2*b[1]*c[2]*x[1]*y[1] + 2*b[2]*c[1]*x[0]*y[0] + b[2]*c[1]*x[0]*y[1] + b[2]*c[1]*x[1]*y[0] + 2*b[2]*c[1]*x[1]*y[1] + 2*c[1]*c[2]*y[0]*y[0] + 2*c[1]*c[2]*y[0]*y[1] + 2*c[1]*c[2]*y[1]*y[1])/(24*delta*delta)
    ,
    K[2]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[2]*a[2] + 3*a[2]*b[2]*x[0] + 3*a[2]*b[2]*x[1] + 3*a[2]*c[2]*y[0] + 3*a[2]*c[2]*y[1] + b[2]*b[2]*x[0]*x[0] + b[2]*b[2]*x[0]*x[1] + b[2]*b[2]*x[1]*x[1] + 2*b[2]*c[2]*x[0]*y[0] + b[2]*c[2]*x[0]*y[1] + b[2]*c[2]*x[1]*y[0] + 2*b[2]*c[2]*x[1]*y[1] + c[2]*c[2]*y[0]*y[0] + c[2]*c[2]*y[0]*y[1] + c[2]*c[2]*y[1]*y[1])/(12*delta*delta)
    ,
    K[3]*t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*a[2]*a[2] + 3*a[2]*b[2]*x[0] + 3*a[2]*b[2]*x[1] + 3*a[2]*c[2]*y[0] + 3*a[2]*c[2]*y[1] + b[2]*b[2]*x[0]*x[0] + b[2]*b[2]*x[0]*x[1] + b[2]*b[2]*x[1]*x[1] + 2*b[2]*c[2]*x[0]*y[0] + b[2]*c[2]*x[0]*y[1] + b[2]*c[2]*x[1]*y[0] + 2*b[2]*c[2]*x[1]*y[1] + c[2]*c[2]*y[0]*y[0] + c[2]*c[2]*y[0]*y[1] + c[2]*c[2]*y[1]*y[1])/(12*delta*delta)
    };

    return R;
}
std::vector<double> TRI3::get_Rf(const std::vector<double>& S, const std::vector<double>& F, const gp_Pnt& C, const double t, const std::vector<gp_Pnt>& points) const{
    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};
    const double cx = C.X();
    const double cy = C.Y();

    std::vector<double> Rf{
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*F[0]*a[0] + 3*F[0]*b[0]*x[0] + 3*F[0]*b[0]*x[1] + 3*F[0]*c[0]*y[0] + 3*F[0]*c[0]*y[1] - 6*S[0]*a[0]*cx + 3*S[0]*a[0]*x[0] + 3*S[0]*a[0]*x[1] - 3*S[0]*b[0]*cx*x[0] - 3*S[0]*b[0]*cx*x[1] + 2*S[0]*b[0]*x[0]*x[0] + 2*S[0]*b[0]*x[0]*x[1] + 2*S[0]*b[0]*x[1]*x[1] - 3*S[0]*c[0]*cx*y[0] - 3*S[0]*c[0]*cx*y[1] + 2*S[0]*c[0]*x[0]*y[0] + S[0]*c[0]*x[0]*y[1] + S[0]*c[0]*x[1]*y[0] + 2*S[0]*c[0]*x[1]*y[1] - 6*S[1]*a[0]*cy + 3*S[1]*a[0]*y[0] + 3*S[1]*a[0]*y[1] - 3*S[1]*b[0]*cy*x[0] - 3*S[1]*b[0]*cy*x[1] + 2*S[1]*b[0]*x[0]*y[0] + S[1]*b[0]*x[0]*y[1] + S[1]*b[0]*x[1]*y[0] + 2*S[1]*b[0]*x[1]*y[1] - 3*S[1]*c[0]*cy*y[0] - 3*S[1]*c[0]*cy*y[1] + 2*S[1]*c[0]*y[0]*y[0] + 2*S[1]*c[0]*y[0]*y[1] + 2*S[1]*c[0]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*F[1]*a[0] + 3*F[1]*b[0]*x[0] + 3*F[1]*b[0]*x[1] + 3*F[1]*c[0]*y[0] + 3*F[1]*c[0]*y[1] - 6*S[2]*a[0]*cx + 3*S[2]*a[0]*x[0] + 3*S[2]*a[0]*x[1] - 3*S[2]*b[0]*cx*x[0] - 3*S[2]*b[0]*cx*x[1] + 2*S[2]*b[0]*x[0]*x[0] + 2*S[2]*b[0]*x[0]*x[1] + 2*S[2]*b[0]*x[1]*x[1] - 3*S[2]*c[0]*cx*y[0] - 3*S[2]*c[0]*cx*y[1] + 2*S[2]*c[0]*x[0]*y[0] + S[2]*c[0]*x[0]*y[1] + S[2]*c[0]*x[1]*y[0] + 2*S[2]*c[0]*x[1]*y[1] - 6*S[3]*a[0]*cy + 3*S[3]*a[0]*y[0] + 3*S[3]*a[0]*y[1] - 3*S[3]*b[0]*cy*x[0] - 3*S[3]*b[0]*cy*x[1] + 2*S[3]*b[0]*x[0]*y[0] + S[3]*b[0]*x[0]*y[1] + S[3]*b[0]*x[1]*y[0] + 2*S[3]*b[0]*x[1]*y[1] - 3*S[3]*c[0]*cy*y[0] - 3*S[3]*c[0]*cy*y[1] + 2*S[3]*c[0]*y[0]*y[0] + 2*S[3]*c[0]*y[0]*y[1] + 2*S[3]*c[0]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*F[0]*a[1] + 3*F[0]*b[1]*x[0] + 3*F[0]*b[1]*x[1] + 3*F[0]*c[1]*y[0] + 3*F[0]*c[1]*y[1] - 6*S[0]*a[1]*cx + 3*S[0]*a[1]*x[0] + 3*S[0]*a[1]*x[1] - 3*S[0]*b[1]*cx*x[0] - 3*S[0]*b[1]*cx*x[1] + 2*S[0]*b[1]*x[0]*x[0] + 2*S[0]*b[1]*x[0]*x[1] + 2*S[0]*b[1]*x[1]*x[1] - 3*S[0]*c[1]*cx*y[0] - 3*S[0]*c[1]*cx*y[1] + 2*S[0]*c[1]*x[0]*y[0] + S[0]*c[1]*x[0]*y[1] + S[0]*c[1]*x[1]*y[0] + 2*S[0]*c[1]*x[1]*y[1] - 6*S[1]*a[1]*cy + 3*S[1]*a[1]*y[0] + 3*S[1]*a[1]*y[1] - 3*S[1]*b[1]*cy*x[0] - 3*S[1]*b[1]*cy*x[1] + 2*S[1]*b[1]*x[0]*y[0] + S[1]*b[1]*x[0]*y[1] + S[1]*b[1]*x[1]*y[0] + 2*S[1]*b[1]*x[1]*y[1] - 3*S[1]*c[1]*cy*y[0] - 3*S[1]*c[1]*cy*y[1] + 2*S[1]*c[1]*y[0]*y[0] + 2*S[1]*c[1]*y[0]*y[1] + 2*S[1]*c[1]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*F[1]*a[1] + 3*F[1]*b[1]*x[0] + 3*F[1]*b[1]*x[1] + 3*F[1]*c[1]*y[0] + 3*F[1]*c[1]*y[1] - 6*S[2]*a[1]*cx + 3*S[2]*a[1]*x[0] + 3*S[2]*a[1]*x[1] - 3*S[2]*b[1]*cx*x[0] - 3*S[2]*b[1]*cx*x[1] + 2*S[2]*b[1]*x[0]*x[0] + 2*S[2]*b[1]*x[0]*x[1] + 2*S[2]*b[1]*x[1]*x[1] - 3*S[2]*c[1]*cx*y[0] - 3*S[2]*c[1]*cx*y[1] + 2*S[2]*c[1]*x[0]*y[0] + S[2]*c[1]*x[0]*y[1] + S[2]*c[1]*x[1]*y[0] + 2*S[2]*c[1]*x[1]*y[1] - 6*S[3]*a[1]*cy + 3*S[3]*a[1]*y[0] + 3*S[3]*a[1]*y[1] - 3*S[3]*b[1]*cy*x[0] - 3*S[3]*b[1]*cy*x[1] + 2*S[3]*b[1]*x[0]*y[0] + S[3]*b[1]*x[0]*y[1] + S[3]*b[1]*x[1]*y[0] + 2*S[3]*b[1]*x[1]*y[1] - 3*S[3]*c[1]*cy*y[0] - 3*S[3]*c[1]*cy*y[1] + 2*S[3]*c[1]*y[0]*y[0] + 2*S[3]*c[1]*y[0]*y[1] + 2*S[3]*c[1]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*F[0]*a[2] + 3*F[0]*b[2]*x[0] + 3*F[0]*b[2]*x[1] + 3*F[0]*c[2]*y[0] + 3*F[0]*c[2]*y[1] - 6*S[0]*a[2]*cx + 3*S[0]*a[2]*x[0] + 3*S[0]*a[2]*x[1] - 3*S[0]*b[2]*cx*x[0] - 3*S[0]*b[2]*cx*x[1] + 2*S[0]*b[2]*x[0]*x[0] + 2*S[0]*b[2]*x[0]*x[1] + 2*S[0]*b[2]*x[1]*x[1] - 3*S[0]*c[2]*cx*y[0] - 3*S[0]*c[2]*cx*y[1] + 2*S[0]*c[2]*x[0]*y[0] + S[0]*c[2]*x[0]*y[1] + S[0]*c[2]*x[1]*y[0] + 2*S[0]*c[2]*x[1]*y[1] - 6*S[1]*a[2]*cy + 3*S[1]*a[2]*y[0] + 3*S[1]*a[2]*y[1] - 3*S[1]*b[2]*cy*x[0] - 3*S[1]*b[2]*cy*x[1] + 2*S[1]*b[2]*x[0]*y[0] + S[1]*b[2]*x[0]*y[1] + S[1]*b[2]*x[1]*y[0] + 2*S[1]*b[2]*x[1]*y[1] - 3*S[1]*c[2]*cy*y[0] - 3*S[1]*c[2]*cy*y[1] + 2*S[1]*c[2]*y[0]*y[0] + 2*S[1]*c[2]*y[0]*y[1] + 2*S[1]*c[2]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*F[1]*a[2] + 3*F[1]*b[2]*x[0] + 3*F[1]*b[2]*x[1] + 3*F[1]*c[2]*y[0] + 3*F[1]*c[2]*y[1] - 6*S[2]*a[2]*cx + 3*S[2]*a[2]*x[0] + 3*S[2]*a[2]*x[1] - 3*S[2]*b[2]*cx*x[0] - 3*S[2]*b[2]*cx*x[1] + 2*S[2]*b[2]*x[0]*x[0] + 2*S[2]*b[2]*x[0]*x[1] + 2*S[2]*b[2]*x[1]*x[1] - 3*S[2]*c[2]*cx*y[0] - 3*S[2]*c[2]*cx*y[1] + 2*S[2]*c[2]*x[0]*y[0] + S[2]*c[2]*x[0]*y[1] + S[2]*c[2]*x[1]*y[0] + 2*S[2]*c[2]*x[1]*y[1] - 6*S[3]*a[2]*cy + 3*S[3]*a[2]*y[0] + 3*S[3]*a[2]*y[1] - 3*S[3]*b[2]*cy*x[0] - 3*S[3]*b[2]*cy*x[1] + 2*S[3]*b[2]*x[0]*y[0] + S[3]*b[2]*x[0]*y[1] + S[3]*b[2]*x[1]*y[0] + 2*S[3]*b[2]*x[1]*y[1] - 3*S[3]*c[2]*cy*y[0] - 3*S[3]*c[2]*cy*y[1] + 2*S[3]*c[2]*y[0]*y[0] + 2*S[3]*c[2]*y[0]*y[1] + 2*S[3]*c[2]*y[1]*y[1])/(12*delta)
    };

    return Rf;
}

Eigen::MatrixXd TRI3::diffusion_1dof(const double t, const std::vector<double>& A) const{
    Eigen::MatrixXd M{{
        b[0]*(A[0]*b[0]*t/2 + A[3]*c[0]*t/2)/(2*delta) + c[0]*(A[1]*b[0]*t/2 + A[4]*c[0]*t/2)/(2*delta)
        ,
        b[1]*(A[0]*b[0]*t/2 + A[3]*c[0]*t/2)/(2*delta) + c[1]*(A[1]*b[0]*t/2 + A[4]*c[0]*t/2)/(2*delta)
        ,
        b[2]*(A[0]*b[0]*t/2 + A[3]*c[0]*t/2)/(2*delta) + c[2]*(A[1]*b[0]*t/2 + A[4]*c[0]*t/2)/(2*delta)
        },{
        b[0]*(A[0]*b[1]*t/2 + A[3]*c[1]*t/2)/(2*delta) + c[0]*(A[1]*b[1]*t/2 + A[4]*c[1]*t/2)/(2*delta)
        ,
        b[1]*(A[0]*b[1]*t/2 + A[3]*c[1]*t/2)/(2*delta) + c[1]*(A[1]*b[1]*t/2 + A[4]*c[1]*t/2)/(2*delta)
        ,
        b[2]*(A[0]*b[1]*t/2 + A[3]*c[1]*t/2)/(2*delta) + c[2]*(A[1]*b[1]*t/2 + A[4]*c[1]*t/2)/(2*delta)
        },{
        b[0]*(A[0]*b[2]*t/2 + A[3]*c[2]*t/2)/(2*delta) + c[0]*(A[1]*b[2]*t/2 + A[4]*c[2]*t/2)/(2*delta)
        ,
        b[1]*(A[0]*b[2]*t/2 + A[3]*c[2]*t/2)/(2*delta) + c[1]*(A[1]*b[2]*t/2 + A[4]*c[2]*t/2)/(2*delta)
        ,
        b[2]*(A[0]*b[2]*t/2 + A[3]*c[2]*t/2)/(2*delta) + c[2]*(A[1]*b[2]*t/2 + A[4]*c[2]*t/2)/(2*delta)
        }
    };

    return M;
}
Eigen::MatrixXd TRI3::advection_1dof(const double t, const std::vector<double>& v) const{
    Eigen::MatrixXd M{{
        t*(b[0]*v[0] + c[0]*v[1])/6
        ,
        t*(b[0]*v[0] + c[0]*v[1])/6
        ,
        t*(b[0]*v[0] + c[0]*v[1])/6
        },{
        t*(b[1]*v[0] + c[1]*v[1])/6
        ,
        t*(b[1]*v[0] + c[1]*v[1])/6
        ,
        t*(b[1]*v[0] + c[1]*v[1])/6
        },{
        t*(b[2]*v[0] + c[2]*v[1])/6
        ,
        t*(b[2]*v[0] + c[2]*v[1])/6
        ,
        t*(b[2]*v[0] + c[2]*v[1])/6
        }
    };

    return M;
}
Eigen::MatrixXd TRI3::absorption_1dof(const double t) const{
    Eigen::MatrixXd M{{
        delta*t/6
        ,
        delta*t/12
        ,
        delta*t/12
        },{
        delta*t/12
        ,
        delta*t/6
        ,
        delta*t/12
        },{
        delta*t/12
        ,
        delta*t/12
        ,
        delta*t/6
        }
    };

    return M;
}
Eigen::VectorXd TRI3::source_1dof(const double t) const{
    Eigen::Vector<double, 3> M{
        delta*t/3
        ,
        delta*t/3
        ,
        delta*t/3
    };

    return M;
}

}
