/*
 *   Copyright (C) 2021 Tarc√≠sio Ladeia de Oliveira.
 *
 *   This file is part of SolidPrep
 *
 *   SolidPrep is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SolidPrep is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SolidPrep.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include "utils/gauss_legendre.hpp"
#include "element/GT9.hpp"
#include "cblas.h"
#include "logger.hpp"
#include <vector>

namespace element{

GT9::GT9(ElementShape s):
    MeshElementCommon2DTri<GT9>(s.nodes){
    const size_t N = this->NODES_PER_ELEM;
    
    gp_Pnt p[3];
    for(size_t i = 0; i < N; ++i){
        const auto& n = this->nodes[i];
        p[i] = n->point;
    }
    for(size_t i = 0; i < N; ++i){
        size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        a[i] = p[j].X()*p[k].Y() - p[k].X()*p[j].Y();
        b[i] = p[j].Y() - p[k].Y();
        c[i] = p[k].X() - p[j].X();
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    this->delta = 0.5*std::abs(deltaM.Determinant());
}

std::vector<double> GT9::get_k(const std::vector<double>& D, const double t) const{
    std::vector<double> K{
t*(D[0]*b[0]*b[0] + D[2]*b[0]*c[0] + D[6]*b[0]*c[0] + D[8]*c[0]*c[0])/(4*delta)
,
t*(D[1]*b[0]*c[0] + D[2]*b[0]*b[0] + D[7]*c[0]*c[0] + D[8]*b[0]*c[0])/(4*delta)
,
t*(-D[0]*b[0]*b[0]*b[1] + D[0]*b[0]*b[0]*b[2] - D[1]*b[0]*c[0]*c[1] + D[1]*b[0]*c[0]*c[2] - D[2]*b[0]*b[0]*c[1] + D[2]*b[0]*b[0]*c[2] - D[2]*b[0]*b[1]*c[0] + D[2]*b[0]*b[2]*c[0] - D[6]*b[0]*b[1]*c[0] + D[6]*b[0]*b[2]*c[0] - D[7]*c[0]*c[0]*c[1] + D[7]*c[0]*c[0]*c[2] - D[8]*b[0]*c[0]*c[1] + D[8]*b[0]*c[0]*c[2] - D[8]*b[1]*c[0]*c[0] + D[8]*b[2]*c[0]*c[0])/(24*delta)
,
t*(D[0]*b[0]*b[1] + D[2]*b[0]*c[1] + D[6]*b[1]*c[0] + D[8]*c[0]*c[1])/(4*delta)
,
t*(D[1]*b[0]*c[1] + D[2]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[1]*c[0])/(4*delta)
,
t*(D[0]*b[0]*b[0]*b[1] - D[0]*b[0]*b[1]*b[2] + D[1]*b[0]*c[0]*c[1] - D[1]*b[0]*c[1]*c[2] + D[2]*b[0]*b[0]*c[1] + D[2]*b[0]*b[1]*c[0] - D[2]*b[0]*b[1]*c[2] - D[2]*b[0]*b[2]*c[1] + D[6]*b[0]*b[1]*c[0] - D[6]*b[1]*b[2]*c[0] + D[7]*c[0]*c[0]*c[1] - D[7]*c[0]*c[1]*c[2] + D[8]*b[0]*c[0]*c[1] + D[8]*b[1]*c[0]*c[0] - D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[0]*b[0]*b[2] + D[2]*b[0]*c[2] + D[6]*b[2]*c[0] + D[8]*c[0]*c[2])/(4*delta)
,
t*(D[1]*b[0]*c[2] + D[2]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[2]*c[0])/(4*delta)
,
t*(-D[0]*b[0]*b[0]*b[2] + D[0]*b[0]*b[1]*b[2] - D[1]*b[0]*c[0]*c[2] + D[1]*b[0]*c[1]*c[2] - D[2]*b[0]*b[0]*c[2] + D[2]*b[0]*b[1]*c[2] - D[2]*b[0]*b[2]*c[0] + D[2]*b[0]*b[2]*c[1] - D[6]*b[0]*b[2]*c[0] + D[6]*b[1]*b[2]*c[0] - D[7]*c[0]*c[0]*c[2] + D[7]*c[0]*c[1]*c[2] - D[8]*b[0]*c[0]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[0] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[3]*b[0]*c[0] + D[5]*c[0]*c[0] + D[6]*b[0]*b[0] + D[8]*b[0]*c[0])/(4*delta)
,
t*(D[4]*c[0]*c[0] + D[5]*b[0]*c[0] + D[7]*b[0]*c[0] + D[8]*b[0]*b[0])/(4*delta)
,
t*(-D[3]*b[0]*b[1]*c[0] + D[3]*b[0]*b[2]*c[0] - D[4]*c[0]*c[0]*c[1] + D[4]*c[0]*c[0]*c[2] - D[5]*b[0]*c[0]*c[1] + D[5]*b[0]*c[0]*c[2] - D[5]*b[1]*c[0]*c[0] + D[5]*b[2]*c[0]*c[0] - D[6]*b[0]*b[0]*b[1] + D[6]*b[0]*b[0]*b[2] - D[7]*b[0]*c[0]*c[1] + D[7]*b[0]*c[0]*c[2] - D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[0]*c[2] - D[8]*b[0]*b[1]*c[0] + D[8]*b[0]*b[2]*c[0])/(24*delta)
,
t*(D[3]*b[1]*c[0] + D[5]*c[0]*c[1] + D[6]*b[0]*b[1] + D[8]*b[0]*c[1])/(4*delta)
,
t*(D[4]*c[0]*c[1] + D[5]*b[1]*c[0] + D[7]*b[0]*c[1] + D[8]*b[0]*b[1])/(4*delta)
,
t*(D[3]*b[0]*b[1]*c[0] - D[3]*b[1]*b[2]*c[0] + D[4]*c[0]*c[0]*c[1] - D[4]*c[0]*c[1]*c[2] + D[5]*b[0]*c[0]*c[1] + D[5]*b[1]*c[0]*c[0] - D[5]*b[1]*c[0]*c[2] - D[5]*b[2]*c[0]*c[1] + D[6]*b[0]*b[0]*b[1] - D[6]*b[0]*b[1]*b[2] + D[7]*b[0]*c[0]*c[1] - D[7]*b[0]*c[1]*c[2] + D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[1]*c[0] - D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(D[3]*b[2]*c[0] + D[5]*c[0]*c[2] + D[6]*b[0]*b[2] + D[8]*b[0]*c[2])/(4*delta)
,
t*(D[4]*c[0]*c[2] + D[5]*b[2]*c[0] + D[7]*b[0]*c[2] + D[8]*b[0]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[2]*c[0] + D[3]*b[1]*b[2]*c[0] - D[4]*c[0]*c[0]*c[2] + D[4]*c[0]*c[1]*c[2] - D[5]*b[0]*c[0]*c[2] + D[5]*b[1]*c[0]*c[2] - D[5]*b[2]*c[0]*c[0] + D[5]*b[2]*c[0]*c[1] - D[6]*b[0]*b[0]*b[2] + D[6]*b[0]*b[1]*b[2] - D[7]*b[0]*c[0]*c[2] + D[7]*b[0]*c[1]*c[2] - D[8]*b[0]*b[0]*c[2] + D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[0] + D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[1] + D[0]*b[0]*b[0]*b[2] - D[2]*b[0]*b[1]*c[0] + D[2]*b[0]*b[2]*c[0] - D[3]*b[0]*c[0]*c[1] + D[3]*b[0]*c[0]*c[2] - D[5]*c[0]*c[0]*c[1] + D[5]*c[0]*c[0]*c[2] - D[6]*b[0]*b[0]*c[1] + D[6]*b[0]*b[0]*c[2] - D[6]*b[0]*b[1]*c[0] + D[6]*b[0]*b[2]*c[0] - D[8]*b[0]*c[0]*c[1] + D[8]*b[0]*c[0]*c[2] - D[8]*b[1]*c[0]*c[0] + D[8]*b[2]*c[0]*c[0])/(24*delta)
,
t*(-D[1]*b[0]*b[1]*c[0] + D[1]*b[0]*b[2]*c[0] - D[2]*b[0]*b[0]*b[1] + D[2]*b[0]*b[0]*b[2] - D[4]*c[0]*c[0]*c[1] + D[4]*c[0]*c[0]*c[2] - D[5]*b[0]*c[0]*c[1] + D[5]*b[0]*c[0]*c[2] - D[7]*b[0]*c[0]*c[1] + D[7]*b[0]*c[0]*c[2] - D[7]*b[1]*c[0]*c[0] + D[7]*b[2]*c[0]*c[0] - D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[0]*c[2] - D[8]*b[0]*b[1]*c[0] + D[8]*b[0]*b[2]*c[0])/(24*delta)
,
t*(2*D[0]*b[0]*b[0]*b[1]*b[1] - 2*D[0]*b[0]*b[0]*b[1]*b[2] + 2*D[0]*b[0]*b[0]*b[2]*b[2] + 2*D[1]*b[0]*b[1]*c[0]*c[1] - D[1]*b[0]*b[1]*c[0]*c[2] - D[1]*b[0]*b[2]*c[0]*c[1] + 2*D[1]*b[0]*b[2]*c[0]*c[2] + 2*D[2]*b[0]*b[0]*b[1]*c[1] - D[2]*b[0]*b[0]*b[1]*c[2] - D[2]*b[0]*b[0]*b[2]*c[1] + 2*D[2]*b[0]*b[0]*b[2]*c[2] + 2*D[2]*b[0]*b[1]*b[1]*c[0] - 2*D[2]*b[0]*b[1]*b[2]*c[0] + 2*D[2]*b[0]*b[2]*b[2]*c[0] + 2*D[3]*b[0]*b[1]*c[0]*c[1] - D[3]*b[0]*b[1]*c[0]*c[2] - D[3]*b[0]*b[2]*c[0]*c[1] + 2*D[3]*b[0]*b[2]*c[0]*c[2] + 2*D[4]*c[0]*c[0]*c[1]*c[1] - 2*D[4]*c[0]*c[0]*c[1]*c[2] + 2*D[4]*c[0]*c[0]*c[2]*c[2] + 2*D[5]*b[0]*c[0]*c[1]*c[1] - 2*D[5]*b[0]*c[0]*c[1]*c[2] + 2*D[5]*b[0]*c[0]*c[2]*c[2] + 2*D[5]*b[1]*c[0]*c[0]*c[1] - D[5]*b[1]*c[0]*c[0]*c[2] - D[5]*b[2]*c[0]*c[0]*c[1] + 2*D[5]*b[2]*c[0]*c[0]*c[2] + 2*D[6]*b[0]*b[0]*b[1]*c[1] - D[6]*b[0]*b[0]*b[1]*c[2] - D[6]*b[0]*b[0]*b[2]*c[1] + 2*D[6]*b[0]*b[0]*b[2]*c[2] + 2*D[6]*b[0]*b[1]*b[1]*c[0] - 2*D[6]*b[0]*b[1]*b[2]*c[0] + 2*D[6]*b[0]*b[2]*b[2]*c[0] + 2*D[7]*b[0]*c[0]*c[1]*c[1] - 2*D[7]*b[0]*c[0]*c[1]*c[2] + 2*D[7]*b[0]*c[0]*c[2]*c[2] + 2*D[7]*b[1]*c[0]*c[0]*c[1] - D[7]*b[1]*c[0]*c[0]*c[2] - D[7]*b[2]*c[0]*c[0]*c[1] + 2*D[7]*b[2]*c[0]*c[0]*c[2] + 2*D[8]*b[0]*b[0]*c[1]*c[1] - 2*D[8]*b[0]*b[0]*c[1]*c[2] + 2*D[8]*b[0]*b[0]*c[2]*c[2] + 4*D[8]*b[0]*b[1]*c[0]*c[1] - 2*D[8]*b[0]*b[1]*c[0]*c[2] - 2*D[8]*b[0]*b[2]*c[0]*c[1] + 4*D[8]*b[0]*b[2]*c[0]*c[2] + 2*D[8]*b[1]*b[1]*c[0]*c[0] - 2*D[8]*b[1]*b[2]*c[0]*c[0] + 2*D[8]*b[2]*b[2]*c[0]*c[0])/(192*delta)
,
t*(-D[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[1]*b[2] - D[2]*b[0]*b[1]*c[1] + D[2]*b[0]*b[2]*c[1] - D[3]*b[1]*c[0]*c[1] + D[3]*b[1]*c[0]*c[2] - D[5]*c[0]*c[1]*c[1] + D[5]*c[0]*c[1]*c[2] - D[6]*b[0]*b[1]*c[1] + D[6]*b[0]*b[1]*c[2] - D[6]*b[1]*b[1]*c[0] + D[6]*b[1]*b[2]*c[0] - D[8]*b[0]*c[1]*c[1] + D[8]*b[0]*c[1]*c[2] - D[8]*b[1]*c[0]*c[1] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(-D[1]*b[0]*b[1]*c[1] + D[1]*b[0]*b[2]*c[1] - D[2]*b[0]*b[1]*b[1] + D[2]*b[0]*b[1]*b[2] - D[4]*c[0]*c[1]*c[1] + D[4]*c[0]*c[1]*c[2] - D[5]*b[1]*c[0]*c[1] + D[5]*b[1]*c[0]*c[2] - D[7]*b[0]*c[1]*c[1] + D[7]*b[0]*c[1]*c[2] - D[7]*b[1]*c[0]*c[1] + D[7]*b[2]*c[0]*c[1] - D[8]*b[0]*b[1]*c[1] + D[8]*b[0]*b[1]*c[2] - D[8]*b[1]*b[1]*c[0] + D[8]*b[1]*b[2]*c[0])/(24*delta)
,
t*(-2*D[0]*b[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] - D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[1]*b[0]*b[1]*c[0]*c[1] + D[1]*b[0]*b[1]*c[1]*c[2] + D[1]*b[0]*b[2]*c[0]*c[1] - D[1]*b[0]*b[2]*c[1]*c[2] - 2*D[2]*b[0]*b[0]*b[1]*c[1] + D[2]*b[0]*b[0]*b[2]*c[1] - 2*D[2]*b[0]*b[1]*b[1]*c[0] + D[2]*b[0]*b[1]*b[1]*c[2] + D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2]*c[2] - D[2]*b[0]*b[2]*b[2]*c[1] - 2*D[3]*b[0]*b[1]*c[0]*c[1] + D[3]*b[0]*b[1]*c[0]*c[2] + D[3]*b[1]*b[2]*c[0]*c[1] - D[3]*b[1]*b[2]*c[0]*c[2] - 2*D[4]*c[0]*c[0]*c[1]*c[1] + D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] - D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[5]*b[0]*c[0]*c[1]*c[1] + D[5]*b[0]*c[0]*c[1]*c[2] - 2*D[5]*b[1]*c[0]*c[0]*c[1] + D[5]*b[1]*c[0]*c[0]*c[2] + D[5]*b[1]*c[0]*c[1]*c[2] - D[5]*b[1]*c[0]*c[2]*c[2] + D[5]*b[2]*c[0]*c[1]*c[1] - D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[6]*b[0]*b[0]*b[1]*c[1] + D[6]*b[0]*b[0]*b[1]*c[2] - 2*D[6]*b[0]*b[1]*b[1]*c[0] + D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] - D[6]*b[0]*b[1]*b[2]*c[2] + D[6]*b[1]*b[1]*b[2]*c[0] - D[6]*b[1]*b[2]*b[2]*c[0] - 2*D[7]*b[0]*c[0]*c[1]*c[1] + D[7]*b[0]*c[0]*c[1]*c[2] + D[7]*b[0]*c[1]*c[1]*c[2] - D[7]*b[0]*c[1]*c[2]*c[2] - 2*D[7]*b[1]*c[0]*c[0]*c[1] + D[7]*b[1]*c[0]*c[1]*c[2] + D[7]*b[2]*c[0]*c[0]*c[1] - D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[1]*c[1] + D[8]*b[0]*b[0]*c[1]*c[2] - 4*D[8]*b[0]*b[1]*c[0]*c[1] + D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] - D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] - D[8]*b[0]*b[2]*c[1]*c[2] - 2*D[8]*b[1]*b[1]*c[0]*c[0] + D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] - D[8]*b[1]*b[2]*c[0]*c[2] - D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[2]*b[2] - D[2]*b[0]*b[1]*c[2] + D[2]*b[0]*b[2]*c[2] - D[3]*b[2]*c[0]*c[1] + D[3]*b[2]*c[0]*c[2] - D[5]*c[0]*c[1]*c[2] + D[5]*c[0]*c[2]*c[2] - D[6]*b[0]*b[2]*c[1] + D[6]*b[0]*b[2]*c[2] - D[6]*b[1]*b[2]*c[0] + D[6]*b[2]*b[2]*c[0] - D[8]*b[0]*c[1]*c[2] + D[8]*b[0]*c[2]*c[2] - D[8]*b[1]*c[0]*c[2] + D[8]*b[2]*c[0]*c[2])/(24*delta)
,
t*(-D[1]*b[0]*b[1]*c[2] + D[1]*b[0]*b[2]*c[2] - D[2]*b[0]*b[1]*b[2] + D[2]*b[0]*b[2]*b[2] - D[4]*c[0]*c[1]*c[2] + D[4]*c[0]*c[2]*c[2] - D[5]*b[2]*c[0]*c[1] + D[5]*b[2]*c[0]*c[2] - D[7]*b[0]*c[1]*c[2] + D[7]*b[0]*c[2]*c[2] - D[7]*b[1]*c[0]*c[2] + D[7]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1] + D[8]*b[0]*b[2]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[2]*b[2]*c[0])/(24*delta)
,
t*(D[0]*b[0]*b[0]*b[1]*b[2] - 2*D[0]*b[0]*b[0]*b[2]*b[2] - D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] + D[1]*b[0]*b[1]*c[0]*c[2] - D[1]*b[0]*b[1]*c[1]*c[2] - 2*D[1]*b[0]*b[2]*c[0]*c[2] + D[1]*b[0]*b[2]*c[1]*c[2] + D[2]*b[0]*b[0]*b[1]*c[2] - 2*D[2]*b[0]*b[0]*b[2]*c[2] - D[2]*b[0]*b[1]*b[1]*c[2] + D[2]*b[0]*b[1]*b[2]*c[0] - D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] - 2*D[2]*b[0]*b[2]*b[2]*c[0] + D[2]*b[0]*b[2]*b[2]*c[1] + D[3]*b[0]*b[2]*c[0]*c[1] - 2*D[3]*b[0]*b[2]*c[0]*c[2] - D[3]*b[1]*b[2]*c[0]*c[1] + D[3]*b[1]*b[2]*c[0]*c[2] + D[4]*c[0]*c[0]*c[1]*c[2] - 2*D[4]*c[0]*c[0]*c[2]*c[2] - D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] + D[5]*b[0]*c[0]*c[1]*c[2] - 2*D[5]*b[0]*c[0]*c[2]*c[2] - D[5]*b[1]*c[0]*c[1]*c[2] + D[5]*b[1]*c[0]*c[2]*c[2] + D[5]*b[2]*c[0]*c[0]*c[1] - 2*D[5]*b[2]*c[0]*c[0]*c[2] - D[5]*b[2]*c[0]*c[1]*c[1] + D[5]*b[2]*c[0]*c[1]*c[2] + D[6]*b[0]*b[0]*b[2]*c[1] - 2*D[6]*b[0]*b[0]*b[2]*c[2] + D[6]*b[0]*b[1]*b[2]*c[0] - D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] - 2*D[6]*b[0]*b[2]*b[2]*c[0] - D[6]*b[1]*b[1]*b[2]*c[0] + D[6]*b[1]*b[2]*b[2]*c[0] + D[7]*b[0]*c[0]*c[1]*c[2] - 2*D[7]*b[0]*c[0]*c[2]*c[2] - D[7]*b[0]*c[1]*c[1]*c[2] + D[7]*b[0]*c[1]*c[2]*c[2] + D[7]*b[1]*c[0]*c[0]*c[2] - D[7]*b[1]*c[0]*c[1]*c[2] - 2*D[7]*b[2]*c[0]*c[0]*c[2] + D[7]*b[2]*c[0]*c[1]*c[2] + D[8]*b[0]*b[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[2]*c[2] + D[8]*b[0]*b[1]*c[0]*c[2] - D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] - 4*D[8]*b[0]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] - D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] - D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 2*D[8]*b[2]*b[2]*c[0]*c[0] + D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[1] + D[2]*b[1]*c[0] + D[6]*b[0]*c[1] + D[8]*c[0]*c[1])/(4*delta)
,
t*(D[1]*b[1]*c[0] + D[2]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[0]*c[1])/(4*delta)
,
t*(-D[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[1]*b[2] - D[1]*b[1]*c[0]*c[1] + D[1]*b[1]*c[0]*c[2] - D[2]*b[0]*b[1]*c[1] + D[2]*b[0]*b[1]*c[2] - D[2]*b[1]*b[1]*c[0] + D[2]*b[1]*b[2]*c[0] - D[6]*b[0]*b[1]*c[1] + D[6]*b[0]*b[2]*c[1] - D[7]*c[0]*c[1]*c[1] + D[7]*c[0]*c[1]*c[2] - D[8]*b[0]*c[1]*c[1] + D[8]*b[0]*c[1]*c[2] - D[8]*b[1]*c[0]*c[1] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[0]*b[1]*b[1] + D[2]*b[1]*c[1] + D[6]*b[1]*c[1] + D[8]*c[1]*c[1])/(4*delta)
,
t*(D[1]*b[1]*c[1] + D[2]*b[1]*b[1] + D[7]*c[1]*c[1] + D[8]*b[1]*c[1])/(4*delta)
,
t*(D[0]*b[0]*b[1]*b[1] - D[0]*b[1]*b[1]*b[2] + D[1]*b[1]*c[0]*c[1] - D[1]*b[1]*c[1]*c[2] + D[2]*b[0]*b[1]*c[1] + D[2]*b[1]*b[1]*c[0] - D[2]*b[1]*b[1]*c[2] - D[2]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*c[1] - D[6]*b[1]*b[2]*c[1] + D[7]*c[0]*c[1]*c[1] - D[7]*c[1]*c[1]*c[2] + D[8]*b[0]*c[1]*c[1] + D[8]*b[1]*c[0]*c[1] - D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(D[0]*b[1]*b[2] + D[2]*b[1]*c[2] + D[6]*b[2]*c[1] + D[8]*c[1]*c[2])/(4*delta)
,
t*(D[1]*b[1]*c[2] + D[2]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[2]*c[1])/(4*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[1]*b[1]*b[2] - D[1]*b[1]*c[0]*c[2] + D[1]*b[1]*c[1]*c[2] - D[2]*b[0]*b[1]*c[2] + D[2]*b[1]*b[1]*c[2] - D[2]*b[1]*b[2]*c[0] + D[2]*b[1]*b[2]*c[1] - D[6]*b[0]*b[2]*c[1] + D[6]*b[1]*b[2]*c[1] - D[7]*c[0]*c[1]*c[2] + D[7]*c[1]*c[1]*c[2] - D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[0]*c[1] + D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(D[3]*b[0]*c[1] + D[5]*c[0]*c[1] + D[6]*b[0]*b[1] + D[8]*b[1]*c[0])/(4*delta)
,
t*(D[4]*c[0]*c[1] + D[5]*b[0]*c[1] + D[7]*b[1]*c[0] + D[8]*b[0]*b[1])/(4*delta)
,
t*(-D[3]*b[0]*b[1]*c[1] + D[3]*b[0]*b[2]*c[1] - D[4]*c[0]*c[1]*c[1] + D[4]*c[0]*c[1]*c[2] - D[5]*b[0]*c[1]*c[1] + D[5]*b[0]*c[1]*c[2] - D[5]*b[1]*c[0]*c[1] + D[5]*b[2]*c[0]*c[1] - D[6]*b[0]*b[1]*b[1] + D[6]*b[0]*b[1]*b[2] - D[7]*b[1]*c[0]*c[1] + D[7]*b[1]*c[0]*c[2] - D[8]*b[0]*b[1]*c[1] + D[8]*b[0]*b[1]*c[2] - D[8]*b[1]*b[1]*c[0] + D[8]*b[1]*b[2]*c[0])/(24*delta)
,
t*(D[3]*b[1]*c[1] + D[5]*c[1]*c[1] + D[6]*b[1]*b[1] + D[8]*b[1]*c[1])/(4*delta)
,
t*(D[4]*c[1]*c[1] + D[5]*b[1]*c[1] + D[7]*b[1]*c[1] + D[8]*b[1]*b[1])/(4*delta)
,
t*(D[3]*b[0]*b[1]*c[1] - D[3]*b[1]*b[2]*c[1] + D[4]*c[0]*c[1]*c[1] - D[4]*c[1]*c[1]*c[2] + D[5]*b[0]*c[1]*c[1] + D[5]*b[1]*c[0]*c[1] - D[5]*b[1]*c[1]*c[2] - D[5]*b[2]*c[1]*c[1] + D[6]*b[0]*b[1]*b[1] - D[6]*b[1]*b[1]*b[2] + D[7]*b[1]*c[0]*c[1] - D[7]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[1] + D[8]*b[1]*b[1]*c[0] - D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(D[3]*b[2]*c[1] + D[5]*c[1]*c[2] + D[6]*b[1]*b[2] + D[8]*b[1]*c[2])/(4*delta)
,
t*(D[4]*c[1]*c[2] + D[5]*b[2]*c[1] + D[7]*b[1]*c[2] + D[8]*b[1]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[2]*c[1] + D[3]*b[1]*b[2]*c[1] - D[4]*c[0]*c[1]*c[2] + D[4]*c[1]*c[1]*c[2] - D[5]*b[0]*c[1]*c[2] + D[5]*b[1]*c[1]*c[2] - D[5]*b[2]*c[0]*c[1] + D[5]*b[2]*c[1]*c[1] - D[6]*b[0]*b[1]*b[2] + D[6]*b[1]*b[1]*b[2] - D[7]*b[1]*c[0]*c[2] + D[7]*b[1]*c[1]*c[2] - D[8]*b[0]*b[1]*c[2] + D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(D[0]*b[0]*b[0]*b[1] - D[0]*b[0]*b[1]*b[2] + D[2]*b[0]*b[1]*c[0] - D[2]*b[1]*b[2]*c[0] + D[3]*b[0]*c[0]*c[1] - D[3]*b[0]*c[1]*c[2] + D[5]*c[0]*c[0]*c[1] - D[5]*c[0]*c[1]*c[2] + D[6]*b[0]*b[0]*c[1] + D[6]*b[0]*b[1]*c[0] - D[6]*b[0]*b[1]*c[2] - D[6]*b[0]*b[2]*c[1] + D[8]*b[0]*c[0]*c[1] + D[8]*b[1]*c[0]*c[0] - D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[1]*b[0]*b[1]*c[0] - D[1]*b[1]*b[2]*c[0] + D[2]*b[0]*b[0]*b[1] - D[2]*b[0]*b[1]*b[2] + D[4]*c[0]*c[0]*c[1] - D[4]*c[0]*c[1]*c[2] + D[5]*b[0]*c[0]*c[1] - D[5]*b[0]*c[1]*c[2] + D[7]*b[0]*c[0]*c[1] + D[7]*b[1]*c[0]*c[0] - D[7]*b[1]*c[0]*c[2] - D[7]*b[2]*c[0]*c[1] + D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[1]*c[0] - D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(-2*D[0]*b[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] - D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[1]*b[0]*b[1]*c[0]*c[1] + D[1]*b[0]*b[1]*c[0]*c[2] + D[1]*b[1]*b[2]*c[0]*c[1] - D[1]*b[1]*b[2]*c[0]*c[2] - 2*D[2]*b[0]*b[0]*b[1]*c[1] + D[2]*b[0]*b[0]*b[1]*c[2] - 2*D[2]*b[0]*b[1]*b[1]*c[0] + D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2]*c[2] + D[2]*b[1]*b[1]*b[2]*c[0] - D[2]*b[1]*b[2]*b[2]*c[0] - 2*D[3]*b[0]*b[1]*c[0]*c[1] + D[3]*b[0]*b[1]*c[1]*c[2] + D[3]*b[0]*b[2]*c[0]*c[1] - D[3]*b[0]*b[2]*c[1]*c[2] - 2*D[4]*c[0]*c[0]*c[1]*c[1] + D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] - D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[5]*b[0]*c[0]*c[1]*c[1] + D[5]*b[0]*c[0]*c[1]*c[2] + D[5]*b[0]*c[1]*c[1]*c[2] - D[5]*b[0]*c[1]*c[2]*c[2] - 2*D[5]*b[1]*c[0]*c[0]*c[1] + D[5]*b[1]*c[0]*c[1]*c[2] + D[5]*b[2]*c[0]*c[0]*c[1] - D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[6]*b[0]*b[0]*b[1]*c[1] + D[6]*b[0]*b[0]*b[2]*c[1] - 2*D[6]*b[0]*b[1]*b[1]*c[0] + D[6]*b[0]*b[1]*b[1]*c[2] + D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] - D[6]*b[0]*b[1]*b[2]*c[2] - D[6]*b[0]*b[2]*b[2]*c[1] - 2*D[7]*b[0]*c[0]*c[1]*c[1] + D[7]*b[0]*c[0]*c[1]*c[2] - 2*D[7]*b[1]*c[0]*c[0]*c[1] + D[7]*b[1]*c[0]*c[0]*c[2] + D[7]*b[1]*c[0]*c[1]*c[2] - D[7]*b[1]*c[0]*c[2]*c[2] + D[7]*b[2]*c[0]*c[1]*c[1] - D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[1]*c[1] + D[8]*b[0]*b[0]*c[1]*c[2] - 4*D[8]*b[0]*b[1]*c[0]*c[1] + D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] - D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] - D[8]*b[0]*b[2]*c[1]*c[2] - 2*D[8]*b[1]*b[1]*c[0]*c[0] + D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] - D[8]*b[1]*b[2]*c[0]*c[2] - D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[1]*b[1] - D[0]*b[1]*b[1]*b[2] + D[2]*b[0]*b[1]*c[1] - D[2]*b[1]*b[2]*c[1] + D[3]*b[1]*c[0]*c[1] - D[3]*b[1]*c[1]*c[2] + D[5]*c[0]*c[1]*c[1] - D[5]*c[1]*c[1]*c[2] + D[6]*b[0]*b[1]*c[1] + D[6]*b[1]*b[1]*c[0] - D[6]*b[1]*b[1]*c[2] - D[6]*b[1]*b[2]*c[1] + D[8]*b[0]*c[1]*c[1] + D[8]*b[1]*c[0]*c[1] - D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(D[1]*b[0]*b[1]*c[1] - D[1]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[1] - D[2]*b[1]*b[1]*b[2] + D[4]*c[0]*c[1]*c[1] - D[4]*c[1]*c[1]*c[2] + D[5]*b[1]*c[0]*c[1] - D[5]*b[1]*c[1]*c[2] + D[7]*b[0]*c[1]*c[1] + D[7]*b[1]*c[0]*c[1] - D[7]*b[1]*c[1]*c[2] - D[7]*b[2]*c[1]*c[1] + D[8]*b[0]*b[1]*c[1] + D[8]*b[1]*b[1]*c[0] - D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(2*D[0]*b[0]*b[0]*b[1]*b[1] - 2*D[0]*b[0]*b[1]*b[1]*b[2] + 2*D[0]*b[1]*b[1]*b[2]*b[2] + 2*D[1]*b[0]*b[1]*c[0]*c[1] - D[1]*b[0]*b[1]*c[1]*c[2] - D[1]*b[1]*b[2]*c[0]*c[1] + 2*D[1]*b[1]*b[2]*c[1]*c[2] + 2*D[2]*b[0]*b[0]*b[1]*c[1] + 2*D[2]*b[0]*b[1]*b[1]*c[0] - D[2]*b[0]*b[1]*b[1]*c[2] - 2*D[2]*b[0]*b[1]*b[2]*c[1] - D[2]*b[1]*b[1]*b[2]*c[0] + 2*D[2]*b[1]*b[1]*b[2]*c[2] + 2*D[2]*b[1]*b[2]*b[2]*c[1] + 2*D[3]*b[0]*b[1]*c[0]*c[1] - D[3]*b[0]*b[1]*c[1]*c[2] - D[3]*b[1]*b[2]*c[0]*c[1] + 2*D[3]*b[1]*b[2]*c[1]*c[2] + 2*D[4]*c[0]*c[0]*c[1]*c[1] - 2*D[4]*c[0]*c[1]*c[1]*c[2] + 2*D[4]*c[1]*c[1]*c[2]*c[2] + 2*D[5]*b[0]*c[0]*c[1]*c[1] - D[5]*b[0]*c[1]*c[1]*c[2] + 2*D[5]*b[1]*c[0]*c[0]*c[1] - 2*D[5]*b[1]*c[0]*c[1]*c[2] + 2*D[5]*b[1]*c[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[1]*c[1] + 2*D[5]*b[2]*c[1]*c[1]*c[2] + 2*D[6]*b[0]*b[0]*b[1]*c[1] + 2*D[6]*b[0]*b[1]*b[1]*c[0] - D[6]*b[0]*b[1]*b[1]*c[2] - 2*D[6]*b[0]*b[1]*b[2]*c[1] - D[6]*b[1]*b[1]*b[2]*c[0] + 2*D[6]*b[1]*b[1]*b[2]*c[2] + 2*D[6]*b[1]*b[2]*b[2]*c[1] + 2*D[7]*b[0]*c[0]*c[1]*c[1] - D[7]*b[0]*c[1]*c[1]*c[2] + 2*D[7]*b[1]*c[0]*c[0]*c[1] - 2*D[7]*b[1]*c[0]*c[1]*c[2] + 2*D[7]*b[1]*c[1]*c[2]*c[2] - D[7]*b[2]*c[0]*c[1]*c[1] + 2*D[7]*b[2]*c[1]*c[1]*c[2] + 2*D[8]*b[0]*b[0]*c[1]*c[1] + 4*D[8]*b[0]*b[1]*c[0]*c[1] - 2*D[8]*b[0]*b[1]*c[1]*c[2] - 2*D[8]*b[0]*b[2]*c[1]*c[1] + 2*D[8]*b[1]*b[1]*c[0]*c[0] - 2*D[8]*b[1]*b[1]*c[0]*c[2] + 2*D[8]*b[1]*b[1]*c[2]*c[2] - 2*D[8]*b[1]*b[2]*c[0]*c[1] + 4*D[8]*b[1]*b[2]*c[1]*c[2] + 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[1]*b[2] - D[0]*b[1]*b[2]*b[2] + D[2]*b[0]*b[1]*c[2] - D[2]*b[1]*b[2]*c[2] + D[3]*b[2]*c[0]*c[1] - D[3]*b[2]*c[1]*c[2] + D[5]*c[0]*c[1]*c[2] - D[5]*c[1]*c[2]*c[2] + D[6]*b[0]*b[2]*c[1] + D[6]*b[1]*b[2]*c[0] - D[6]*b[1]*b[2]*c[2] - D[6]*b[2]*b[2]*c[1] + D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(D[1]*b[0]*b[1]*c[2] - D[1]*b[1]*b[2]*c[2] + D[2]*b[0]*b[1]*b[2] - D[2]*b[1]*b[2]*b[2] + D[4]*c[0]*c[1]*c[2] - D[4]*c[1]*c[2]*c[2] + D[5]*b[2]*c[0]*c[1] - D[5]*b[2]*c[1]*c[2] + D[7]*b[0]*c[1]*c[2] + D[7]*b[1]*c[0]*c[2] - D[7]*b[1]*c[2]*c[2] - D[7]*b[2]*c[1]*c[2] + D[8]*b[0]*b[2]*c[1] + D[8]*b[1]*b[2]*c[0] - D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[0]*b[1]*b[1]*b[2]*b[2] - D[1]*b[0]*b[1]*c[0]*c[2] + D[1]*b[0]*b[1]*c[1]*c[2] + D[1]*b[1]*b[2]*c[0]*c[2] - 2*D[1]*b[1]*b[2]*c[1]*c[2] - D[2]*b[0]*b[0]*b[1]*c[2] + D[2]*b[0]*b[1]*b[1]*c[2] - D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] - 2*D[2]*b[1]*b[1]*b[2]*c[2] + D[2]*b[1]*b[2]*b[2]*c[0] - 2*D[2]*b[1]*b[2]*b[2]*c[1] - D[3]*b[0]*b[2]*c[0]*c[1] + D[3]*b[0]*b[2]*c[1]*c[2] + D[3]*b[1]*b[2]*c[0]*c[1] - 2*D[3]*b[1]*b[2]*c[1]*c[2] - D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[4]*c[1]*c[1]*c[2]*c[2] - D[5]*b[0]*c[0]*c[1]*c[2] + D[5]*b[0]*c[1]*c[2]*c[2] + D[5]*b[1]*c[0]*c[1]*c[2] - 2*D[5]*b[1]*c[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[0]*c[1] + D[5]*b[2]*c[0]*c[1]*c[1] + D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[5]*b[2]*c[1]*c[1]*c[2] - D[6]*b[0]*b[0]*b[2]*c[1] - D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] + D[6]*b[0]*b[2]*b[2]*c[1] + D[6]*b[1]*b[1]*b[2]*c[0] - 2*D[6]*b[1]*b[1]*b[2]*c[2] - 2*D[6]*b[1]*b[2]*b[2]*c[1] - D[7]*b[0]*c[0]*c[1]*c[2] + D[7]*b[0]*c[1]*c[1]*c[2] - D[7]*b[1]*c[0]*c[0]*c[2] + D[7]*b[1]*c[0]*c[1]*c[2] + D[7]*b[1]*c[0]*c[2]*c[2] - 2*D[7]*b[1]*c[1]*c[2]*c[2] + D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[7]*b[2]*c[1]*c[1]*c[2] - D[8]*b[0]*b[0]*c[1]*c[2] - D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] - D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] + D[8]*b[1]*b[1]*c[0]*c[2] - 2*D[8]*b[1]*b[1]*c[2]*c[2] - D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 4*D[8]*b[1]*b[2]*c[1]*c[2] + D[8]*b[2]*b[2]*c[0]*c[1] - 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[2] + D[2]*b[2]*c[0] + D[6]*b[0]*c[2] + D[8]*c[0]*c[2])/(4*delta)
,
t*(D[1]*b[2]*c[0] + D[2]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[0]*c[2])/(4*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[2]*b[2] - D[1]*b[2]*c[0]*c[1] + D[1]*b[2]*c[0]*c[2] - D[2]*b[0]*b[2]*c[1] + D[2]*b[0]*b[2]*c[2] - D[2]*b[1]*b[2]*c[0] + D[2]*b[2]*b[2]*c[0] - D[6]*b[0]*b[1]*c[2] + D[6]*b[0]*b[2]*c[2] - D[7]*c[0]*c[1]*c[2] + D[7]*c[0]*c[2]*c[2] - D[8]*b[0]*c[1]*c[2] + D[8]*b[0]*c[2]*c[2] - D[8]*b[1]*c[0]*c[2] + D[8]*b[2]*c[0]*c[2])/(24*delta)
,
t*(D[0]*b[1]*b[2] + D[2]*b[2]*c[1] + D[6]*b[1]*c[2] + D[8]*c[1]*c[2])/(4*delta)
,
t*(D[1]*b[2]*c[1] + D[2]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[1]*c[2])/(4*delta)
,
t*(D[0]*b[0]*b[1]*b[2] - D[0]*b[1]*b[2]*b[2] + D[1]*b[2]*c[0]*c[1] - D[1]*b[2]*c[1]*c[2] + D[2]*b[0]*b[2]*c[1] + D[2]*b[1]*b[2]*c[0] - D[2]*b[1]*b[2]*c[2] - D[2]*b[2]*b[2]*c[1] + D[6]*b[0]*b[1]*c[2] - D[6]*b[1]*b[2]*c[2] + D[7]*c[0]*c[1]*c[2] - D[7]*c[1]*c[2]*c[2] + D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(D[0]*b[2]*b[2] + D[2]*b[2]*c[2] + D[6]*b[2]*c[2] + D[8]*c[2]*c[2])/(4*delta)
,
t*(D[1]*b[2]*c[2] + D[2]*b[2]*b[2] + D[7]*c[2]*c[2] + D[8]*b[2]*c[2])/(4*delta)
,
t*(-D[0]*b[0]*b[2]*b[2] + D[0]*b[1]*b[2]*b[2] - D[1]*b[2]*c[0]*c[2] + D[1]*b[2]*c[1]*c[2] - D[2]*b[0]*b[2]*c[2] + D[2]*b[1]*b[2]*c[2] - D[2]*b[2]*b[2]*c[0] + D[2]*b[2]*b[2]*c[1] - D[6]*b[0]*b[2]*c[2] + D[6]*b[1]*b[2]*c[2] - D[7]*c[0]*c[2]*c[2] + D[7]*c[1]*c[2]*c[2] - D[8]*b[0]*c[2]*c[2] + D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[0]*c[2] + D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(D[3]*b[0]*c[2] + D[5]*c[0]*c[2] + D[6]*b[0]*b[2] + D[8]*b[2]*c[0])/(4*delta)
,
t*(D[4]*c[0]*c[2] + D[5]*b[0]*c[2] + D[7]*b[2]*c[0] + D[8]*b[0]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[1]*c[2] + D[3]*b[0]*b[2]*c[2] - D[4]*c[0]*c[1]*c[2] + D[4]*c[0]*c[2]*c[2] - D[5]*b[0]*c[1]*c[2] + D[5]*b[0]*c[2]*c[2] - D[5]*b[1]*c[0]*c[2] + D[5]*b[2]*c[0]*c[2] - D[6]*b[0]*b[1]*b[2] + D[6]*b[0]*b[2]*b[2] - D[7]*b[2]*c[0]*c[1] + D[7]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1] + D[8]*b[0]*b[2]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[2]*b[2]*c[0])/(24*delta)
,
t*(D[3]*b[1]*c[2] + D[5]*c[1]*c[2] + D[6]*b[1]*b[2] + D[8]*b[2]*c[1])/(4*delta)
,
t*(D[4]*c[1]*c[2] + D[5]*b[1]*c[2] + D[7]*b[2]*c[1] + D[8]*b[1]*b[2])/(4*delta)
,
t*(D[3]*b[0]*b[1]*c[2] - D[3]*b[1]*b[2]*c[2] + D[4]*c[0]*c[1]*c[2] - D[4]*c[1]*c[2]*c[2] + D[5]*b[0]*c[1]*c[2] + D[5]*b[1]*c[0]*c[2] - D[5]*b[1]*c[2]*c[2] - D[5]*b[2]*c[1]*c[2] + D[6]*b[0]*b[1]*b[2] - D[6]*b[1]*b[2]*b[2] + D[7]*b[2]*c[0]*c[1] - D[7]*b[2]*c[1]*c[2] + D[8]*b[0]*b[2]*c[1] + D[8]*b[1]*b[2]*c[0] - D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(D[3]*b[2]*c[2] + D[5]*c[2]*c[2] + D[6]*b[2]*b[2] + D[8]*b[2]*c[2])/(4*delta)
,
t*(D[4]*c[2]*c[2] + D[5]*b[2]*c[2] + D[7]*b[2]*c[2] + D[8]*b[2]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[2]*c[2] + D[3]*b[1]*b[2]*c[2] - D[4]*c[0]*c[2]*c[2] + D[4]*c[1]*c[2]*c[2] - D[5]*b[0]*c[2]*c[2] + D[5]*b[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[2] + D[5]*b[2]*c[1]*c[2] - D[6]*b[0]*b[2]*b[2] + D[6]*b[1]*b[2]*b[2] - D[7]*b[2]*c[0]*c[2] + D[7]*b[2]*c[1]*c[2] - D[8]*b[0]*b[2]*c[2] + D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[0] + D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[2] + D[0]*b[0]*b[1]*b[2] - D[2]*b[0]*b[2]*c[0] + D[2]*b[1]*b[2]*c[0] - D[3]*b[0]*c[0]*c[2] + D[3]*b[0]*c[1]*c[2] - D[5]*c[0]*c[0]*c[2] + D[5]*c[0]*c[1]*c[2] - D[6]*b[0]*b[0]*c[2] + D[6]*b[0]*b[1]*c[2] - D[6]*b[0]*b[2]*c[0] + D[6]*b[0]*b[2]*c[1] - D[8]*b[0]*c[0]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[0] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(-D[1]*b[0]*b[2]*c[0] + D[1]*b[1]*b[2]*c[0] - D[2]*b[0]*b[0]*b[2] + D[2]*b[0]*b[1]*b[2] - D[4]*c[0]*c[0]*c[2] + D[4]*c[0]*c[1]*c[2] - D[5]*b[0]*c[0]*c[2] + D[5]*b[0]*c[1]*c[2] - D[7]*b[0]*c[0]*c[2] + D[7]*b[1]*c[0]*c[2] - D[7]*b[2]*c[0]*c[0] + D[7]*b[2]*c[0]*c[1] - D[8]*b[0]*b[0]*c[2] + D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[0] + D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(D[0]*b[0]*b[0]*b[1]*b[2] - 2*D[0]*b[0]*b[0]*b[2]*b[2] - D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] + D[1]*b[0]*b[2]*c[0]*c[1] - 2*D[1]*b[0]*b[2]*c[0]*c[2] - D[1]*b[1]*b[2]*c[0]*c[1] + D[1]*b[1]*b[2]*c[0]*c[2] + D[2]*b[0]*b[0]*b[2]*c[1] - 2*D[2]*b[0]*b[0]*b[2]*c[2] + D[2]*b[0]*b[1]*b[2]*c[0] - D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] - 2*D[2]*b[0]*b[2]*b[2]*c[0] - D[2]*b[1]*b[1]*b[2]*c[0] + D[2]*b[1]*b[2]*b[2]*c[0] + D[3]*b[0]*b[1]*c[0]*c[2] - D[3]*b[0]*b[1]*c[1]*c[2] - 2*D[3]*b[0]*b[2]*c[0]*c[2] + D[3]*b[0]*b[2]*c[1]*c[2] + D[4]*c[0]*c[0]*c[1]*c[2] - 2*D[4]*c[0]*c[0]*c[2]*c[2] - D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] + D[5]*b[0]*c[0]*c[1]*c[2] - 2*D[5]*b[0]*c[0]*c[2]*c[2] - D[5]*b[0]*c[1]*c[1]*c[2] + D[5]*b[0]*c[1]*c[2]*c[2] + D[5]*b[1]*c[0]*c[0]*c[2] - D[5]*b[1]*c[0]*c[1]*c[2] - 2*D[5]*b[2]*c[0]*c[0]*c[2] + D[5]*b[2]*c[0]*c[1]*c[2] + D[6]*b[0]*b[0]*b[1]*c[2] - 2*D[6]*b[0]*b[0]*b[2]*c[2] - D[6]*b[0]*b[1]*b[1]*c[2] + D[6]*b[0]*b[1]*b[2]*c[0] - D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] - 2*D[6]*b[0]*b[2]*b[2]*c[0] + D[6]*b[0]*b[2]*b[2]*c[1] + D[7]*b[0]*c[0]*c[1]*c[2] - 2*D[7]*b[0]*c[0]*c[2]*c[2] - D[7]*b[1]*c[0]*c[1]*c[2] + D[7]*b[1]*c[0]*c[2]*c[2] + D[7]*b[2]*c[0]*c[0]*c[1] - 2*D[7]*b[2]*c[0]*c[0]*c[2] - D[7]*b[2]*c[0]*c[1]*c[1] + D[7]*b[2]*c[0]*c[1]*c[2] + D[8]*b[0]*b[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[2]*c[2] + D[8]*b[0]*b[1]*c[0]*c[2] - D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] - 4*D[8]*b[0]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] - D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] - D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 2*D[8]*b[2]*b[2]*c[0]*c[0] + D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[1]*b[1]*b[2] - D[2]*b[0]*b[2]*c[1] + D[2]*b[1]*b[2]*c[1] - D[3]*b[1]*c[0]*c[2] + D[3]*b[1]*c[1]*c[2] - D[5]*c[0]*c[1]*c[2] + D[5]*c[1]*c[1]*c[2] - D[6]*b[0]*b[1]*c[2] + D[6]*b[1]*b[1]*c[2] - D[6]*b[1]*b[2]*c[0] + D[6]*b[1]*b[2]*c[1] - D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[0]*c[1] + D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(-D[1]*b[0]*b[2]*c[1] + D[1]*b[1]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2] + D[2]*b[1]*b[1]*b[2] - D[4]*c[0]*c[1]*c[2] + D[4]*c[1]*c[1]*c[2] - D[5]*b[1]*c[0]*c[2] + D[5]*b[1]*c[1]*c[2] - D[7]*b[0]*c[1]*c[2] + D[7]*b[1]*c[1]*c[2] - D[7]*b[2]*c[0]*c[1] + D[7]*b[2]*c[1]*c[1] - D[8]*b[0]*b[1]*c[2] + D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[0]*b[1]*b[1]*b[2]*b[2] - D[1]*b[0]*b[2]*c[0]*c[1] + D[1]*b[0]*b[2]*c[1]*c[2] + D[1]*b[1]*b[2]*c[0]*c[1] - 2*D[1]*b[1]*b[2]*c[1]*c[2] - D[2]*b[0]*b[0]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] + D[2]*b[0]*b[2]*b[2]*c[1] + D[2]*b[1]*b[1]*b[2]*c[0] - 2*D[2]*b[1]*b[1]*b[2]*c[2] - 2*D[2]*b[1]*b[2]*b[2]*c[1] - D[3]*b[0]*b[1]*c[0]*c[2] + D[3]*b[0]*b[1]*c[1]*c[2] + D[3]*b[1]*b[2]*c[0]*c[2] - 2*D[3]*b[1]*b[2]*c[1]*c[2] - D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[4]*c[1]*c[1]*c[2]*c[2] - D[5]*b[0]*c[0]*c[1]*c[2] + D[5]*b[0]*c[1]*c[1]*c[2] - D[5]*b[1]*c[0]*c[0]*c[2] + D[5]*b[1]*c[0]*c[1]*c[2] + D[5]*b[1]*c[0]*c[2]*c[2] - 2*D[5]*b[1]*c[1]*c[2]*c[2] + D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[5]*b[2]*c[1]*c[1]*c[2] - D[6]*b[0]*b[0]*b[1]*c[2] + D[6]*b[0]*b[1]*b[1]*c[2] - D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] - 2*D[6]*b[1]*b[1]*b[2]*c[2] + D[6]*b[1]*b[2]*b[2]*c[0] - 2*D[6]*b[1]*b[2]*b[2]*c[1] - D[7]*b[0]*c[0]*c[1]*c[2] + D[7]*b[0]*c[1]*c[2]*c[2] + D[7]*b[1]*c[0]*c[1]*c[2] - 2*D[7]*b[1]*c[1]*c[2]*c[2] - D[7]*b[2]*c[0]*c[0]*c[1] + D[7]*b[2]*c[0]*c[1]*c[1] + D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[7]*b[2]*c[1]*c[1]*c[2] - D[8]*b[0]*b[0]*c[1]*c[2] - D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] - D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] + D[8]*b[1]*b[1]*c[0]*c[2] - 2*D[8]*b[1]*b[1]*c[2]*c[2] - D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 4*D[8]*b[1]*b[2]*c[1]*c[2] + D[8]*b[2]*b[2]*c[0]*c[1] - 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
,
t*(-D[0]*b[0]*b[2]*b[2] + D[0]*b[1]*b[2]*b[2] - D[2]*b[0]*b[2]*c[2] + D[2]*b[1]*b[2]*c[2] - D[3]*b[2]*c[0]*c[2] + D[3]*b[2]*c[1]*c[2] - D[5]*c[0]*c[2]*c[2] + D[5]*c[1]*c[2]*c[2] - D[6]*b[0]*b[2]*c[2] + D[6]*b[1]*b[2]*c[2] - D[6]*b[2]*b[2]*c[0] + D[6]*b[2]*b[2]*c[1] - D[8]*b[0]*c[2]*c[2] + D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[0]*c[2] + D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(-D[1]*b[0]*b[2]*c[2] + D[1]*b[1]*b[2]*c[2] - D[2]*b[0]*b[2]*b[2] + D[2]*b[1]*b[2]*b[2] - D[4]*c[0]*c[2]*c[2] + D[4]*c[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[2] + D[5]*b[2]*c[1]*c[2] - D[7]*b[0]*c[2]*c[2] + D[7]*b[1]*c[2]*c[2] - D[7]*b[2]*c[0]*c[2] + D[7]*b[2]*c[1]*c[2] - D[8]*b[0]*b[2]*c[2] + D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[0] + D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(2*D[0]*b[0]*b[0]*b[2]*b[2] - 2*D[0]*b[0]*b[1]*b[2]*b[2] + 2*D[0]*b[1]*b[1]*b[2]*b[2] + 2*D[1]*b[0]*b[2]*c[0]*c[2] - D[1]*b[0]*b[2]*c[1]*c[2] - D[1]*b[1]*b[2]*c[0]*c[2] + 2*D[1]*b[1]*b[2]*c[1]*c[2] + 2*D[2]*b[0]*b[0]*b[2]*c[2] - 2*D[2]*b[0]*b[1]*b[2]*c[2] + 2*D[2]*b[0]*b[2]*b[2]*c[0] - D[2]*b[0]*b[2]*b[2]*c[1] + 2*D[2]*b[1]*b[1]*b[2]*c[2] - D[2]*b[1]*b[2]*b[2]*c[0] + 2*D[2]*b[1]*b[2]*b[2]*c[1] + 2*D[3]*b[0]*b[2]*c[0]*c[2] - D[3]*b[0]*b[2]*c[1]*c[2] - D[3]*b[1]*b[2]*c[0]*c[2] + 2*D[3]*b[1]*b[2]*c[1]*c[2] + 2*D[4]*c[0]*c[0]*c[2]*c[2] - 2*D[4]*c[0]*c[1]*c[2]*c[2] + 2*D[4]*c[1]*c[1]*c[2]*c[2] + 2*D[5]*b[0]*c[0]*c[2]*c[2] - D[5]*b[0]*c[1]*c[2]*c[2] - D[5]*b[1]*c[0]*c[2]*c[2] + 2*D[5]*b[1]*c[1]*c[2]*c[2] + 2*D[5]*b[2]*c[0]*c[0]*c[2] - 2*D[5]*b[2]*c[0]*c[1]*c[2] + 2*D[5]*b[2]*c[1]*c[1]*c[2] + 2*D[6]*b[0]*b[0]*b[2]*c[2] - 2*D[6]*b[0]*b[1]*b[2]*c[2] + 2*D[6]*b[0]*b[2]*b[2]*c[0] - D[6]*b[0]*b[2]*b[2]*c[1] + 2*D[6]*b[1]*b[1]*b[2]*c[2] - D[6]*b[1]*b[2]*b[2]*c[0] + 2*D[6]*b[1]*b[2]*b[2]*c[1] + 2*D[7]*b[0]*c[0]*c[2]*c[2] - D[7]*b[0]*c[1]*c[2]*c[2] - D[7]*b[1]*c[0]*c[2]*c[2] + 2*D[7]*b[1]*c[1]*c[2]*c[2] + 2*D[7]*b[2]*c[0]*c[0]*c[2] - 2*D[7]*b[2]*c[0]*c[1]*c[2] + 2*D[7]*b[2]*c[1]*c[1]*c[2] + 2*D[8]*b[0]*b[0]*c[2]*c[2] - 2*D[8]*b[0]*b[1]*c[2]*c[2] + 4*D[8]*b[0]*b[2]*c[0]*c[2] - 2*D[8]*b[0]*b[2]*c[1]*c[2] + 2*D[8]*b[1]*b[1]*c[2]*c[2] - 2*D[8]*b[1]*b[2]*c[0]*c[2] + 4*D[8]*b[1]*b[2]*c[1]*c[2] + 2*D[8]*b[2]*b[2]*c[0]*c[0] - 2*D[8]*b[2]*b[2]*c[0]*c[1] + 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
};
    return K;
}

std::vector<double> GT9::get_B(const gp_Pnt& point) const{
    const double L0 = (a[0] + b[0]*point.X() + c[0]*point.Y())/(2*delta);
    const double L1 = (a[1] + b[1]*point.X() + c[1]*point.Y())/(2*delta);
    const double L2 = (a[2] + b[2]*point.X() + c[2]*point.Y())/(2*delta);

    std::vector<double> B{
    b[0]/(2*delta)
    ,
    0
    ,
    b[0]*(-b[1]*L2 + b[2]*L1)/(4*delta)
    ,
    b[1]/(2*delta)
    ,
    0
    ,
    b[1]*(b[0]*L2 - b[2]*L0)/(4*delta)
    ,
    b[2]/(2*delta)
    ,
    0
    ,
    b[2]*(-b[0]*L1 + b[1]*L0)/(4*delta)
    ,
    0
    ,
    c[0]/(2*delta)
    ,
    c[0]*(-c[1]*L2 + c[2]*L1)/(4*delta)
    ,
    0
    ,
    c[1]/(2*delta)
    ,
    c[1]*(c[0]*L2 - c[2]*L0)/(4*delta)
    ,
    0
    ,
    c[2]/(2*delta)
    ,
    c[2]*(-c[0]*L1 + c[1]*L0)/(4*delta)
    ,
    c[0]/(2*delta)
    ,
    b[0]/(2*delta)
    ,
    (-(b[0]*c[1] + b[1]*c[0])*L2 + (b[0]*c[2] + b[2]*c[0])*L1)/(4*delta)
    ,
    c[1]/(2*delta)
    ,
    b[1]/(2*delta)
    ,
    ((b[0]*c[1] + b[1]*c[0])*L2 - (b[1]*c[2] + b[2]*c[1])*L0)/(4*delta)
    ,
    c[2]/(2*delta)
    ,
    b[2]/(2*delta)
    ,
    (-(b[0]*c[2] + b[2]*c[0])*L1 + (b[1]*c[2] + b[2]*c[1])*L0)/(4*delta)
    };
    return B;
}

std::vector<double> GT9::get_DB(const std::vector<double>& D, const gp_Pnt& point) const{
    const double L0 = (a[0] + b[0]*point.X() + c[0]*point.Y())/(2*delta);
    const double L1 = (a[1] + b[1]*point.X() + c[1]*point.Y())/(2*delta);
    const double L2 = (a[2] + b[2]*point.X() + c[2]*point.Y())/(2*delta);

    std::vector<double> DB{
(D[0]*b[0] + D[2]*c[0])/(2*delta)
,
(D[1]*c[0] + D[2]*b[0])/(2*delta)
,
(-(D[0]*b[0]*b[1] + D[1]*c[0]*c[1] + D[2]*b[0]*c[1] + D[2]*b[1]*c[0])*L2 + (D[0]*b[0]*b[2] + D[1]*c[0]*c[2] + D[2]*b[0]*c[2] + D[2]*b[2]*c[0])*L1)/(4*delta)
,
(D[0]*b[1] + D[2]*c[1])/(2*delta)
,
(D[1]*c[1] + D[2]*b[1])/(2*delta)
,
((D[0]*b[0]*b[1] + D[1]*c[0]*c[1] + D[2]*b[0]*c[1] + D[2]*b[1]*c[0])*L2 - (D[0]*b[1]*b[2] + D[1]*c[1]*c[2] + D[2]*b[1]*c[2] + D[2]*b[2]*c[1])*L0)/(4*delta)
,
(D[0]*b[2] + D[2]*c[2])/(2*delta)
,
(D[1]*c[2] + D[2]*b[2])/(2*delta)
,
(-(D[0]*b[0]*b[2] + D[1]*c[0]*c[2] + D[2]*b[0]*c[2] + D[2]*b[2]*c[0])*L1 + (D[0]*b[1]*b[2] + D[1]*c[1]*c[2] + D[2]*b[1]*c[2] + D[2]*b[2]*c[1])*L0)/(4*delta)
,
(D[3]*b[0] + D[5]*c[0])/(2*delta)
,
(D[4]*c[0] + D[5]*b[0])/(2*delta)
,
(-(D[3]*b[0]*b[1] + D[4]*c[0]*c[1] + D[5]*b[0]*c[1] + D[5]*b[1]*c[0])*L2 + (D[3]*b[0]*b[2] + D[4]*c[0]*c[2] + D[5]*b[0]*c[2] + D[5]*b[2]*c[0])*L1)/(4*delta)
,
(D[3]*b[1] + D[5]*c[1])/(2*delta)
,
(D[4]*c[1] + D[5]*b[1])/(2*delta)
,
((D[3]*b[0]*b[1] + D[4]*c[0]*c[1] + D[5]*b[0]*c[1] + D[5]*b[1]*c[0])*L2 - (D[3]*b[1]*b[2] + D[4]*c[1]*c[2] + D[5]*b[1]*c[2] + D[5]*b[2]*c[1])*L0)/(4*delta)
,
(D[3]*b[2] + D[5]*c[2])/(2*delta)
,
(D[4]*c[2] + D[5]*b[2])/(2*delta)
,
(-(D[3]*b[0]*b[2] + D[4]*c[0]*c[2] + D[5]*b[0]*c[2] + D[5]*b[2]*c[0])*L1 + (D[3]*b[1]*b[2] + D[4]*c[1]*c[2] + D[5]*b[1]*c[2] + D[5]*b[2]*c[1])*L0)/(4*delta)
,
(D[6]*b[0] + D[8]*c[0])/(2*delta)
,
(D[7]*c[0] + D[8]*b[0])/(2*delta)
,
(-(D[6]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[0]*c[1] + D[8]*b[1]*c[0])*L2 + (D[6]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[0]*c[2] + D[8]*b[2]*c[0])*L1)/(4*delta)
,
(D[6]*b[1] + D[8]*c[1])/(2*delta)
,
(D[7]*c[1] + D[8]*b[1])/(2*delta)
,
((D[6]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[0]*c[1] + D[8]*b[1]*c[0])*L2 - (D[6]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[1]*c[2] + D[8]*b[2]*c[1])*L0)/(4*delta)
,
(D[6]*b[2] + D[8]*c[2])/(2*delta)
,
(D[7]*c[2] + D[8]*b[2])/(2*delta)
,
(-(D[6]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[0]*c[2] + D[8]*b[2]*c[0])*L1 + (D[6]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[1]*c[2] + D[8]*b[2]*c[1])*L0)/(4*delta)
};

    return DB;
}

std::vector<double> GT9::get_Nf(const double t, const std::vector<gp_Pnt>& points) const{
    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};

    std::vector<double> Nf{
t*(2*a[0] + b[0]*x[0] + b[0]*x[1] + c[0]*y[0] + c[0]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
0
,
0
,
t*(2*a[0] + b[0]*x[0] + b[0]*x[1] + c[0]*y[0] + c[0]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1]*b[2] - 6*a[0]*a[2]*b[1] - 3*a[0]*b[1]*c[2]*y[0] - 3*a[0]*b[1]*c[2]*y[1] + 3*a[0]*b[2]*c[1]*y[0] + 3*a[0]*b[2]*c[1]*y[1] + 3*a[1]*b[0]*b[2]*x[0] + 3*a[1]*b[0]*b[2]*x[1] + 3*a[1]*b[2]*c[0]*y[0] + 3*a[1]*b[2]*c[0]*y[1] - 3*a[2]*b[0]*b[1]*x[0] - 3*a[2]*b[0]*b[1]*x[1] - 3*a[2]*b[1]*c[0]*y[0] - 3*a[2]*b[1]*c[0]*y[1] - 2*b[0]*b[1]*c[2]*x[0]*y[0] - b[0]*b[1]*c[2]*x[0]*y[1] - b[0]*b[1]*c[2]*x[1]*y[0] - 2*b[0]*b[1]*c[2]*x[1]*y[1] + 2*b[0]*b[2]*c[1]*x[0]*y[0] + b[0]*b[2]*c[1]*x[0]*y[1] + b[0]*b[2]*c[1]*x[1]*y[0] + 2*b[0]*b[2]*c[1]*x[1]*y[1] - 2*b[1]*c[0]*c[2]*y[0]*y[0] - 2*b[1]*c[0]*c[2]*y[0]*y[1] - 2*b[1]*c[0]*c[2]*y[1]*y[1] + 2*b[2]*c[0]*c[1]*y[0]*y[0] + 2*b[2]*c[0]*c[1]*y[0]*y[1] + 2*b[2]*c[0]*c[1]*y[1]*y[1])/(48*(delta*delta))
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1]*c[2] - 6*a[0]*a[2]*c[1] + 3*a[0]*b[1]*c[2]*x[0] + 3*a[0]*b[1]*c[2]*x[1] - 3*a[0]*b[2]*c[1]*x[0] - 3*a[0]*b[2]*c[1]*x[1] + 3*a[1]*b[0]*c[2]*x[0] + 3*a[1]*b[0]*c[2]*x[1] + 3*a[1]*c[0]*c[2]*y[0] + 3*a[1]*c[0]*c[2]*y[1] - 3*a[2]*b[0]*c[1]*x[0] - 3*a[2]*b[0]*c[1]*x[1] - 3*a[2]*c[0]*c[1]*y[0] - 3*a[2]*c[0]*c[1]*y[1] + 2*b[0]*b[1]*c[2]*x[0]*x[0] + 2*b[0]*b[1]*c[2]*x[0]*x[1] + 2*b[0]*b[1]*c[2]*x[1]*x[1] - 2*b[0]*b[2]*c[1]*x[0]*x[0] - 2*b[0]*b[2]*c[1]*x[0]*x[1] - 2*b[0]*b[2]*c[1]*x[1]*x[1] + 2*b[1]*c[0]*c[2]*x[0]*y[0] + b[1]*c[0]*c[2]*x[0]*y[1] + b[1]*c[0]*c[2]*x[1]*y[0] + 2*b[1]*c[0]*c[2]*x[1]*y[1] - 2*b[2]*c[0]*c[1]*x[0]*y[0] - b[2]*c[0]*c[1]*x[0]*y[1] - b[2]*c[0]*c[1]*x[1]*y[0] - 2*b[2]*c[0]*c[1]*x[1]*y[1])/(48*(delta*delta))
,
t*(2*a[1] + b[1]*x[0] + b[1]*x[1] + c[1]*y[0] + c[1]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
0
,
0
,
t*(2*a[1] + b[1]*x[0] + b[1]*x[1] + c[1]*y[0] + c[1]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(-6*a[0]*a[1]*b[2] - 3*a[0]*b[1]*b[2]*x[0] - 3*a[0]*b[1]*b[2]*x[1] - 3*a[0]*b[2]*c[1]*y[0] - 3*a[0]*b[2]*c[1]*y[1] + 6*a[1]*a[2]*b[0] + 3*a[1]*b[0]*c[2]*y[0] + 3*a[1]*b[0]*c[2]*y[1] - 3*a[1]*b[2]*c[0]*y[0] - 3*a[1]*b[2]*c[0]*y[1] + 3*a[2]*b[0]*b[1]*x[0] + 3*a[2]*b[0]*b[1]*x[1] + 3*a[2]*b[0]*c[1]*y[0] + 3*a[2]*b[0]*c[1]*y[1] + 2*b[0]*b[1]*c[2]*x[0]*y[0] + b[0]*b[1]*c[2]*x[0]*y[1] + b[0]*b[1]*c[2]*x[1]*y[0] + 2*b[0]*b[1]*c[2]*x[1]*y[1] + 2*b[0]*c[1]*c[2]*y[0]*y[0] + 2*b[0]*c[1]*c[2]*y[0]*y[1] + 2*b[0]*c[1]*c[2]*y[1]*y[1] - 2*b[1]*b[2]*c[0]*x[0]*y[0] - b[1]*b[2]*c[0]*x[0]*y[1] - b[1]*b[2]*c[0]*x[1]*y[0] - 2*b[1]*b[2]*c[0]*x[1]*y[1] - 2*b[2]*c[0]*c[1]*y[0]*y[0] - 2*b[2]*c[0]*c[1]*y[0]*y[1] - 2*b[2]*c[0]*c[1]*y[1]*y[1])/(48*(delta*delta))
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(-6*a[0]*a[1]*c[2] - 3*a[0]*b[1]*c[2]*x[0] - 3*a[0]*b[1]*c[2]*x[1] - 3*a[0]*c[1]*c[2]*y[0] - 3*a[0]*c[1]*c[2]*y[1] + 6*a[1]*a[2]*c[0] - 3*a[1]*b[0]*c[2]*x[0] - 3*a[1]*b[0]*c[2]*x[1] + 3*a[1]*b[2]*c[0]*x[0] + 3*a[1]*b[2]*c[0]*x[1] + 3*a[2]*b[1]*c[0]*x[0] + 3*a[2]*b[1]*c[0]*x[1] + 3*a[2]*c[0]*c[1]*y[0] + 3*a[2]*c[0]*c[1]*y[1] - 2*b[0]*b[1]*c[2]*x[0]*x[0] - 2*b[0]*b[1]*c[2]*x[0]*x[1] - 2*b[0]*b[1]*c[2]*x[1]*x[1] - 2*b[0]*c[1]*c[2]*x[0]*y[0] - b[0]*c[1]*c[2]*x[0]*y[1] - b[0]*c[1]*c[2]*x[1]*y[0] - 2*b[0]*c[1]*c[2]*x[1]*y[1] + 2*b[1]*b[2]*c[0]*x[0]*x[0] + 2*b[1]*b[2]*c[0]*x[0]*x[1] + 2*b[1]*b[2]*c[0]*x[1]*x[1] + 2*b[2]*c[0]*c[1]*x[0]*y[0] + b[2]*c[0]*c[1]*x[0]*y[1] + b[2]*c[0]*c[1]*x[1]*y[0] + 2*b[2]*c[0]*c[1]*x[1]*y[1])/(48*(delta*delta))
,
t*(2*a[2] + b[2]*x[0] + b[2]*x[1] + c[2]*y[0] + c[2]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
0
,
0
,
t*(2*a[2] + b[2]*x[0] + b[2]*x[1] + c[2]*y[0] + c[2]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2]*b[1] + 3*a[0]*b[1]*b[2]*x[0] + 3*a[0]*b[1]*b[2]*x[1] + 3*a[0]*b[1]*c[2]*y[0] + 3*a[0]*b[1]*c[2]*y[1] - 6*a[1]*a[2]*b[0] - 3*a[1]*b[0]*b[2]*x[0] - 3*a[1]*b[0]*b[2]*x[1] - 3*a[1]*b[0]*c[2]*y[0] - 3*a[1]*b[0]*c[2]*y[1] - 3*a[2]*b[0]*c[1]*y[0] - 3*a[2]*b[0]*c[1]*y[1] + 3*a[2]*b[1]*c[0]*y[0] + 3*a[2]*b[1]*c[0]*y[1] - 2*b[0]*b[2]*c[1]*x[0]*y[0] - b[0]*b[2]*c[1]*x[0]*y[1] - b[0]*b[2]*c[1]*x[1]*y[0] - 2*b[0]*b[2]*c[1]*x[1]*y[1] - 2*b[0]*c[1]*c[2]*y[0]*y[0] - 2*b[0]*c[1]*c[2]*y[0]*y[1] - 2*b[0]*c[1]*c[2]*y[1]*y[1] + 2*b[1]*b[2]*c[0]*x[0]*y[0] + b[1]*b[2]*c[0]*x[0]*y[1] + b[1]*b[2]*c[0]*x[1]*y[0] + 2*b[1]*b[2]*c[0]*x[1]*y[1] + 2*b[1]*c[0]*c[2]*y[0]*y[0] + 2*b[1]*c[0]*c[2]*y[0]*y[1] + 2*b[1]*c[0]*c[2]*y[1]*y[1])/(48*(delta*delta))
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2]*c[1] + 3*a[0]*b[2]*c[1]*x[0] + 3*a[0]*b[2]*c[1]*x[1] + 3*a[0]*c[1]*c[2]*y[0] + 3*a[0]*c[1]*c[2]*y[1] - 6*a[1]*a[2]*c[0] - 3*a[1]*b[2]*c[0]*x[0] - 3*a[1]*b[2]*c[0]*x[1] - 3*a[1]*c[0]*c[2]*y[0] - 3*a[1]*c[0]*c[2]*y[1] + 3*a[2]*b[0]*c[1]*x[0] + 3*a[2]*b[0]*c[1]*x[1] - 3*a[2]*b[1]*c[0]*x[0] - 3*a[2]*b[1]*c[0]*x[1] + 2*b[0]*b[2]*c[1]*x[0]*x[0] + 2*b[0]*b[2]*c[1]*x[0]*x[1] + 2*b[0]*b[2]*c[1]*x[1]*x[1] + 2*b[0]*c[1]*c[2]*x[0]*y[0] + b[0]*c[1]*c[2]*x[0]*y[1] + b[0]*c[1]*c[2]*x[1]*y[0] + 2*b[0]*c[1]*c[2]*x[1]*y[1] - 2*b[1]*b[2]*c[0]*x[0]*x[0] - 2*b[1]*b[2]*c[0]*x[0]*x[1] - 2*b[1]*b[2]*c[0]*x[1]*x[1] - 2*b[1]*c[0]*c[2]*x[0]*y[0] - b[1]*c[0]*c[2]*x[0]*y[1] - b[1]*c[0]*c[2]*x[1]*y[0] - 2*b[1]*c[0]*c[2]*x[1]*y[1])/(48*(delta*delta))
    };

    return Nf;
}

std::vector<double> GT9::get_nodal_density_gradient(gp_Pnt p) const{
    (void)p;
    
    return std::vector<double>{b[0]/(2*delta), b[1]/(2*delta), b[2]/(2*delta),
                               c[0]/(2*delta), c[1]/(2*delta), c[2]/(2*delta)};
}

std::vector<double> GT9::get_R(const std::vector<double>& K, const double t, const std::vector<gp_Pnt>& points) const{
    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};
    const double rnorm = 0.5*points[0].Distance(points[1]);

    Eigen::Matrix<double, K_DIM, K_DIM> R;
    Eigen::Matrix<double, DIM, DIM> Km = Eigen::Map<const Eigen::Matrix<double, DIM, DIM>>(K.data(), DIM, DIM);
    R.fill(0);
    constexpr size_t GN = 5;
    const auto& GL = utils::GaussLegendre<GN>::get();

    for(auto xi = GL.begin(); xi < GL.end(); ++xi){
        const double s = xi->x;
        const double X = 0.5*(x[0]*(1-s) + x[1]*(1+s));
        const double Y = 0.5*(y[0]*(1-s) + y[1]*(1+s));
        const auto NN = N_mat(X, Y);
        R += xi->w*NN.transpose()*Km*NN;
    }
    R *= t*rnorm;
    std::vector<double> R_vec(K_DIM*K_DIM);
    std::copy(R.data(), R.data()+K_DIM*K_DIM, R_vec.begin());

    return R_vec;
}

std::vector<double> GT9::get_Rf(const std::vector<double>& S, const double t, const std::vector<gp_Pnt>& points) const{
    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};

    std::vector<double> Rf{
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*S[0]*a[0]*x[0] + 3*S[0]*a[0]*x[1] + 2*S[0]*b[0]*x[0]*x[0] + 2*S[0]*b[0]*x[0]*x[1] + 2*S[0]*b[0]*x[1]*x[1] + 2*S[0]*c[0]*x[0]*y[0] + S[0]*c[0]*x[0]*y[1] + S[0]*c[0]*x[1]*y[0] + 2*S[0]*c[0]*x[1]*y[1] + 3*S[1]*a[0]*y[0] + 3*S[1]*a[0]*y[1] + 2*S[1]*b[0]*x[0]*y[0] + S[1]*b[0]*x[0]*y[1] + S[1]*b[0]*x[1]*y[0] + 2*S[1]*b[0]*x[1]*y[1] + 2*S[1]*c[0]*y[0]*y[0] + 2*S[1]*c[0]*y[0]*y[1] + 2*S[1]*c[0]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*S[2]*a[0]*x[0] + 3*S[2]*a[0]*x[1] + 2*S[2]*b[0]*x[0]*x[0] + 2*S[2]*b[0]*x[0]*x[1] + 2*S[2]*b[0]*x[1]*x[1] + 2*S[2]*c[0]*x[0]*y[0] + S[2]*c[0]*x[0]*y[1] + S[2]*c[0]*x[1]*y[0] + 2*S[2]*c[0]*x[1]*y[1] + 3*S[3]*a[0]*y[0] + 3*S[3]*a[0]*y[1] + 2*S[3]*b[0]*x[0]*y[0] + S[3]*b[0]*x[0]*y[1] + S[3]*b[0]*x[1]*y[0] + 2*S[3]*b[0]*x[1]*y[1] + 2*S[3]*c[0]*y[0]*y[0] + 2*S[3]*c[0]*y[0]*y[1] + 2*S[3]*c[0]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*S[0]*a[0]*a[1]*b[2]*x[0] + 6*S[0]*a[0]*a[1]*b[2]*x[1] - 6*S[0]*a[0]*a[2]*b[1]*x[0] - 6*S[0]*a[0]*a[2]*b[1]*x[1] - 4*S[0]*a[0]*b[1]*c[2]*x[0]*y[0] - 2*S[0]*a[0]*b[1]*c[2]*x[0]*y[1] - 2*S[0]*a[0]*b[1]*c[2]*x[1]*y[0] - 4*S[0]*a[0]*b[1]*c[2]*x[1]*y[1] + 4*S[0]*a[0]*b[2]*c[1]*x[0]*y[0] + 2*S[0]*a[0]*b[2]*c[1]*x[0]*y[1] + 2*S[0]*a[0]*b[2]*c[1]*x[1]*y[0] + 4*S[0]*a[0]*b[2]*c[1]*x[1]*y[1] + 4*S[0]*a[1]*b[0]*b[2]*x[0]*x[0] + 4*S[0]*a[1]*b[0]*b[2]*x[0]*x[1] + 4*S[0]*a[1]*b[0]*b[2]*x[1]*x[1] + 4*S[0]*a[1]*b[2]*c[0]*x[0]*y[0] + 2*S[0]*a[1]*b[2]*c[0]*x[0]*y[1] + 2*S[0]*a[1]*b[2]*c[0]*x[1]*y[0] + 4*S[0]*a[1]*b[2]*c[0]*x[1]*y[1] - 4*S[0]*a[2]*b[0]*b[1]*x[0]*x[0] - 4*S[0]*a[2]*b[0]*b[1]*x[0]*x[1] - 4*S[0]*a[2]*b[0]*b[1]*x[1]*x[1] - 4*S[0]*a[2]*b[1]*c[0]*x[0]*y[0] - 2*S[0]*a[2]*b[1]*c[0]*x[0]*y[1] - 2*S[0]*a[2]*b[1]*c[0]*x[1]*y[0] - 4*S[0]*a[2]*b[1]*c[0]*x[1]*y[1] - 3*S[0]*b[0]*b[1]*c[2]*x[0]*x[0]*y[0] - S[0]*b[0]*b[1]*c[2]*x[0]*x[0]*y[1] - 2*S[0]*b[0]*b[1]*c[2]*x[0]*x[1]*y[0] - 2*S[0]*b[0]*b[1]*c[2]*x[0]*x[1]*y[1] - S[0]*b[0]*b[1]*c[2]*x[1]*x[1]*y[0] - 3*S[0]*b[0]*b[1]*c[2]*x[1]*x[1]*y[1] + 3*S[0]*b[0]*b[2]*c[1]*x[0]*x[0]*y[0] + S[0]*b[0]*b[2]*c[1]*x[0]*x[0]*y[1] + 2*S[0]*b[0]*b[2]*c[1]*x[0]*x[1]*y[0] + 2*S[0]*b[0]*b[2]*c[1]*x[0]*x[1]*y[1] + S[0]*b[0]*b[2]*c[1]*x[1]*x[1]*y[0] + 3*S[0]*b[0]*b[2]*c[1]*x[1]*x[1]*y[1] - 3*S[0]*b[1]*c[0]*c[2]*x[0]*y[0]*y[0] - 2*S[0]*b[1]*c[0]*c[2]*x[0]*y[0]*y[1] - S[0]*b[1]*c[0]*c[2]*x[0]*y[1]*y[1] - S[0]*b[1]*c[0]*c[2]*x[1]*y[0]*y[0] - 2*S[0]*b[1]*c[0]*c[2]*x[1]*y[0]*y[1] - 3*S[0]*b[1]*c[0]*c[2]*x[1]*y[1]*y[1] + 3*S[0]*b[2]*c[0]*c[1]*x[0]*y[0]*y[0] + 2*S[0]*b[2]*c[0]*c[1]*x[0]*y[0]*y[1] + S[0]*b[2]*c[0]*c[1]*x[0]*y[1]*y[1] + S[0]*b[2]*c[0]*c[1]*x[1]*y[0]*y[0] + 2*S[0]*b[2]*c[0]*c[1]*x[1]*y[0]*y[1] + 3*S[0]*b[2]*c[0]*c[1]*x[1]*y[1]*y[1] + 6*S[1]*a[0]*a[1]*b[2]*y[0] + 6*S[1]*a[0]*a[1]*b[2]*y[1] - 6*S[1]*a[0]*a[2]*b[1]*y[0] - 6*S[1]*a[0]*a[2]*b[1]*y[1] - 4*S[1]*a[0]*b[1]*c[2]*y[0]*y[0] - 4*S[1]*a[0]*b[1]*c[2]*y[0]*y[1] - 4*S[1]*a[0]*b[1]*c[2]*y[1]*y[1] + 4*S[1]*a[0]*b[2]*c[1]*y[0]*y[0] + 4*S[1]*a[0]*b[2]*c[1]*y[0]*y[1] + 4*S[1]*a[0]*b[2]*c[1]*y[1]*y[1] + 4*S[1]*a[1]*b[0]*b[2]*x[0]*y[0] + 2*S[1]*a[1]*b[0]*b[2]*x[0]*y[1] + 2*S[1]*a[1]*b[0]*b[2]*x[1]*y[0] + 4*S[1]*a[1]*b[0]*b[2]*x[1]*y[1] + 4*S[1]*a[1]*b[2]*c[0]*y[0]*y[0] + 4*S[1]*a[1]*b[2]*c[0]*y[0]*y[1] + 4*S[1]*a[1]*b[2]*c[0]*y[1]*y[1] - 4*S[1]*a[2]*b[0]*b[1]*x[0]*y[0] - 2*S[1]*a[2]*b[0]*b[1]*x[0]*y[1] - 2*S[1]*a[2]*b[0]*b[1]*x[1]*y[0] - 4*S[1]*a[2]*b[0]*b[1]*x[1]*y[1] - 4*S[1]*a[2]*b[1]*c[0]*y[0]*y[0] - 4*S[1]*a[2]*b[1]*c[0]*y[0]*y[1] - 4*S[1]*a[2]*b[1]*c[0]*y[1]*y[1] - 3*S[1]*b[0]*b[1]*c[2]*x[0]*y[0]*y[0] - 2*S[1]*b[0]*b[1]*c[2]*x[0]*y[0]*y[1] - S[1]*b[0]*b[1]*c[2]*x[0]*y[1]*y[1] - S[1]*b[0]*b[1]*c[2]*x[1]*y[0]*y[0] - 2*S[1]*b[0]*b[1]*c[2]*x[1]*y[0]*y[1] - 3*S[1]*b[0]*b[1]*c[2]*x[1]*y[1]*y[1] + 3*S[1]*b[0]*b[2]*c[1]*x[0]*y[0]*y[0] + 2*S[1]*b[0]*b[2]*c[1]*x[0]*y[0]*y[1] + S[1]*b[0]*b[2]*c[1]*x[0]*y[1]*y[1] + S[1]*b[0]*b[2]*c[1]*x[1]*y[0]*y[0] + 2*S[1]*b[0]*b[2]*c[1]*x[1]*y[0]*y[1] + 3*S[1]*b[0]*b[2]*c[1]*x[1]*y[1]*y[1] - 3*S[1]*b[1]*c[0]*c[2]*y[0]*y[0]*y[0] - 3*S[1]*b[1]*c[0]*c[2]*y[0]*y[0]*y[1] - 3*S[1]*b[1]*c[0]*c[2]*y[0]*y[1]*y[1] - 3*S[1]*b[1]*c[0]*c[2]*y[1]*y[1]*y[1] + 3*S[1]*b[2]*c[0]*c[1]*y[0]*y[0]*y[0] + 3*S[1]*b[2]*c[0]*c[1]*y[0]*y[0]*y[1] + 3*S[1]*b[2]*c[0]*c[1]*y[0]*y[1]*y[1] + 3*S[1]*b[2]*c[0]*c[1]*y[1]*y[1]*y[1] + 6*S[2]*a[0]*a[1]*c[2]*x[0] + 6*S[2]*a[0]*a[1]*c[2]*x[1] - 6*S[2]*a[0]*a[2]*c[1]*x[0] - 6*S[2]*a[0]*a[2]*c[1]*x[1] + 4*S[2]*a[0]*b[1]*c[2]*x[0]*x[0] + 4*S[2]*a[0]*b[1]*c[2]*x[0]*x[1] + 4*S[2]*a[0]*b[1]*c[2]*x[1]*x[1] - 4*S[2]*a[0]*b[2]*c[1]*x[0]*x[0] - 4*S[2]*a[0]*b[2]*c[1]*x[0]*x[1] - 4*S[2]*a[0]*b[2]*c[1]*x[1]*x[1] + 4*S[2]*a[1]*b[0]*c[2]*x[0]*x[0] + 4*S[2]*a[1]*b[0]*c[2]*x[0]*x[1] + 4*S[2]*a[1]*b[0]*c[2]*x[1]*x[1] + 4*S[2]*a[1]*c[0]*c[2]*x[0]*y[0] + 2*S[2]*a[1]*c[0]*c[2]*x[0]*y[1] + 2*S[2]*a[1]*c[0]*c[2]*x[1]*y[0] + 4*S[2]*a[1]*c[0]*c[2]*x[1]*y[1] - 4*S[2]*a[2]*b[0]*c[1]*x[0]*x[0] - 4*S[2]*a[2]*b[0]*c[1]*x[0]*x[1] - 4*S[2]*a[2]*b[0]*c[1]*x[1]*x[1] - 4*S[2]*a[2]*c[0]*c[1]*x[0]*y[0] - 2*S[2]*a[2]*c[0]*c[1]*x[0]*y[1] - 2*S[2]*a[2]*c[0]*c[1]*x[1]*y[0] - 4*S[2]*a[2]*c[0]*c[1]*x[1]*y[1] + 3*S[2]*b[0]*b[1]*c[2]*x[0]*x[0]*x[0] + 3*S[2]*b[0]*b[1]*c[2]*x[0]*x[0]*x[1] + 3*S[2]*b[0]*b[1]*c[2]*x[0]*x[1]*x[1] + 3*S[2]*b[0]*b[1]*c[2]*x[1]*x[1]*x[1] - 3*S[2]*b[0]*b[2]*c[1]*x[0]*x[0]*x[0] - 3*S[2]*b[0]*b[2]*c[1]*x[0]*x[0]*x[1] - 3*S[2]*b[0]*b[2]*c[1]*x[0]*x[1]*x[1] - 3*S[2]*b[0]*b[2]*c[1]*x[1]*x[1]*x[1] + 3*S[2]*b[1]*c[0]*c[2]*x[0]*x[0]*y[0] + S[2]*b[1]*c[0]*c[2]*x[0]*x[0]*y[1] + 2*S[2]*b[1]*c[0]*c[2]*x[0]*x[1]*y[0] + 2*S[2]*b[1]*c[0]*c[2]*x[0]*x[1]*y[1] + S[2]*b[1]*c[0]*c[2]*x[1]*x[1]*y[0] + 3*S[2]*b[1]*c[0]*c[2]*x[1]*x[1]*y[1] - 3*S[2]*b[2]*c[0]*c[1]*x[0]*x[0]*y[0] - S[2]*b[2]*c[0]*c[1]*x[0]*x[0]*y[1] - 2*S[2]*b[2]*c[0]*c[1]*x[0]*x[1]*y[0] - 2*S[2]*b[2]*c[0]*c[1]*x[0]*x[1]*y[1] - S[2]*b[2]*c[0]*c[1]*x[1]*x[1]*y[0] - 3*S[2]*b[2]*c[0]*c[1]*x[1]*x[1]*y[1] + 6*S[3]*a[0]*a[1]*c[2]*y[0] + 6*S[3]*a[0]*a[1]*c[2]*y[1] - 6*S[3]*a[0]*a[2]*c[1]*y[0] - 6*S[3]*a[0]*a[2]*c[1]*y[1] + 4*S[3]*a[0]*b[1]*c[2]*x[0]*y[0] + 2*S[3]*a[0]*b[1]*c[2]*x[0]*y[1] + 2*S[3]*a[0]*b[1]*c[2]*x[1]*y[0] + 4*S[3]*a[0]*b[1]*c[2]*x[1]*y[1] - 4*S[3]*a[0]*b[2]*c[1]*x[0]*y[0] - 2*S[3]*a[0]*b[2]*c[1]*x[0]*y[1] - 2*S[3]*a[0]*b[2]*c[1]*x[1]*y[0] - 4*S[3]*a[0]*b[2]*c[1]*x[1]*y[1] + 4*S[3]*a[1]*b[0]*c[2]*x[0]*y[0] + 2*S[3]*a[1]*b[0]*c[2]*x[0]*y[1] + 2*S[3]*a[1]*b[0]*c[2]*x[1]*y[0] + 4*S[3]*a[1]*b[0]*c[2]*x[1]*y[1] + 4*S[3]*a[1]*c[0]*c[2]*y[0]*y[0] + 4*S[3]*a[1]*c[0]*c[2]*y[0]*y[1] + 4*S[3]*a[1]*c[0]*c[2]*y[1]*y[1] - 4*S[3]*a[2]*b[0]*c[1]*x[0]*y[0] - 2*S[3]*a[2]*b[0]*c[1]*x[0]*y[1] - 2*S[3]*a[2]*b[0]*c[1]*x[1]*y[0] - 4*S[3]*a[2]*b[0]*c[1]*x[1]*y[1] - 4*S[3]*a[2]*c[0]*c[1]*y[0]*y[0] - 4*S[3]*a[2]*c[0]*c[1]*y[0]*y[1] - 4*S[3]*a[2]*c[0]*c[1]*y[1]*y[1] + 3*S[3]*b[0]*b[1]*c[2]*x[0]*x[0]*y[0] + S[3]*b[0]*b[1]*c[2]*x[0]*x[0]*y[1] + 2*S[3]*b[0]*b[1]*c[2]*x[0]*x[1]*y[0] + 2*S[3]*b[0]*b[1]*c[2]*x[0]*x[1]*y[1] + S[3]*b[0]*b[1]*c[2]*x[1]*x[1]*y[0] + 3*S[3]*b[0]*b[1]*c[2]*x[1]*x[1]*y[1] - 3*S[3]*b[0]*b[2]*c[1]*x[0]*x[0]*y[0] - S[3]*b[0]*b[2]*c[1]*x[0]*x[0]*y[1] - 2*S[3]*b[0]*b[2]*c[1]*x[0]*x[1]*y[0] - 2*S[3]*b[0]*b[2]*c[1]*x[0]*x[1]*y[1] - S[3]*b[0]*b[2]*c[1]*x[1]*x[1]*y[0] - 3*S[3]*b[0]*b[2]*c[1]*x[1]*x[1]*y[1] + 3*S[3]*b[1]*c[0]*c[2]*x[0]*y[0]*y[0] + 2*S[3]*b[1]*c[0]*c[2]*x[0]*y[0]*y[1] + S[3]*b[1]*c[0]*c[2]*x[0]*y[1]*y[1] + S[3]*b[1]*c[0]*c[2]*x[1]*y[0]*y[0] + 2*S[3]*b[1]*c[0]*c[2]*x[1]*y[0]*y[1] + 3*S[3]*b[1]*c[0]*c[2]*x[1]*y[1]*y[1] - 3*S[3]*b[2]*c[0]*c[1]*x[0]*y[0]*y[0] - 2*S[3]*b[2]*c[0]*c[1]*x[0]*y[0]*y[1] - S[3]*b[2]*c[0]*c[1]*x[0]*y[1]*y[1] - S[3]*b[2]*c[0]*c[1]*x[1]*y[0]*y[0] - 2*S[3]*b[2]*c[0]*c[1]*x[1]*y[0]*y[1] - 3*S[3]*b[2]*c[0]*c[1]*x[1]*y[1]*y[1])/(96*(delta*delta))
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*S[0]*a[1]*x[0] + 3*S[0]*a[1]*x[1] + 2*S[0]*b[1]*x[0]*x[0] + 2*S[0]*b[1]*x[0]*x[1] + 2*S[0]*b[1]*x[1]*x[1] + 2*S[0]*c[1]*x[0]*y[0] + S[0]*c[1]*x[0]*y[1] + S[0]*c[1]*x[1]*y[0] + 2*S[0]*c[1]*x[1]*y[1] + 3*S[1]*a[1]*y[0] + 3*S[1]*a[1]*y[1] + 2*S[1]*b[1]*x[0]*y[0] + S[1]*b[1]*x[0]*y[1] + S[1]*b[1]*x[1]*y[0] + 2*S[1]*b[1]*x[1]*y[1] + 2*S[1]*c[1]*y[0]*y[0] + 2*S[1]*c[1]*y[0]*y[1] + 2*S[1]*c[1]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*S[2]*a[1]*x[0] + 3*S[2]*a[1]*x[1] + 2*S[2]*b[1]*x[0]*x[0] + 2*S[2]*b[1]*x[0]*x[1] + 2*S[2]*b[1]*x[1]*x[1] + 2*S[2]*c[1]*x[0]*y[0] + S[2]*c[1]*x[0]*y[1] + S[2]*c[1]*x[1]*y[0] + 2*S[2]*c[1]*x[1]*y[1] + 3*S[3]*a[1]*y[0] + 3*S[3]*a[1]*y[1] + 2*S[3]*b[1]*x[0]*y[0] + S[3]*b[1]*x[0]*y[1] + S[3]*b[1]*x[1]*y[0] + 2*S[3]*b[1]*x[1]*y[1] + 2*S[3]*c[1]*y[0]*y[0] + 2*S[3]*c[1]*y[0]*y[1] + 2*S[3]*c[1]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(-6*S[0]*a[0]*a[1]*b[2]*x[0] - 6*S[0]*a[0]*a[1]*b[2]*x[1] - 4*S[0]*a[0]*b[1]*b[2]*x[0]*x[0] - 4*S[0]*a[0]*b[1]*b[2]*x[0]*x[1] - 4*S[0]*a[0]*b[1]*b[2]*x[1]*x[1] - 4*S[0]*a[0]*b[2]*c[1]*x[0]*y[0] - 2*S[0]*a[0]*b[2]*c[1]*x[0]*y[1] - 2*S[0]*a[0]*b[2]*c[1]*x[1]*y[0] - 4*S[0]*a[0]*b[2]*c[1]*x[1]*y[1] + 6*S[0]*a[1]*a[2]*b[0]*x[0] + 6*S[0]*a[1]*a[2]*b[0]*x[1] + 4*S[0]*a[1]*b[0]*c[2]*x[0]*y[0] + 2*S[0]*a[1]*b[0]*c[2]*x[0]*y[1] + 2*S[0]*a[1]*b[0]*c[2]*x[1]*y[0] + 4*S[0]*a[1]*b[0]*c[2]*x[1]*y[1] - 4*S[0]*a[1]*b[2]*c[0]*x[0]*y[0] - 2*S[0]*a[1]*b[2]*c[0]*x[0]*y[1] - 2*S[0]*a[1]*b[2]*c[0]*x[1]*y[0] - 4*S[0]*a[1]*b[2]*c[0]*x[1]*y[1] + 4*S[0]*a[2]*b[0]*b[1]*x[0]*x[0] + 4*S[0]*a[2]*b[0]*b[1]*x[0]*x[1] + 4*S[0]*a[2]*b[0]*b[1]*x[1]*x[1] + 4*S[0]*a[2]*b[0]*c[1]*x[0]*y[0] + 2*S[0]*a[2]*b[0]*c[1]*x[0]*y[1] + 2*S[0]*a[2]*b[0]*c[1]*x[1]*y[0] + 4*S[0]*a[2]*b[0]*c[1]*x[1]*y[1] + 3*S[0]*b[0]*b[1]*c[2]*x[0]*x[0]*y[0] + S[0]*b[0]*b[1]*c[2]*x[0]*x[0]*y[1] + 2*S[0]*b[0]*b[1]*c[2]*x[0]*x[1]*y[0] + 2*S[0]*b[0]*b[1]*c[2]*x[0]*x[1]*y[1] + S[0]*b[0]*b[1]*c[2]*x[1]*x[1]*y[0] + 3*S[0]*b[0]*b[1]*c[2]*x[1]*x[1]*y[1]+ 3*S[0]*b[0]*c[1]*c[2]*x[0]*y[0]*y[0] + 2*S[0]*b[0]*c[1]*c[2]*x[0]*y[0]*y[1] + S[0]*b[0]*c[1]*c[2]*x[0]*y[1]*y[1] + S[0]*b[0]*c[1]*c[2]*x[1]*y[0]*y[0] + 2*S[0]*b[0]*c[1]*c[2]*x[1]*y[0]*y[1] + 3*S[0]*b[0]*c[1]*c[2]*x[1]*y[1]*y[1] - 3*S[0]*b[1]*b[2]*c[0]*x[0]*x[0]*y[0] - S[0]*b[1]*b[2]*c[0]*x[0]*x[0]*y[1] - 2*S[0]*b[1]*b[2]*c[0]*x[0]*x[1]*y[0] - 2*S[0]*b[1]*b[2]*c[0]*x[0]*x[1]*y[1] - S[0]*b[1]*b[2]*c[0]*x[1]*x[1]*y[0] - 3*S[0]*b[1]*b[2]*c[0]*x[1]*x[1]*y[1] - 3*S[0]*b[2]*c[0]*c[1]*x[0]*y[0]*y[0] - 2*S[0]*b[2]*c[0]*c[1]*x[0]*y[0]*y[1] - S[0]*b[2]*c[0]*c[1]*x[0]*y[1]*y[1] - S[0]*b[2]*c[0]*c[1]*x[1]*y[0]*y[0] - 2*S[0]*b[2]*c[0]*c[1]*x[1]*y[0]*y[1] - 3*S[0]*b[2]*c[0]*c[1]*x[1]*y[1]*y[1] - 6*S[1]*a[0]*a[1]*b[2]*y[0] - 6*S[1]*a[0]*a[1]*b[2]*y[1] - 4*S[1]*a[0]*b[1]*b[2]*x[0]*y[0] - 2*S[1]*a[0]*b[1]*b[2]*x[0]*y[1] - 2*S[1]*a[0]*b[1]*b[2]*x[1]*y[0] - 4*S[1]*a[0]*b[1]*b[2]*x[1]*y[1] - 4*S[1]*a[0]*b[2]*c[1]*y[0]*y[0] - 4*S[1]*a[0]*b[2]*c[1]*y[0]*y[1] - 4*S[1]*a[0]*b[2]*c[1]*y[1]*y[1] + 6*S[1]*a[1]*a[2]*b[0]*y[0] + 6*S[1]*a[1]*a[2]*b[0]*y[1] + 4*S[1]*a[1]*b[0]*c[2]*y[0]*y[0] + 4*S[1]*a[1]*b[0]*c[2]*y[0]*y[1] + 4*S[1]*a[1]*b[0]*c[2]*y[1]*y[1] - 4*S[1]*a[1]*b[2]*c[0]*y[0]*y[0]- 4*S[1]*a[1]*b[2]*c[0]*y[0]*y[1] - 4*S[1]*a[1]*b[2]*c[0]*y[1]*y[1] + 4*S[1]*a[2]*b[0]*b[1]*x[0]*y[0] + 2*S[1]*a[2]*b[0]*b[1]*x[0]*y[1] + 2*S[1]*a[2]*b[0]*b[1]*x[1]*y[0] + 4*S[1]*a[2]*b[0]*b[1]*x[1]*y[1] + 4*S[1]*a[2]*b[0]*c[1]*y[0]*y[0] + 4*S[1]*a[2]*b[0]*c[1]*y[0]*y[1] + 4*S[1]*a[2]*b[0]*c[1]*y[1]*y[1] + 3*S[1]*b[0]*b[1]*c[2]*x[0]*y[0]*y[0] + 2*S[1]*b[0]*b[1]*c[2]*x[0]*y[0]*y[1] + S[1]*b[0]*b[1]*c[2]*x[0]*y[1]*y[1] + S[1]*b[0]*b[1]*c[2]*x[1]*y[0]*y[0] + 2*S[1]*b[0]*b[1]*c[2]*x[1]*y[0]*y[1] + 3*S[1]*b[0]*b[1]*c[2]*x[1]*y[1]*y[1] + 3*S[1]*b[0]*c[1]*c[2]*y[0]*y[0]*y[0] + 3*S[1]*b[0]*c[1]*c[2]*y[0]*y[0]*y[1] + 3*S[1]*b[0]*c[1]*c[2]*y[0]*y[1]*y[1] + 3*S[1]*b[0]*c[1]*c[2]*y[1]*y[1]*y[1] - 3*S[1]*b[1]*b[2]*c[0]*x[0]*y[0]*y[0] - 2*S[1]*b[1]*b[2]*c[0]*x[0]*y[0]*y[1] - S[1]*b[1]*b[2]*c[0]*x[0]*y[1]*y[1] - S[1]*b[1]*b[2]*c[0]*x[1]*y[0]*y[0] - 2*S[1]*b[1]*b[2]*c[0]*x[1]*y[0]*y[1] - 3*S[1]*b[1]*b[2]*c[0]*x[1]*y[1]*y[1] - 3*S[1]*b[2]*c[0]*c[1]*y[0]*y[0]*y[0] - 3*S[1]*b[2]*c[0]*c[1]*y[0]*y[0]*y[1] - 3*S[1]*b[2]*c[0]*c[1]*y[0]*y[1]*y[1] - 3*S[1]*b[2]*c[0]*c[1]*y[1]*y[1]*y[1] - 6*S[2]*a[0]*a[1]*c[2]*x[0] - 6*S[2]*a[0]*a[1]*c[2]*x[1] - 4*S[2]*a[0]*b[1]*c[2]*x[0]*x[0] - 4*S[2]*a[0]*b[1]*c[2]*x[0]*x[1] - 4*S[2]*a[0]*b[1]*c[2]*x[1]*x[1] - 4*S[2]*a[0]*c[1]*c[2]*x[0]*y[0] - 2*S[2]*a[0]*c[1]*c[2]*x[0]*y[1] - 2*S[2]*a[0]*c[1]*c[2]*x[1]*y[0] - 4*S[2]*a[0]*c[1]*c[2]*x[1]*y[1] + 6*S[2]*a[1]*a[2]*c[0]*x[0] + 6*S[2]*a[1]*a[2]*c[0]*x[1] - 4*S[2]*a[1]*b[0]*c[2]*x[0]*x[0] - 4*S[2]*a[1]*b[0]*c[2]*x[0]*x[1] - 4*S[2]*a[1]*b[0]*c[2]*x[1]*x[1] + 4*S[2]*a[1]*b[2]*c[0]*x[0]*x[0] + 4*S[2]*a[1]*b[2]*c[0]*x[0]*x[1] + 4*S[2]*a[1]*b[2]*c[0]*x[1]*x[1] + 4*S[2]*a[2]*b[1]*c[0]*x[0]*x[0] + 4*S[2]*a[2]*b[1]*c[0]*x[0]*x[1] + 4*S[2]*a[2]*b[1]*c[0]*x[1]*x[1] + 4*S[2]*a[2]*c[0]*c[1]*x[0]*y[0] + 2*S[2]*a[2]*c[0]*c[1]*x[0]*y[1] + 2*S[2]*a[2]*c[0]*c[1]*x[1]*y[0] + 4*S[2]*a[2]*c[0]*c[1]*x[1]*y[1] - 3*S[2]*b[0]*b[1]*c[2]*x[0]*x[0]*x[0] - 3*S[2]*b[0]*b[1]*c[2]*x[0]*x[0]*x[1] - 3*S[2]*b[0]*b[1]*c[2]*x[0]*x[1]*x[1] - 3*S[2]*b[0]*b[1]*c[2]*x[1]*x[1]*x[1] - 3*S[2]*b[0]*c[1]*c[2]*x[0]*x[0]*y[0] - S[2]*b[0]*c[1]*c[2]*x[0]*x[0]*y[1] - 2*S[2]*b[0]*c[1]*c[2]*x[0]*x[1]*y[0] - 2*S[2]*b[0]*c[1]*c[2]*x[0]*x[1]*y[1] - S[2]*b[0]*c[1]*c[2]*x[1]*x[1]*y[0] - 3*S[2]*b[0]*c[1]*c[2]*x[1]*x[1]*y[1] + 3*S[2]*b[1]*b[2]*c[0]*x[0]*x[0]*x[0] + 3*S[2]*b[1]*b[2]*c[0]*x[0]*x[0]*x[1] + 3*S[2]*b[1]*b[2]*c[0]*x[0]*x[1]*x[1] + 3*S[2]*b[1]*b[2]*c[0]*x[1]*x[1]*x[1] + 3*S[2]*b[2]*c[0]*c[1]*x[0]*x[0]*y[0] + S[2]*b[2]*c[0]*c[1]*x[0]*x[0]*y[1] + 2*S[2]*b[2]*c[0]*c[1]*x[0]*x[1]*y[0] + 2*S[2]*b[2]*c[0]*c[1]*x[0]*x[1]*y[1] + S[2]*b[2]*c[0]*c[1]*x[1]*x[1]*y[0] + 3*S[2]*b[2]*c[0]*c[1]*x[1]*x[1]*y[1] - 6*S[3]*a[0]*a[1]*c[2]*y[0] - 6*S[3]*a[0]*a[1]*c[2]*y[1] - 4*S[3]*a[0]*b[1]*c[2]*x[0]*y[0] - 2*S[3]*a[0]*b[1]*c[2]*x[0]*y[1] - 2*S[3]*a[0]*b[1]*c[2]*x[1]*y[0] - 4*S[3]*a[0]*b[1]*c[2]*x[1]*y[1] - 4*S[3]*a[0]*c[1]*c[2]*y[0]*y[0] - 4*S[3]*a[0]*c[1]*c[2]*y[0]*y[1] - 4*S[3]*a[0]*c[1]*c[2]*y[1]*y[1] + 6*S[3]*a[1]*a[2]*c[0]*y[0] + 6*S[3]*a[1]*a[2]*c[0]*y[1] - 4*S[3]*a[1]*b[0]*c[2]*x[0]*y[0] - 2*S[3]*a[1]*b[0]*c[2]*x[0]*y[1]- 2*S[3]*a[1]*b[0]*c[2]*x[1]*y[0] - 4*S[3]*a[1]*b[0]*c[2]*x[1]*y[1] + 4*S[3]*a[1]*b[2]*c[0]*x[0]*y[0] + 2*S[3]*a[1]*b[2]*c[0]*x[0]*y[1] + 2*S[3]*a[1]*b[2]*c[0]*x[1]*y[0] + 4*S[3]*a[1]*b[2]*c[0]*x[1]*y[1] + 4*S[3]*a[2]*b[1]*c[0]*x[0]*y[0] + 2*S[3]*a[2]*b[1]*c[0]*x[0]*y[1] + 2*S[3]*a[2]*b[1]*c[0]*x[1]*y[0] + 4*S[3]*a[2]*b[1]*c[0]*x[1]*y[1] + 4*S[3]*a[2]*c[0]*c[1]*y[0]*y[0] + 4*S[3]*a[2]*c[0]*c[1]*y[0]*y[1] + 4*S[3]*a[2]*c[0]*c[1]*y[1]*y[1] - 3*S[3]*b[0]*b[1]*c[2]*x[0]*x[0]*y[0] - S[3]*b[0]*b[1]*c[2]*x[0]*x[0]*y[1] - 2*S[3]*b[0]*b[1]*c[2]*x[0]*x[1]*y[0] - 2*S[3]*b[0]*b[1]*c[2]*x[0]*x[1]*y[1] - S[3]*b[0]*b[1]*c[2]*x[1]*x[1]*y[0] - 3*S[3]*b[0]*b[1]*c[2]*x[1]*x[1]*y[1] - 3*S[3]*b[0]*c[1]*c[2]*x[0]*y[0]*y[0] - 2*S[3]*b[0]*c[1]*c[2]*x[0]*y[0]*y[1] - S[3]*b[0]*c[1]*c[2]*x[0]*y[1]*y[1] - S[3]*b[0]*c[1]*c[2]*x[1]*y[0]*y[0] - 2*S[3]*b[0]*c[1]*c[2]*x[1]*y[0]*y[1] - 3*S[3]*b[0]*c[1]*c[2]*x[1]*y[1]*y[1] + 3*S[3]*b[1]*b[2]*c[0]*x[0]*x[0]*y[0] + S[3]*b[1]*b[2]*c[0]*x[0]*x[0]*y[1] + 2*S[3]*b[1]*b[2]*c[0]*x[0]*x[1]*y[0] + 2*S[3]*b[1]*b[2]*c[0]*x[0]*x[1]*y[1] + S[3]*b[1]*b[2]*c[0]*x[1]*x[1]*y[0] + 3*S[3]*b[1]*b[2]*c[0]*x[1]*x[1]*y[1] + 3*S[3]*b[2]*c[0]*c[1]*x[0]*y[0]*y[0] + 2*S[3]*b[2]*c[0]*c[1]*x[0]*y[0]*y[1] + S[3]*b[2]*c[0]*c[1]*x[0]*y[1]*y[1] + S[3]*b[2]*c[0]*c[1]*x[1]*y[0]*y[0] + 2*S[3]*b[2]*c[0]*c[1]*x[1]*y[0]*y[1] + 3*S[3]*b[2]*c[0]*c[1]*x[1]*y[1]*y[1])/(96*(delta*delta))
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*S[0]*a[2]*x[0] + 3*S[0]*a[2]*x[1] + 2*S[0]*b[2]*x[0]*x[0] + 2*S[0]*b[2]*x[0]*x[1] + 2*S[0]*b[2]*x[1]*x[1] + 2*S[0]*c[2]*x[0]*y[0] + S[0]*c[2]*x[0]*y[1] + S[0]*c[2]*x[1]*y[0] + 2*S[0]*c[2]*x[1]*y[1] + 3*S[1]*a[2]*y[0] + 3*S[1]*a[2]*y[1] + 2*S[1]*b[2]*x[0]*y[0] + S[1]*b[2]*x[0]*y[1] + S[1]*b[2]*x[1]*y[0] + 2*S[1]*b[2]*x[1]*y[1] + 2*S[1]*c[2]*y[0]*y[0] + 2*S[1]*c[2]*y[0]*y[1] + 2*S[1]*c[2]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(3*S[2]*a[2]*x[0] + 3*S[2]*a[2]*x[1] + 2*S[2]*b[2]*x[0]*x[0] + 2*S[2]*b[2]*x[0]*x[1] + 2*S[2]*b[2]*x[1]*x[1] + 2*S[2]*c[2]*x[0]*y[0] + S[2]*c[2]*x[0]*y[1] + S[2]*c[2]*x[1]*y[0] + 2*S[2]*c[2]*x[1]*y[1] + 3*S[3]*a[2]*y[0] + 3*S[3]*a[2]*y[1] + 2*S[3]*b[2]*x[0]*y[0] + S[3]*b[2]*x[0]*y[1] + S[3]*b[2]*x[1]*y[0] + 2*S[3]*b[2]*x[1]*y[1] + 2*S[3]*c[2]*y[0]*y[0] + 2*S[3]*c[2]*y[0]*y[1] + 2*S[3]*c[2]*y[1]*y[1])/(12*delta)
    ,
    t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*S[0]*a[0]*a[2]*b[1]*x[0] + 6*S[0]*a[0]*a[2]*b[1]*x[1] + 4*S[0]*a[0]*b[1]*b[2]*x[0]*x[0] + 4*S[0]*a[0]*b[1]*b[2]*x[0]*x[1] + 4*S[0]*a[0]*b[1]*b[2]*x[1]*x[1] + 4*S[0]*a[0]*b[1]*c[2]*x[0]*y[0] + 2*S[0]*a[0]*b[1]*c[2]*x[0]*y[1] + 2*S[0]*a[0]*b[1]*c[2]*x[1]*y[0] + 4*S[0]*a[0]*b[1]*c[2]*x[1]*y[1] - 6*S[0]*a[1]*a[2]*b[0]*x[0] - 6*S[0]*a[1]*a[2]*b[0]*x[1] - 4*S[0]*a[1]*b[0]*b[2]*x[0]*x[0] - 4*S[0]*a[1]*b[0]*b[2]*x[0]*x[1] - 4*S[0]*a[1]*b[0]*b[2]*x[1]*x[1] - 4*S[0]*a[1]*b[0]*c[2]*x[0]*y[0] - 2*S[0]*a[1]*b[0]*c[2]*x[0]*y[1] - 2*S[0]*a[1]*b[0]*c[2]*x[1]*y[0] - 4*S[0]*a[1]*b[0]*c[2]*x[1]*y[1] - 4*S[0]*a[2]*b[0]*c[1]*x[0]*y[0] - 2*S[0]*a[2]*b[0]*c[1]*x[0]*y[1] - 2*S[0]*a[2]*b[0]*c[1]*x[1]*y[0] - 4*S[0]*a[2]*b[0]*c[1]*x[1]*y[1] + 4*S[0]*a[2]*b[1]*c[0]*x[0]*y[0] + 2*S[0]*a[2]*b[1]*c[0]*x[0]*y[1] + 2*S[0]*a[2]*b[1]*c[0]*x[1]*y[0] + 4*S[0]*a[2]*b[1]*c[0]*x[1]*y[1] - 3*S[0]*b[0]*b[2]*c[1]*x[0]*x[0]*y[0] - S[0]*b[0]*b[2]*c[1]*x[0]*x[0]*y[1] - 2*S[0]*b[0]*b[2]*c[1]*x[0]*x[1]*y[0] - 2*S[0]*b[0]*b[2]*c[1]*x[0]*x[1]*y[1] - S[0]*b[0]*b[2]*c[1]*x[1]*x[1]*y[0] - 3*S[0]*b[0]*b[2]*c[1]*x[1]*x[1]*y[1] - 3*S[0]*b[0]*c[1]*c[2]*x[0]*y[0]*y[0] - 2*S[0]*b[0]*c[1]*c[2]*x[0]*y[0]*y[1] - S[0]*b[0]*c[1]*c[2]*x[0]*y[1]*y[1] - S[0]*b[0]*c[1]*c[2]*x[1]*y[0]*y[0] - 2*S[0]*b[0]*c[1]*c[2]*x[1]*y[0]*y[1] - 3*S[0]*b[0]*c[1]*c[2]*x[1]*y[1]*y[1] + 3*S[0]*b[1]*b[2]*c[0]*x[0]*x[0]*y[0] + S[0]*b[1]*b[2]*c[0]*x[0]*x[0]*y[1] + 2*S[0]*b[1]*b[2]*c[0]*x[0]*x[1]*y[0] + 2*S[0]*b[1]*b[2]*c[0]*x[0]*x[1]*y[1] + S[0]*b[1]*b[2]*c[0]*x[1]*x[1]*y[0] + 3*S[0]*b[1]*b[2]*c[0]*x[1]*x[1]*y[1] + 3*S[0]*b[1]*c[0]*c[2]*x[0]*y[0]*y[0] + 2*S[0]*b[1]*c[0]*c[2]*x[0]*y[0]*y[1] + S[0]*b[1]*c[0]*c[2]*x[0]*y[1]*y[1] + S[0]*b[1]*c[0]*c[2]*x[1]*y[0]*y[0] + 2*S[0]*b[1]*c[0]*c[2]*x[1]*y[0]*y[1] + 3*S[0]*b[1]*c[0]*c[2]*x[1]*y[1]*y[1] + 6*S[1]*a[0]*a[2]*b[1]*y[0] + 6*S[1]*a[0]*a[2]*b[1]*y[1] + 4*S[1]*a[0]*b[1]*b[2]*x[0]*y[0] + 2*S[1]*a[0]*b[1]*b[2]*x[0]*y[1] + 2*S[1]*a[0]*b[1]*b[2]*x[1]*y[0] + 4*S[1]*a[0]*b[1]*b[2]*x[1]*y[1] + 4*S[1]*a[0]*b[1]*c[2]*y[0]*y[0] + 4*S[1]*a[0]*b[1]*c[2]*y[0]*y[1] + 4*S[1]*a[0]*b[1]*c[2]*y[1]*y[1] - 6*S[1]*a[1]*a[2]*b[0]*y[0] - 6*S[1]*a[1]*a[2]*b[0]*y[1] - 4*S[1]*a[1]*b[0]*b[2]*x[0]*y[0] - 2*S[1]*a[1]*b[0]*b[2]*x[0]*y[1] - 2*S[1]*a[1]*b[0]*b[2]*x[1]*y[0] - 4*S[1]*a[1]*b[0]*b[2]*x[1]*y[1] - 4*S[1]*a[1]*b[0]*c[2]*y[0]*y[0] - 4*S[1]*a[1]*b[0]*c[2]*y[0]*y[1] - 4*S[1]*a[1]*b[0]*c[2]*y[1]*y[1] - 4*S[1]*a[2]*b[0]*c[1]*y[0]*y[0] - 4*S[1]*a[2]*b[0]*c[1]*y[0]*y[1] - 4*S[1]*a[2]*b[0]*c[1]*y[1]*y[1] + 4*S[1]*a[2]*b[1]*c[0]*y[0]*y[0] + 4*S[1]*a[2]*b[1]*c[0]*y[0]*y[1] + 4*S[1]*a[2]*b[1]*c[0]*y[1]*y[1] - 3*S[1]*b[0]*b[2]*c[1]*x[0]*y[0]*y[0] - 2*S[1]*b[0]*b[2]*c[1]*x[0]*y[0]*y[1] - S[1]*b[0]*b[2]*c[1]*x[0]*y[1]*y[1] - S[1]*b[0]*b[2]*c[1]*x[1]*y[0]*y[0] - 2*S[1]*b[0]*b[2]*c[1]*x[1]*y[0]*y[1] - 3*S[1]*b[0]*b[2]*c[1]*x[1]*y[1]*y[1] - 3*S[1]*b[0]*c[1]*c[2]*y[0]*y[0]*y[0] - 3*S[1]*b[0]*c[1]*c[2]*y[0]*y[0]*y[1] - 3*S[1]*b[0]*c[1]*c[2]*y[0]*y[1]*y[1] - 3*S[1]*b[0]*c[1]*c[2]*y[1]*y[1]*y[1] + 3*S[1]*b[1]*b[2]*c[0]*x[0]*y[0]*y[0] + 2*S[1]*b[1]*b[2]*c[0]*x[0]*y[0]*y[1] + S[1]*b[1]*b[2]*c[0]*x[0]*y[1]*y[1] + S[1]*b[1]*b[2]*c[0]*x[1]*y[0]*y[0] + 2*S[1]*b[1]*b[2]*c[0]*x[1]*y[0]*y[1] + 3*S[1]*b[1]*b[2]*c[0]*x[1]*y[1]*y[1] + 3*S[1]*b[1]*c[0]*c[2]*y[0]*y[0]*y[0] + 3*S[1]*b[1]*c[0]*c[2]*y[0]*y[0]*y[1] + 3*S[1]*b[1]*c[0]*c[2]*y[0]*y[1]*y[1] + 3*S[1]*b[1]*c[0]*c[2]*y[1]*y[1]*y[1] + 6*S[2]*a[0]*a[2]*c[1]*x[0] + 6*S[2]*a[0]*a[2]*c[1]*x[1] + 4*S[2]*a[0]*b[2]*c[1]*x[0]*x[0] + 4*S[2]*a[0]*b[2]*c[1]*x[0]*x[1] + 4*S[2]*a[0]*b[2]*c[1]*x[1]*x[1] + 4*S[2]*a[0]*c[1]*c[2]*x[0]*y[0] + 2*S[2]*a[0]*c[1]*c[2]*x[0]*y[1] + 2*S[2]*a[0]*c[1]*c[2]*x[1]*y[0] + 4*S[2]*a[0]*c[1]*c[2]*x[1]*y[1] - 6*S[2]*a[1]*a[2]*c[0]*x[0] - 6*S[2]*a[1]*a[2]*c[0]*x[1] - 4*S[2]*a[1]*b[2]*c[0]*x[0]*x[0] - 4*S[2]*a[1]*b[2]*c[0]*x[0]*x[1] - 4*S[2]*a[1]*b[2]*c[0]*x[1]*x[1] - 4*S[2]*a[1]*c[0]*c[2]*x[0]*y[0] - 2*S[2]*a[1]*c[0]*c[2]*x[0]*y[1] - 2*S[2]*a[1]*c[0]*c[2]*x[1]*y[0] - 4*S[2]*a[1]*c[0]*c[2]*x[1]*y[1] + 4*S[2]*a[2]*b[0]*c[1]*x[0]*x[0] + 4*S[2]*a[2]*b[0]*c[1]*x[0]*x[1] + 4*S[2]*a[2]*b[0]*c[1]*x[1]*x[1] - 4*S[2]*a[2]*b[1]*c[0]*x[0]*x[0] - 4*S[2]*a[2]*b[1]*c[0]*x[0]*x[1] - 4*S[2]*a[2]*b[1]*c[0]*x[1]*x[1] + 3*S[2]*b[0]*b[2]*c[1]*x[0]*x[0]*x[0] + 3*S[2]*b[0]*b[2]*c[1]*x[0]*x[0]*x[1] + 3*S[2]*b[0]*b[2]*c[1]*x[0]*x[1]*x[1] + 3*S[2]*b[0]*b[2]*c[1]*x[1]*x[1]*x[1] + 3*S[2]*b[0]*c[1]*c[2]*x[0]*x[0]*y[0] + S[2]*b[0]*c[1]*c[2]*x[0]*x[0]*y[1] + 2*S[2]*b[0]*c[1]*c[2]*x[0]*x[1]*y[0] + 2*S[2]*b[0]*c[1]*c[2]*x[0]*x[1]*y[1] + S[2]*b[0]*c[1]*c[2]*x[1]*x[1]*y[0] + 3*S[2]*b[0]*c[1]*c[2]*x[1]*x[1]*y[1] - 3*S[2]*b[1]*b[2]*c[0]*x[0]*x[0]*x[0] - 3*S[2]*b[1]*b[2]*c[0]*x[0]*x[0]*x[1] - 3*S[2]*b[1]*b[2]*c[0]*x[0]*x[1]*x[1] - 3*S[2]*b[1]*b[2]*c[0]*x[1]*x[1]*x[1] - 3*S[2]*b[1]*c[0]*c[2]*x[0]*x[0]*y[0] - S[2]*b[1]*c[0]*c[2]*x[0]*x[0]*y[1] - 2*S[2]*b[1]*c[0]*c[2]*x[0]*x[1]*y[0] - 2*S[2]*b[1]*c[0]*c[2]*x[0]*x[1]*y[1] - S[2]*b[1]*c[0]*c[2]*x[1]*x[1]*y[0] - 3*S[2]*b[1]*c[0]*c[2]*x[1]*x[1]*y[1] + 6*S[3]*a[0]*a[2]*c[1]*y[0] + 6*S[3]*a[0]*a[2]*c[1]*y[1] + 4*S[3]*a[0]*b[2]*c[1]*x[0]*y[0] + 2*S[3]*a[0]*b[2]*c[1]*x[0]*y[1] + 2*S[3]*a[0]*b[2]*c[1]*x[1]*y[0] + 4*S[3]*a[0]*b[2]*c[1]*x[1]*y[1] + 4*S[3]*a[0]*c[1]*c[2]*y[0]*y[0] + 4*S[3]*a[0]*c[1]*c[2]*y[0]*y[1] + 4*S[3]*a[0]*c[1]*c[2]*y[1]*y[1] - 6*S[3]*a[1]*a[2]*c[0]*y[0] - 6*S[3]*a[1]*a[2]*c[0]*y[1] - 4*S[3]*a[1]*b[2]*c[0]*x[0]*y[0] - 2*S[3]*a[1]*b[2]*c[0]*x[0]*y[1] - 2*S[3]*a[1]*b[2]*c[0]*x[1]*y[0] - 4*S[3]*a[1]*b[2]*c[0]*x[1]*y[1] - 4*S[3]*a[1]*c[0]*c[2]*y[0]*y[0] - 4*S[3]*a[1]*c[0]*c[2]*y[0]*y[1] - 4*S[3]*a[1]*c[0]*c[2]*y[1]*y[1] + 4*S[3]*a[2]*b[0]*c[1]*x[0]*y[0] + 2*S[3]*a[2]*b[0]*c[1]*x[0]*y[1] + 2*S[3]*a[2]*b[0]*c[1]*x[1]*y[0] + 4*S[3]*a[2]*b[0]*c[1]*x[1]*y[1] - 4*S[3]*a[2]*b[1]*c[0]*x[0]*y[0] - 2*S[3]*a[2]*b[1]*c[0]*x[0]*y[1] - 2*S[3]*a[2]*b[1]*c[0]*x[1]*y[0] - 4*S[3]*a[2]*b[1]*c[0]*x[1]*y[1] + 3*S[3]*b[0]*b[2]*c[1]*x[0]*x[0]*y[0] + S[3]*b[0]*b[2]*c[1]*x[0]*x[0]*y[1] + 2*S[3]*b[0]*b[2]*c[1]*x[0]*x[1]*y[0] + 2*S[3]*b[0]*b[2]*c[1]*x[0]*x[1]*y[1] + S[3]*b[0]*b[2]*c[1]*x[1]*x[1]*y[0] + 3*S[3]*b[0]*b[2]*c[1]*x[1]*x[1]*y[1] + 3*S[3]*b[0]*c[1]*c[2]*x[0]*y[0]*y[0] + 2*S[3]*b[0]*c[1]*c[2]*x[0]*y[0]*y[1] + S[3]*b[0]*c[1]*c[2]*x[0]*y[1]*y[1] + S[3]*b[0]*c[1]*c[2]*x[1]*y[0]*y[0] + 2*S[3]*b[0]*c[1]*c[2]*x[1]*y[0]*y[1] + 3*S[3]*b[0]*c[1]*c[2]*x[1]*y[1]*y[1] - 3*S[3]*b[1]*b[2]*c[0]*x[0]*x[0]*y[0] - S[3]*b[1]*b[2]*c[0]*x[0]*x[0]*y[1] - 2*S[3]*b[1]*b[2]*c[0]*x[0]*x[1]*y[0] - 2*S[3]*b[1]*b[2]*c[0]*x[0]*x[1]*y[1] - S[3]*b[1]*b[2]*c[0]*x[1]*x[1]*y[0] - 3*S[3]*b[1]*b[2]*c[0]*x[1]*x[1]*y[1] - 3*S[3]*b[1]*c[0]*c[2]*x[0]*y[0]*y[0] - 2*S[3]*b[1]*c[0]*c[2]*x[0]*y[0]*y[1] - S[3]*b[1]*c[0]*c[2]*x[0]*y[1]*y[1] - S[3]*b[1]*c[0]*c[2]*x[1]*y[0]*y[0] - 2*S[3]*b[1]*c[0]*c[2]*x[1]*y[0]*y[1] - 3*S[3]*b[1]*c[0]*c[2]*x[1]*y[1]*y[1])/(96*(delta*delta))
    };

    return Rf;

}

Eigen::MatrixXd GT9::diffusion_1dof(const double t, const std::vector<double>& A) const{
    Eigen::MatrixXd M{{
        b[0]*(A[0]*b[0]*t/2 + A[3]*c[0]*t/2)/(2*delta) + c[0]*(A[1]*b[0]*t/2 + A[4]*c[0]*t/2)/(2*delta)
        ,
        b[1]*(A[0]*b[0]*t/2 + A[3]*c[0]*t/2)/(2*delta) + c[1]*(A[1]*b[0]*t/2 + A[4]*c[0]*t/2)/(2*delta)
        ,
        b[2]*(A[0]*b[0]*t/2 + A[3]*c[0]*t/2)/(2*delta) + c[2]*(A[1]*b[0]*t/2 + A[4]*c[0]*t/2)/(2*delta)
        },{
        b[0]*(A[0]*b[1]*t/2 + A[3]*c[1]*t/2)/(2*delta) + c[0]*(A[1]*b[1]*t/2 + A[4]*c[1]*t/2)/(2*delta)
        ,
        b[1]*(A[0]*b[1]*t/2 + A[3]*c[1]*t/2)/(2*delta) + c[1]*(A[1]*b[1]*t/2 + A[4]*c[1]*t/2)/(2*delta)
        ,
        b[2]*(A[0]*b[1]*t/2 + A[3]*c[1]*t/2)/(2*delta) + c[2]*(A[1]*b[1]*t/2 + A[4]*c[1]*t/2)/(2*delta)
        },{
        b[0]*(A[0]*b[2]*t/2 + A[3]*c[2]*t/2)/(2*delta) + c[0]*(A[1]*b[2]*t/2 + A[4]*c[2]*t/2)/(2*delta)
        ,
        b[1]*(A[0]*b[2]*t/2 + A[3]*c[2]*t/2)/(2*delta) + c[1]*(A[1]*b[2]*t/2 + A[4]*c[2]*t/2)/(2*delta)
        ,
        b[2]*(A[0]*b[2]*t/2 + A[3]*c[2]*t/2)/(2*delta) + c[2]*(A[1]*b[2]*t/2 + A[4]*c[2]*t/2)/(2*delta)
        }
    };

    return M;
}
Eigen::MatrixXd GT9::advection_1dof(const double t, const std::vector<double>& v) const{
    Eigen::MatrixXd M{{
        t*(b[0]*v[0] + c[0]*v[1])/6
        ,
        t*(b[0]*v[0] + c[0]*v[1])/6
        ,
        t*(b[0]*v[0] + c[0]*v[1])/6
        },{
        t*(b[1]*v[0] + c[1]*v[1])/6
        ,
        t*(b[1]*v[0] + c[1]*v[1])/6
        ,
        t*(b[1]*v[0] + c[1]*v[1])/6
        },{
        t*(b[2]*v[0] + c[2]*v[1])/6
        ,
        t*(b[2]*v[0] + c[2]*v[1])/6
        ,
        t*(b[2]*v[0] + c[2]*v[1])/6
        }
    };

    return M;
}
Eigen::MatrixXd GT9::absorption_1dof(const double t) const{
    Eigen::MatrixXd M{{
        delta*t/6
        ,
        delta*t/12
        ,
        delta*t/12
        },{
        delta*t/12
        ,
        delta*t/6
        ,
        delta*t/12
        },{
        delta*t/12
        ,
        delta*t/12
        ,
        delta*t/6
        }
    };

    return M;
}
Eigen::VectorXd GT9::source_1dof(const double t) const{
    Eigen::Vector<double, 3> M{
        delta*t/3
        ,
        delta*t/3
        ,
        delta*t/3
    };

    return M;
}

}
