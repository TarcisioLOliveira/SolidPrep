/*
 *   Copyright (C) 2021 Tarc√≠sio Ladeia de Oliveira.
 *
 *   This file is part of SolidPrep
 *
 *   SolidPrep is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SolidPrep is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SolidPrep.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include "element/GT9.hpp"
#include "cblas.h"
#include "logger.hpp"
#include <vector>

namespace element{

GT9::GT9(ElementShape s):
    MeshElementCommon2DTri<GT9>(s.nodes)
    {}

std::vector<double> GT9::get_k(const std::vector<double>& D, const double t) const{

    const size_t N = this->NODES_PER_ELEM;

    std::vector<gp_Pnt> p;
    for(size_t i = 0; i < N; ++i){
        const auto& n = this->nodes[i];
        p.push_back(n->point);
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    const double delta = 0.5*std::abs(deltaM.Determinant());

    std::vector<double> a, b, c;
    a.reserve(N);
    b.reserve(N);
    c.reserve(N);
    for(size_t i = 0; i < N; ++i){
        const size_t j = (i + 1) % N;
        size_t k = (i + 2) % N;

        a.push_back(p[j].X()*p[k].Y() - p[k].X()*p[j].Y());
        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }

    std::vector<double> K{
t*(D[0]*b[0]*b[0] + D[2]*b[0]*c[0] + D[6]*b[0]*c[0] + D[8]*c[0]*c[0])/(4*delta)
,
t*(D[1]*b[0]*c[0] + D[2]*b[0]*b[0] + D[7]*c[0]*c[0] + D[8]*b[0]*c[0])/(4*delta)
,
t*(-D[0]*b[0]*b[0]*b[1] + D[0]*b[0]*b[0]*b[2] - D[1]*b[0]*c[0]*c[1] + D[1]*b[0]*c[0]*c[2] - D[2]*b[0]*b[0]*c[1] + D[2]*b[0]*b[0]*c[2] - D[2]*b[0]*b[1]*c[0] + D[2]*b[0]*b[2]*c[0] - D[6]*b[0]*b[1]*c[0] + D[6]*b[0]*b[2]*c[0] - D[7]*c[0]*c[0]*c[1] + D[7]*c[0]*c[0]*c[2] - D[8]*b[0]*c[0]*c[1] + D[8]*b[0]*c[0]*c[2] - D[8]*b[1]*c[0]*c[0] + D[8]*b[2]*c[0]*c[0])/(24*delta)
,
t*(D[0]*b[0]*b[1] + D[2]*b[0]*c[1] + D[6]*b[1]*c[0] + D[8]*c[0]*c[1])/(4*delta)
,
t*(D[1]*b[0]*c[1] + D[2]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[1]*c[0])/(4*delta)
,
t*(D[0]*b[0]*b[0]*b[1] - D[0]*b[0]*b[1]*b[2] + D[1]*b[0]*c[0]*c[1] - D[1]*b[0]*c[1]*c[2] + D[2]*b[0]*b[0]*c[1] + D[2]*b[0]*b[1]*c[0] - D[2]*b[0]*b[1]*c[2] - D[2]*b[0]*b[2]*c[1] + D[6]*b[0]*b[1]*c[0] - D[6]*b[1]*b[2]*c[0] + D[7]*c[0]*c[0]*c[1] - D[7]*c[0]*c[1]*c[2] + D[8]*b[0]*c[0]*c[1] + D[8]*b[1]*c[0]*c[0] - D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[0]*b[0]*b[2] + D[2]*b[0]*c[2] + D[6]*b[2]*c[0] + D[8]*c[0]*c[2])/(4*delta)
,
t*(D[1]*b[0]*c[2] + D[2]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[2]*c[0])/(4*delta)
,
t*(-D[0]*b[0]*b[0]*b[2] + D[0]*b[0]*b[1]*b[2] - D[1]*b[0]*c[0]*c[2] + D[1]*b[0]*c[1]*c[2] - D[2]*b[0]*b[0]*c[2] + D[2]*b[0]*b[1]*c[2] - D[2]*b[0]*b[2]*c[0] + D[2]*b[0]*b[2]*c[1] - D[6]*b[0]*b[2]*c[0] + D[6]*b[1]*b[2]*c[0] - D[7]*c[0]*c[0]*c[2] + D[7]*c[0]*c[1]*c[2] - D[8]*b[0]*c[0]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[0] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[3]*b[0]*c[0] + D[5]*c[0]*c[0] + D[6]*b[0]*b[0] + D[8]*b[0]*c[0])/(4*delta)
,
t*(D[4]*c[0]*c[0] + D[5]*b[0]*c[0] + D[7]*b[0]*c[0] + D[8]*b[0]*b[0])/(4*delta)
,
t*(-D[3]*b[0]*b[1]*c[0] + D[3]*b[0]*b[2]*c[0] - D[4]*c[0]*c[0]*c[1] + D[4]*c[0]*c[0]*c[2] - D[5]*b[0]*c[0]*c[1] + D[5]*b[0]*c[0]*c[2] - D[5]*b[1]*c[0]*c[0] + D[5]*b[2]*c[0]*c[0] - D[6]*b[0]*b[0]*b[1] + D[6]*b[0]*b[0]*b[2] - D[7]*b[0]*c[0]*c[1] + D[7]*b[0]*c[0]*c[2] - D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[0]*c[2] - D[8]*b[0]*b[1]*c[0] + D[8]*b[0]*b[2]*c[0])/(24*delta)
,
t*(D[3]*b[1]*c[0] + D[5]*c[0]*c[1] + D[6]*b[0]*b[1] + D[8]*b[0]*c[1])/(4*delta)
,
t*(D[4]*c[0]*c[1] + D[5]*b[1]*c[0] + D[7]*b[0]*c[1] + D[8]*b[0]*b[1])/(4*delta)
,
t*(D[3]*b[0]*b[1]*c[0] - D[3]*b[1]*b[2]*c[0] + D[4]*c[0]*c[0]*c[1] - D[4]*c[0]*c[1]*c[2] + D[5]*b[0]*c[0]*c[1] + D[5]*b[1]*c[0]*c[0] - D[5]*b[1]*c[0]*c[2] - D[5]*b[2]*c[0]*c[1] + D[6]*b[0]*b[0]*b[1] - D[6]*b[0]*b[1]*b[2] + D[7]*b[0]*c[0]*c[1] - D[7]*b[0]*c[1]*c[2] + D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[1]*c[0] - D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(D[3]*b[2]*c[0] + D[5]*c[0]*c[2] + D[6]*b[0]*b[2] + D[8]*b[0]*c[2])/(4*delta)
,
t*(D[4]*c[0]*c[2] + D[5]*b[2]*c[0] + D[7]*b[0]*c[2] + D[8]*b[0]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[2]*c[0] + D[3]*b[1]*b[2]*c[0] - D[4]*c[0]*c[0]*c[2] + D[4]*c[0]*c[1]*c[2] - D[5]*b[0]*c[0]*c[2] + D[5]*b[1]*c[0]*c[2] - D[5]*b[2]*c[0]*c[0] + D[5]*b[2]*c[0]*c[1] - D[6]*b[0]*b[0]*b[2] + D[6]*b[0]*b[1]*b[2] - D[7]*b[0]*c[0]*c[2] + D[7]*b[0]*c[1]*c[2] - D[8]*b[0]*b[0]*c[2] + D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[0] + D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[1] + D[0]*b[0]*b[0]*b[2] - D[2]*b[0]*b[1]*c[0] + D[2]*b[0]*b[2]*c[0] - D[3]*b[0]*c[0]*c[1] + D[3]*b[0]*c[0]*c[2] - D[5]*c[0]*c[0]*c[1] + D[5]*c[0]*c[0]*c[2] - D[6]*b[0]*b[0]*c[1] + D[6]*b[0]*b[0]*c[2] - D[6]*b[0]*b[1]*c[0] + D[6]*b[0]*b[2]*c[0] - D[8]*b[0]*c[0]*c[1] + D[8]*b[0]*c[0]*c[2] - D[8]*b[1]*c[0]*c[0] + D[8]*b[2]*c[0]*c[0])/(24*delta)
,
t*(-D[1]*b[0]*b[1]*c[0] + D[1]*b[0]*b[2]*c[0] - D[2]*b[0]*b[0]*b[1] + D[2]*b[0]*b[0]*b[2] - D[4]*c[0]*c[0]*c[1] + D[4]*c[0]*c[0]*c[2] - D[5]*b[0]*c[0]*c[1] + D[5]*b[0]*c[0]*c[2] - D[7]*b[0]*c[0]*c[1] + D[7]*b[0]*c[0]*c[2] - D[7]*b[1]*c[0]*c[0] + D[7]*b[2]*c[0]*c[0] - D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[0]*c[2] - D[8]*b[0]*b[1]*c[0] + D[8]*b[0]*b[2]*c[0])/(24*delta)
,
t*(2*D[0]*b[0]*b[0]*b[1]*b[1] - 2*D[0]*b[0]*b[0]*b[1]*b[2] + 2*D[0]*b[0]*b[0]*b[2]*b[2] + 2*D[1]*b[0]*b[1]*c[0]*c[1] - D[1]*b[0]*b[1]*c[0]*c[2] - D[1]*b[0]*b[2]*c[0]*c[1] + 2*D[1]*b[0]*b[2]*c[0]*c[2] + 2*D[2]*b[0]*b[0]*b[1]*c[1] - D[2]*b[0]*b[0]*b[1]*c[2] - D[2]*b[0]*b[0]*b[2]*c[1] + 2*D[2]*b[0]*b[0]*b[2]*c[2] + 2*D[2]*b[0]*b[1]*b[1]*c[0] - 2*D[2]*b[0]*b[1]*b[2]*c[0] + 2*D[2]*b[0]*b[2]*b[2]*c[0] + 2*D[3]*b[0]*b[1]*c[0]*c[1] - D[3]*b[0]*b[1]*c[0]*c[2] - D[3]*b[0]*b[2]*c[0]*c[1] + 2*D[3]*b[0]*b[2]*c[0]*c[2] + 2*D[4]*c[0]*c[0]*c[1]*c[1] - 2*D[4]*c[0]*c[0]*c[1]*c[2] + 2*D[4]*c[0]*c[0]*c[2]*c[2] + 2*D[5]*b[0]*c[0]*c[1]*c[1] - 2*D[5]*b[0]*c[0]*c[1]*c[2] + 2*D[5]*b[0]*c[0]*c[2]*c[2] + 2*D[5]*b[1]*c[0]*c[0]*c[1] - D[5]*b[1]*c[0]*c[0]*c[2] - D[5]*b[2]*c[0]*c[0]*c[1] + 2*D[5]*b[2]*c[0]*c[0]*c[2] + 2*D[6]*b[0]*b[0]*b[1]*c[1] - D[6]*b[0]*b[0]*b[1]*c[2] - D[6]*b[0]*b[0]*b[2]*c[1] + 2*D[6]*b[0]*b[0]*b[2]*c[2] + 2*D[6]*b[0]*b[1]*b[1]*c[0] - 2*D[6]*b[0]*b[1]*b[2]*c[0] + 2*D[6]*b[0]*b[2]*b[2]*c[0] + 2*D[7]*b[0]*c[0]*c[1]*c[1] - 2*D[7]*b[0]*c[0]*c[1]*c[2] + 2*D[7]*b[0]*c[0]*c[2]*c[2] + 2*D[7]*b[1]*c[0]*c[0]*c[1] - D[7]*b[1]*c[0]*c[0]*c[2] - D[7]*b[2]*c[0]*c[0]*c[1] + 2*D[7]*b[2]*c[0]*c[0]*c[2] + 2*D[8]*b[0]*b[0]*c[1]*c[1] - 2*D[8]*b[0]*b[0]*c[1]*c[2] + 2*D[8]*b[0]*b[0]*c[2]*c[2] + 4*D[8]*b[0]*b[1]*c[0]*c[1] - 2*D[8]*b[0]*b[1]*c[0]*c[2] - 2*D[8]*b[0]*b[2]*c[0]*c[1] + 4*D[8]*b[0]*b[2]*c[0]*c[2] + 2*D[8]*b[1]*b[1]*c[0]*c[0] - 2*D[8]*b[1]*b[2]*c[0]*c[0] + 2*D[8]*b[2]*b[2]*c[0]*c[0])/(192*delta)
,
t*(-D[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[1]*b[2] - D[2]*b[0]*b[1]*c[1] + D[2]*b[0]*b[2]*c[1] - D[3]*b[1]*c[0]*c[1] + D[3]*b[1]*c[0]*c[2] - D[5]*c[0]*c[1]*c[1] + D[5]*c[0]*c[1]*c[2] - D[6]*b[0]*b[1]*c[1] + D[6]*b[0]*b[1]*c[2] - D[6]*b[1]*b[1]*c[0] + D[6]*b[1]*b[2]*c[0] - D[8]*b[0]*c[1]*c[1] + D[8]*b[0]*c[1]*c[2] - D[8]*b[1]*c[0]*c[1] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(-D[1]*b[0]*b[1]*c[1] + D[1]*b[0]*b[2]*c[1] - D[2]*b[0]*b[1]*b[1] + D[2]*b[0]*b[1]*b[2] - D[4]*c[0]*c[1]*c[1] + D[4]*c[0]*c[1]*c[2] - D[5]*b[1]*c[0]*c[1] + D[5]*b[1]*c[0]*c[2] - D[7]*b[0]*c[1]*c[1] + D[7]*b[0]*c[1]*c[2] - D[7]*b[1]*c[0]*c[1] + D[7]*b[2]*c[0]*c[1] - D[8]*b[0]*b[1]*c[1] + D[8]*b[0]*b[1]*c[2] - D[8]*b[1]*b[1]*c[0] + D[8]*b[1]*b[2]*c[0])/(24*delta)
,
t*(-2*D[0]*b[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] - D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[1]*b[0]*b[1]*c[0]*c[1] + D[1]*b[0]*b[1]*c[1]*c[2] + D[1]*b[0]*b[2]*c[0]*c[1] - D[1]*b[0]*b[2]*c[1]*c[2] - 2*D[2]*b[0]*b[0]*b[1]*c[1] + D[2]*b[0]*b[0]*b[2]*c[1] - 2*D[2]*b[0]*b[1]*b[1]*c[0] + D[2]*b[0]*b[1]*b[1]*c[2] + D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2]*c[2] - D[2]*b[0]*b[2]*b[2]*c[1] - 2*D[3]*b[0]*b[1]*c[0]*c[1] + D[3]*b[0]*b[1]*c[0]*c[2] + D[3]*b[1]*b[2]*c[0]*c[1] - D[3]*b[1]*b[2]*c[0]*c[2] - 2*D[4]*c[0]*c[0]*c[1]*c[1] + D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] - D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[5]*b[0]*c[0]*c[1]*c[1] + D[5]*b[0]*c[0]*c[1]*c[2] - 2*D[5]*b[1]*c[0]*c[0]*c[1] + D[5]*b[1]*c[0]*c[0]*c[2] + D[5]*b[1]*c[0]*c[1]*c[2] - D[5]*b[1]*c[0]*c[2]*c[2] + D[5]*b[2]*c[0]*c[1]*c[1] - D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[6]*b[0]*b[0]*b[1]*c[1] + D[6]*b[0]*b[0]*b[1]*c[2] - 2*D[6]*b[0]*b[1]*b[1]*c[0] + D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] - D[6]*b[0]*b[1]*b[2]*c[2] + D[6]*b[1]*b[1]*b[2]*c[0] - D[6]*b[1]*b[2]*b[2]*c[0] - 2*D[7]*b[0]*c[0]*c[1]*c[1] + D[7]*b[0]*c[0]*c[1]*c[2] + D[7]*b[0]*c[1]*c[1]*c[2] - D[7]*b[0]*c[1]*c[2]*c[2] - 2*D[7]*b[1]*c[0]*c[0]*c[1] + D[7]*b[1]*c[0]*c[1]*c[2] + D[7]*b[2]*c[0]*c[0]*c[1] - D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[1]*c[1] + D[8]*b[0]*b[0]*c[1]*c[2] - 4*D[8]*b[0]*b[1]*c[0]*c[1] + D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] - D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] - D[8]*b[0]*b[2]*c[1]*c[2] - 2*D[8]*b[1]*b[1]*c[0]*c[0] + D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] - D[8]*b[1]*b[2]*c[0]*c[2] - D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[2]*b[2] - D[2]*b[0]*b[1]*c[2] + D[2]*b[0]*b[2]*c[2] - D[3]*b[2]*c[0]*c[1] + D[3]*b[2]*c[0]*c[2] - D[5]*c[0]*c[1]*c[2] + D[5]*c[0]*c[2]*c[2] - D[6]*b[0]*b[2]*c[1] + D[6]*b[0]*b[2]*c[2] - D[6]*b[1]*b[2]*c[0] + D[6]*b[2]*b[2]*c[0] - D[8]*b[0]*c[1]*c[2] + D[8]*b[0]*c[2]*c[2] - D[8]*b[1]*c[0]*c[2] + D[8]*b[2]*c[0]*c[2])/(24*delta)
,
t*(-D[1]*b[0]*b[1]*c[2] + D[1]*b[0]*b[2]*c[2] - D[2]*b[0]*b[1]*b[2] + D[2]*b[0]*b[2]*b[2] - D[4]*c[0]*c[1]*c[2] + D[4]*c[0]*c[2]*c[2] - D[5]*b[2]*c[0]*c[1] + D[5]*b[2]*c[0]*c[2] - D[7]*b[0]*c[1]*c[2] + D[7]*b[0]*c[2]*c[2] - D[7]*b[1]*c[0]*c[2] + D[7]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1] + D[8]*b[0]*b[2]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[2]*b[2]*c[0])/(24*delta)
,
t*(D[0]*b[0]*b[0]*b[1]*b[2] - 2*D[0]*b[0]*b[0]*b[2]*b[2] - D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] + D[1]*b[0]*b[1]*c[0]*c[2] - D[1]*b[0]*b[1]*c[1]*c[2] - 2*D[1]*b[0]*b[2]*c[0]*c[2] + D[1]*b[0]*b[2]*c[1]*c[2] + D[2]*b[0]*b[0]*b[1]*c[2] - 2*D[2]*b[0]*b[0]*b[2]*c[2] - D[2]*b[0]*b[1]*b[1]*c[2] + D[2]*b[0]*b[1]*b[2]*c[0] - D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] - 2*D[2]*b[0]*b[2]*b[2]*c[0] + D[2]*b[0]*b[2]*b[2]*c[1] + D[3]*b[0]*b[2]*c[0]*c[1] - 2*D[3]*b[0]*b[2]*c[0]*c[2] - D[3]*b[1]*b[2]*c[0]*c[1] + D[3]*b[1]*b[2]*c[0]*c[2] + D[4]*c[0]*c[0]*c[1]*c[2] - 2*D[4]*c[0]*c[0]*c[2]*c[2] - D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] + D[5]*b[0]*c[0]*c[1]*c[2] - 2*D[5]*b[0]*c[0]*c[2]*c[2] - D[5]*b[1]*c[0]*c[1]*c[2] + D[5]*b[1]*c[0]*c[2]*c[2] + D[5]*b[2]*c[0]*c[0]*c[1] - 2*D[5]*b[2]*c[0]*c[0]*c[2] - D[5]*b[2]*c[0]*c[1]*c[1] + D[5]*b[2]*c[0]*c[1]*c[2] + D[6]*b[0]*b[0]*b[2]*c[1] - 2*D[6]*b[0]*b[0]*b[2]*c[2] + D[6]*b[0]*b[1]*b[2]*c[0] - D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] - 2*D[6]*b[0]*b[2]*b[2]*c[0] - D[6]*b[1]*b[1]*b[2]*c[0] + D[6]*b[1]*b[2]*b[2]*c[0] + D[7]*b[0]*c[0]*c[1]*c[2] - 2*D[7]*b[0]*c[0]*c[2]*c[2] - D[7]*b[0]*c[1]*c[1]*c[2] + D[7]*b[0]*c[1]*c[2]*c[2] + D[7]*b[1]*c[0]*c[0]*c[2] - D[7]*b[1]*c[0]*c[1]*c[2] - 2*D[7]*b[2]*c[0]*c[0]*c[2] + D[7]*b[2]*c[0]*c[1]*c[2] + D[8]*b[0]*b[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[2]*c[2] + D[8]*b[0]*b[1]*c[0]*c[2] - D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] - 4*D[8]*b[0]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] - D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] - D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 2*D[8]*b[2]*b[2]*c[0]*c[0] + D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[1] + D[2]*b[1]*c[0] + D[6]*b[0]*c[1] + D[8]*c[0]*c[1])/(4*delta)
,
t*(D[1]*b[1]*c[0] + D[2]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[0]*c[1])/(4*delta)
,
t*(-D[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[1]*b[2] - D[1]*b[1]*c[0]*c[1] + D[1]*b[1]*c[0]*c[2] - D[2]*b[0]*b[1]*c[1] + D[2]*b[0]*b[1]*c[2] - D[2]*b[1]*b[1]*c[0] + D[2]*b[1]*b[2]*c[0] - D[6]*b[0]*b[1]*c[1] + D[6]*b[0]*b[2]*c[1] - D[7]*c[0]*c[1]*c[1] + D[7]*c[0]*c[1]*c[2] - D[8]*b[0]*c[1]*c[1] + D[8]*b[0]*c[1]*c[2] - D[8]*b[1]*c[0]*c[1] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[0]*b[1]*b[1] + D[2]*b[1]*c[1] + D[6]*b[1]*c[1] + D[8]*c[1]*c[1])/(4*delta)
,
t*(D[1]*b[1]*c[1] + D[2]*b[1]*b[1] + D[7]*c[1]*c[1] + D[8]*b[1]*c[1])/(4*delta)
,
t*(D[0]*b[0]*b[1]*b[1] - D[0]*b[1]*b[1]*b[2] + D[1]*b[1]*c[0]*c[1] - D[1]*b[1]*c[1]*c[2] + D[2]*b[0]*b[1]*c[1] + D[2]*b[1]*b[1]*c[0] - D[2]*b[1]*b[1]*c[2] - D[2]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*c[1] - D[6]*b[1]*b[2]*c[1] + D[7]*c[0]*c[1]*c[1] - D[7]*c[1]*c[1]*c[2] + D[8]*b[0]*c[1]*c[1] + D[8]*b[1]*c[0]*c[1] - D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(D[0]*b[1]*b[2] + D[2]*b[1]*c[2] + D[6]*b[2]*c[1] + D[8]*c[1]*c[2])/(4*delta)
,
t*(D[1]*b[1]*c[2] + D[2]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[2]*c[1])/(4*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[1]*b[1]*b[2] - D[1]*b[1]*c[0]*c[2] + D[1]*b[1]*c[1]*c[2] - D[2]*b[0]*b[1]*c[2] + D[2]*b[1]*b[1]*c[2] - D[2]*b[1]*b[2]*c[0] + D[2]*b[1]*b[2]*c[1] - D[6]*b[0]*b[2]*c[1] + D[6]*b[1]*b[2]*c[1] - D[7]*c[0]*c[1]*c[2] + D[7]*c[1]*c[1]*c[2] - D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[0]*c[1] + D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(D[3]*b[0]*c[1] + D[5]*c[0]*c[1] + D[6]*b[0]*b[1] + D[8]*b[1]*c[0])/(4*delta)
,
t*(D[4]*c[0]*c[1] + D[5]*b[0]*c[1] + D[7]*b[1]*c[0] + D[8]*b[0]*b[1])/(4*delta)
,
t*(-D[3]*b[0]*b[1]*c[1] + D[3]*b[0]*b[2]*c[1] - D[4]*c[0]*c[1]*c[1] + D[4]*c[0]*c[1]*c[2] - D[5]*b[0]*c[1]*c[1] + D[5]*b[0]*c[1]*c[2] - D[5]*b[1]*c[0]*c[1] + D[5]*b[2]*c[0]*c[1] - D[6]*b[0]*b[1]*b[1] + D[6]*b[0]*b[1]*b[2] - D[7]*b[1]*c[0]*c[1] + D[7]*b[1]*c[0]*c[2] - D[8]*b[0]*b[1]*c[1] + D[8]*b[0]*b[1]*c[2] - D[8]*b[1]*b[1]*c[0] + D[8]*b[1]*b[2]*c[0])/(24*delta)
,
t*(D[3]*b[1]*c[1] + D[5]*c[1]*c[1] + D[6]*b[1]*b[1] + D[8]*b[1]*c[1])/(4*delta)
,
t*(D[4]*c[1]*c[1] + D[5]*b[1]*c[1] + D[7]*b[1]*c[1] + D[8]*b[1]*b[1])/(4*delta)
,
t*(D[3]*b[0]*b[1]*c[1] - D[3]*b[1]*b[2]*c[1] + D[4]*c[0]*c[1]*c[1] - D[4]*c[1]*c[1]*c[2] + D[5]*b[0]*c[1]*c[1] + D[5]*b[1]*c[0]*c[1] - D[5]*b[1]*c[1]*c[2] - D[5]*b[2]*c[1]*c[1] + D[6]*b[0]*b[1]*b[1] - D[6]*b[1]*b[1]*b[2] + D[7]*b[1]*c[0]*c[1] - D[7]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[1] + D[8]*b[1]*b[1]*c[0] - D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(D[3]*b[2]*c[1] + D[5]*c[1]*c[2] + D[6]*b[1]*b[2] + D[8]*b[1]*c[2])/(4*delta)
,
t*(D[4]*c[1]*c[2] + D[5]*b[2]*c[1] + D[7]*b[1]*c[2] + D[8]*b[1]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[2]*c[1] + D[3]*b[1]*b[2]*c[1] - D[4]*c[0]*c[1]*c[2] + D[4]*c[1]*c[1]*c[2] - D[5]*b[0]*c[1]*c[2] + D[5]*b[1]*c[1]*c[2] - D[5]*b[2]*c[0]*c[1] + D[5]*b[2]*c[1]*c[1] - D[6]*b[0]*b[1]*b[2] + D[6]*b[1]*b[1]*b[2] - D[7]*b[1]*c[0]*c[2] + D[7]*b[1]*c[1]*c[2] - D[8]*b[0]*b[1]*c[2] + D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(D[0]*b[0]*b[0]*b[1] - D[0]*b[0]*b[1]*b[2] + D[2]*b[0]*b[1]*c[0] - D[2]*b[1]*b[2]*c[0] + D[3]*b[0]*c[0]*c[1] - D[3]*b[0]*c[1]*c[2] + D[5]*c[0]*c[0]*c[1] - D[5]*c[0]*c[1]*c[2] + D[6]*b[0]*b[0]*c[1] + D[6]*b[0]*b[1]*c[0] - D[6]*b[0]*b[1]*c[2] - D[6]*b[0]*b[2]*c[1] + D[8]*b[0]*c[0]*c[1] + D[8]*b[1]*c[0]*c[0] - D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(D[1]*b[0]*b[1]*c[0] - D[1]*b[1]*b[2]*c[0] + D[2]*b[0]*b[0]*b[1] - D[2]*b[0]*b[1]*b[2] + D[4]*c[0]*c[0]*c[1] - D[4]*c[0]*c[1]*c[2] + D[5]*b[0]*c[0]*c[1] - D[5]*b[0]*c[1]*c[2] + D[7]*b[0]*c[0]*c[1] + D[7]*b[1]*c[0]*c[0] - D[7]*b[1]*c[0]*c[2] - D[7]*b[2]*c[0]*c[1] + D[8]*b[0]*b[0]*c[1] + D[8]*b[0]*b[1]*c[0] - D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(-2*D[0]*b[0]*b[0]*b[1]*b[1] + D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] - D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[1]*b[0]*b[1]*c[0]*c[1] + D[1]*b[0]*b[1]*c[0]*c[2] + D[1]*b[1]*b[2]*c[0]*c[1] - D[1]*b[1]*b[2]*c[0]*c[2] - 2*D[2]*b[0]*b[0]*b[1]*c[1] + D[2]*b[0]*b[0]*b[1]*c[2] - 2*D[2]*b[0]*b[1]*b[1]*c[0] + D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2]*c[2] + D[2]*b[1]*b[1]*b[2]*c[0] - D[2]*b[1]*b[2]*b[2]*c[0] - 2*D[3]*b[0]*b[1]*c[0]*c[1] + D[3]*b[0]*b[1]*c[1]*c[2] + D[3]*b[0]*b[2]*c[0]*c[1] - D[3]*b[0]*b[2]*c[1]*c[2] - 2*D[4]*c[0]*c[0]*c[1]*c[1] + D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] - D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[5]*b[0]*c[0]*c[1]*c[1] + D[5]*b[0]*c[0]*c[1]*c[2] + D[5]*b[0]*c[1]*c[1]*c[2] - D[5]*b[0]*c[1]*c[2]*c[2] - 2*D[5]*b[1]*c[0]*c[0]*c[1] + D[5]*b[1]*c[0]*c[1]*c[2] + D[5]*b[2]*c[0]*c[0]*c[1] - D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[6]*b[0]*b[0]*b[1]*c[1] + D[6]*b[0]*b[0]*b[2]*c[1] - 2*D[6]*b[0]*b[1]*b[1]*c[0] + D[6]*b[0]*b[1]*b[1]*c[2] + D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] - D[6]*b[0]*b[1]*b[2]*c[2] - D[6]*b[0]*b[2]*b[2]*c[1] - 2*D[7]*b[0]*c[0]*c[1]*c[1] + D[7]*b[0]*c[0]*c[1]*c[2] - 2*D[7]*b[1]*c[0]*c[0]*c[1] + D[7]*b[1]*c[0]*c[0]*c[2] + D[7]*b[1]*c[0]*c[1]*c[2] - D[7]*b[1]*c[0]*c[2]*c[2] + D[7]*b[2]*c[0]*c[1]*c[1] - D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[1]*c[1] + D[8]*b[0]*b[0]*c[1]*c[2] - 4*D[8]*b[0]*b[1]*c[0]*c[1] + D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] - D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] - D[8]*b[0]*b[2]*c[1]*c[2] - 2*D[8]*b[1]*b[1]*c[0]*c[0] + D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] - D[8]*b[1]*b[2]*c[0]*c[2] - D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[1]*b[1] - D[0]*b[1]*b[1]*b[2] + D[2]*b[0]*b[1]*c[1] - D[2]*b[1]*b[2]*c[1] + D[3]*b[1]*c[0]*c[1] - D[3]*b[1]*c[1]*c[2] + D[5]*c[0]*c[1]*c[1] - D[5]*c[1]*c[1]*c[2] + D[6]*b[0]*b[1]*c[1] + D[6]*b[1]*b[1]*c[0] - D[6]*b[1]*b[1]*c[2] - D[6]*b[1]*b[2]*c[1] + D[8]*b[0]*c[1]*c[1] + D[8]*b[1]*c[0]*c[1] - D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(D[1]*b[0]*b[1]*c[1] - D[1]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[1] - D[2]*b[1]*b[1]*b[2] + D[4]*c[0]*c[1]*c[1] - D[4]*c[1]*c[1]*c[2] + D[5]*b[1]*c[0]*c[1] - D[5]*b[1]*c[1]*c[2] + D[7]*b[0]*c[1]*c[1] + D[7]*b[1]*c[0]*c[1] - D[7]*b[1]*c[1]*c[2] - D[7]*b[2]*c[1]*c[1] + D[8]*b[0]*b[1]*c[1] + D[8]*b[1]*b[1]*c[0] - D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(2*D[0]*b[0]*b[0]*b[1]*b[1] - 2*D[0]*b[0]*b[1]*b[1]*b[2] + 2*D[0]*b[1]*b[1]*b[2]*b[2] + 2*D[1]*b[0]*b[1]*c[0]*c[1] - D[1]*b[0]*b[1]*c[1]*c[2] - D[1]*b[1]*b[2]*c[0]*c[1] + 2*D[1]*b[1]*b[2]*c[1]*c[2] + 2*D[2]*b[0]*b[0]*b[1]*c[1] + 2*D[2]*b[0]*b[1]*b[1]*c[0] - D[2]*b[0]*b[1]*b[1]*c[2] - 2*D[2]*b[0]*b[1]*b[2]*c[1] - D[2]*b[1]*b[1]*b[2]*c[0] + 2*D[2]*b[1]*b[1]*b[2]*c[2] + 2*D[2]*b[1]*b[2]*b[2]*c[1] + 2*D[3]*b[0]*b[1]*c[0]*c[1] - D[3]*b[0]*b[1]*c[1]*c[2] - D[3]*b[1]*b[2]*c[0]*c[1] + 2*D[3]*b[1]*b[2]*c[1]*c[2] + 2*D[4]*c[0]*c[0]*c[1]*c[1] - 2*D[4]*c[0]*c[1]*c[1]*c[2] + 2*D[4]*c[1]*c[1]*c[2]*c[2] + 2*D[5]*b[0]*c[0]*c[1]*c[1] - D[5]*b[0]*c[1]*c[1]*c[2] + 2*D[5]*b[1]*c[0]*c[0]*c[1] - 2*D[5]*b[1]*c[0]*c[1]*c[2] + 2*D[5]*b[1]*c[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[1]*c[1] + 2*D[5]*b[2]*c[1]*c[1]*c[2] + 2*D[6]*b[0]*b[0]*b[1]*c[1] + 2*D[6]*b[0]*b[1]*b[1]*c[0] - D[6]*b[0]*b[1]*b[1]*c[2] - 2*D[6]*b[0]*b[1]*b[2]*c[1] - D[6]*b[1]*b[1]*b[2]*c[0] + 2*D[6]*b[1]*b[1]*b[2]*c[2] + 2*D[6]*b[1]*b[2]*b[2]*c[1] + 2*D[7]*b[0]*c[0]*c[1]*c[1] - D[7]*b[0]*c[1]*c[1]*c[2] + 2*D[7]*b[1]*c[0]*c[0]*c[1] - 2*D[7]*b[1]*c[0]*c[1]*c[2] + 2*D[7]*b[1]*c[1]*c[2]*c[2] - D[7]*b[2]*c[0]*c[1]*c[1] + 2*D[7]*b[2]*c[1]*c[1]*c[2] + 2*D[8]*b[0]*b[0]*c[1]*c[1] + 4*D[8]*b[0]*b[1]*c[0]*c[1] - 2*D[8]*b[0]*b[1]*c[1]*c[2] - 2*D[8]*b[0]*b[2]*c[1]*c[1] + 2*D[8]*b[1]*b[1]*c[0]*c[0] - 2*D[8]*b[1]*b[1]*c[0]*c[2] + 2*D[8]*b[1]*b[1]*c[2]*c[2] - 2*D[8]*b[1]*b[2]*c[0]*c[1] + 4*D[8]*b[1]*b[2]*c[1]*c[2] + 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[1]*b[2] - D[0]*b[1]*b[2]*b[2] + D[2]*b[0]*b[1]*c[2] - D[2]*b[1]*b[2]*c[2] + D[3]*b[2]*c[0]*c[1] - D[3]*b[2]*c[1]*c[2] + D[5]*c[0]*c[1]*c[2] - D[5]*c[1]*c[2]*c[2] + D[6]*b[0]*b[2]*c[1] + D[6]*b[1]*b[2]*c[0] - D[6]*b[1]*b[2]*c[2] - D[6]*b[2]*b[2]*c[1] + D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(D[1]*b[0]*b[1]*c[2] - D[1]*b[1]*b[2]*c[2] + D[2]*b[0]*b[1]*b[2] - D[2]*b[1]*b[2]*b[2] + D[4]*c[0]*c[1]*c[2] - D[4]*c[1]*c[2]*c[2] + D[5]*b[2]*c[0]*c[1] - D[5]*b[2]*c[1]*c[2] + D[7]*b[0]*c[1]*c[2] + D[7]*b[1]*c[0]*c[2] - D[7]*b[1]*c[2]*c[2] - D[7]*b[2]*c[1]*c[2] + D[8]*b[0]*b[2]*c[1] + D[8]*b[1]*b[2]*c[0] - D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[0]*b[1]*b[1]*b[2]*b[2] - D[1]*b[0]*b[1]*c[0]*c[2] + D[1]*b[0]*b[1]*c[1]*c[2] + D[1]*b[1]*b[2]*c[0]*c[2] - 2*D[1]*b[1]*b[2]*c[1]*c[2] - D[2]*b[0]*b[0]*b[1]*c[2] + D[2]*b[0]*b[1]*b[1]*c[2] - D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] - 2*D[2]*b[1]*b[1]*b[2]*c[2] + D[2]*b[1]*b[2]*b[2]*c[0] - 2*D[2]*b[1]*b[2]*b[2]*c[1] - D[3]*b[0]*b[2]*c[0]*c[1] + D[3]*b[0]*b[2]*c[1]*c[2] + D[3]*b[1]*b[2]*c[0]*c[1] - 2*D[3]*b[1]*b[2]*c[1]*c[2] - D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[4]*c[1]*c[1]*c[2]*c[2] - D[5]*b[0]*c[0]*c[1]*c[2] + D[5]*b[0]*c[1]*c[2]*c[2] + D[5]*b[1]*c[0]*c[1]*c[2] - 2*D[5]*b[1]*c[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[0]*c[1] + D[5]*b[2]*c[0]*c[1]*c[1] + D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[5]*b[2]*c[1]*c[1]*c[2] - D[6]*b[0]*b[0]*b[2]*c[1] - D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] + D[6]*b[0]*b[2]*b[2]*c[1] + D[6]*b[1]*b[1]*b[2]*c[0] - 2*D[6]*b[1]*b[1]*b[2]*c[2] - 2*D[6]*b[1]*b[2]*b[2]*c[1] - D[7]*b[0]*c[0]*c[1]*c[2] + D[7]*b[0]*c[1]*c[1]*c[2] - D[7]*b[1]*c[0]*c[0]*c[2] + D[7]*b[1]*c[0]*c[1]*c[2] + D[7]*b[1]*c[0]*c[2]*c[2] - 2*D[7]*b[1]*c[1]*c[2]*c[2] + D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[7]*b[2]*c[1]*c[1]*c[2] - D[8]*b[0]*b[0]*c[1]*c[2] - D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] - D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] + D[8]*b[1]*b[1]*c[0]*c[2] - 2*D[8]*b[1]*b[1]*c[2]*c[2] - D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 4*D[8]*b[1]*b[2]*c[1]*c[2] + D[8]*b[2]*b[2]*c[0]*c[1] - 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
,
t*(D[0]*b[0]*b[2] + D[2]*b[2]*c[0] + D[6]*b[0]*c[2] + D[8]*c[0]*c[2])/(4*delta)
,
t*(D[1]*b[2]*c[0] + D[2]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[0]*c[2])/(4*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[2]*b[2] - D[1]*b[2]*c[0]*c[1] + D[1]*b[2]*c[0]*c[2] - D[2]*b[0]*b[2]*c[1] + D[2]*b[0]*b[2]*c[2] - D[2]*b[1]*b[2]*c[0] + D[2]*b[2]*b[2]*c[0] - D[6]*b[0]*b[1]*c[2] + D[6]*b[0]*b[2]*c[2] - D[7]*c[0]*c[1]*c[2] + D[7]*c[0]*c[2]*c[2] - D[8]*b[0]*c[1]*c[2] + D[8]*b[0]*c[2]*c[2] - D[8]*b[1]*c[0]*c[2] + D[8]*b[2]*c[0]*c[2])/(24*delta)
,
t*(D[0]*b[1]*b[2] + D[2]*b[2]*c[1] + D[6]*b[1]*c[2] + D[8]*c[1]*c[2])/(4*delta)
,
t*(D[1]*b[2]*c[1] + D[2]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[1]*c[2])/(4*delta)
,
t*(D[0]*b[0]*b[1]*b[2] - D[0]*b[1]*b[2]*b[2] + D[1]*b[2]*c[0]*c[1] - D[1]*b[2]*c[1]*c[2] + D[2]*b[0]*b[2]*c[1] + D[2]*b[1]*b[2]*c[0] - D[2]*b[1]*b[2]*c[2] - D[2]*b[2]*b[2]*c[1] + D[6]*b[0]*b[1]*c[2] - D[6]*b[1]*b[2]*c[2] + D[7]*c[0]*c[1]*c[2] - D[7]*c[1]*c[2]*c[2] + D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(D[0]*b[2]*b[2] + D[2]*b[2]*c[2] + D[6]*b[2]*c[2] + D[8]*c[2]*c[2])/(4*delta)
,
t*(D[1]*b[2]*c[2] + D[2]*b[2]*b[2] + D[7]*c[2]*c[2] + D[8]*b[2]*c[2])/(4*delta)
,
t*(-D[0]*b[0]*b[2]*b[2] + D[0]*b[1]*b[2]*b[2] - D[1]*b[2]*c[0]*c[2] + D[1]*b[2]*c[1]*c[2] - D[2]*b[0]*b[2]*c[2] + D[2]*b[1]*b[2]*c[2] - D[2]*b[2]*b[2]*c[0] + D[2]*b[2]*b[2]*c[1] - D[6]*b[0]*b[2]*c[2] + D[6]*b[1]*b[2]*c[2] - D[7]*c[0]*c[2]*c[2] + D[7]*c[1]*c[2]*c[2] - D[8]*b[0]*c[2]*c[2] + D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[0]*c[2] + D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(D[3]*b[0]*c[2] + D[5]*c[0]*c[2] + D[6]*b[0]*b[2] + D[8]*b[2]*c[0])/(4*delta)
,
t*(D[4]*c[0]*c[2] + D[5]*b[0]*c[2] + D[7]*b[2]*c[0] + D[8]*b[0]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[1]*c[2] + D[3]*b[0]*b[2]*c[2] - D[4]*c[0]*c[1]*c[2] + D[4]*c[0]*c[2]*c[2] - D[5]*b[0]*c[1]*c[2] + D[5]*b[0]*c[2]*c[2] - D[5]*b[1]*c[0]*c[2] + D[5]*b[2]*c[0]*c[2] - D[6]*b[0]*b[1]*b[2] + D[6]*b[0]*b[2]*b[2] - D[7]*b[2]*c[0]*c[1] + D[7]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1] + D[8]*b[0]*b[2]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[2]*b[2]*c[0])/(24*delta)
,
t*(D[3]*b[1]*c[2] + D[5]*c[1]*c[2] + D[6]*b[1]*b[2] + D[8]*b[2]*c[1])/(4*delta)
,
t*(D[4]*c[1]*c[2] + D[5]*b[1]*c[2] + D[7]*b[2]*c[1] + D[8]*b[1]*b[2])/(4*delta)
,
t*(D[3]*b[0]*b[1]*c[2] - D[3]*b[1]*b[2]*c[2] + D[4]*c[0]*c[1]*c[2] - D[4]*c[1]*c[2]*c[2] + D[5]*b[0]*c[1]*c[2] + D[5]*b[1]*c[0]*c[2] - D[5]*b[1]*c[2]*c[2] - D[5]*b[2]*c[1]*c[2] + D[6]*b[0]*b[1]*b[2] - D[6]*b[1]*b[2]*b[2] + D[7]*b[2]*c[0]*c[1] - D[7]*b[2]*c[1]*c[2] + D[8]*b[0]*b[2]*c[1] + D[8]*b[1]*b[2]*c[0] - D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(D[3]*b[2]*c[2] + D[5]*c[2]*c[2] + D[6]*b[2]*b[2] + D[8]*b[2]*c[2])/(4*delta)
,
t*(D[4]*c[2]*c[2] + D[5]*b[2]*c[2] + D[7]*b[2]*c[2] + D[8]*b[2]*b[2])/(4*delta)
,
t*(-D[3]*b[0]*b[2]*c[2] + D[3]*b[1]*b[2]*c[2] - D[4]*c[0]*c[2]*c[2] + D[4]*c[1]*c[2]*c[2] - D[5]*b[0]*c[2]*c[2] + D[5]*b[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[2] + D[5]*b[2]*c[1]*c[2] - D[6]*b[0]*b[2]*b[2] + D[6]*b[1]*b[2]*b[2] - D[7]*b[2]*c[0]*c[2] + D[7]*b[2]*c[1]*c[2] - D[8]*b[0]*b[2]*c[2] + D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[0] + D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[2] + D[0]*b[0]*b[1]*b[2] - D[2]*b[0]*b[2]*c[0] + D[2]*b[1]*b[2]*c[0] - D[3]*b[0]*c[0]*c[2] + D[3]*b[0]*c[1]*c[2] - D[5]*c[0]*c[0]*c[2] + D[5]*c[0]*c[1]*c[2] - D[6]*b[0]*b[0]*c[2] + D[6]*b[0]*b[1]*c[2] - D[6]*b[0]*b[2]*c[0] + D[6]*b[0]*b[2]*c[1] - D[8]*b[0]*c[0]*c[2] + D[8]*b[1]*c[0]*c[2] - D[8]*b[2]*c[0]*c[0] + D[8]*b[2]*c[0]*c[1])/(24*delta)
,
t*(-D[1]*b[0]*b[2]*c[0] + D[1]*b[1]*b[2]*c[0] - D[2]*b[0]*b[0]*b[2] + D[2]*b[0]*b[1]*b[2] - D[4]*c[0]*c[0]*c[2] + D[4]*c[0]*c[1]*c[2] - D[5]*b[0]*c[0]*c[2] + D[5]*b[0]*c[1]*c[2] - D[7]*b[0]*c[0]*c[2] + D[7]*b[1]*c[0]*c[2] - D[7]*b[2]*c[0]*c[0] + D[7]*b[2]*c[0]*c[1] - D[8]*b[0]*b[0]*c[2] + D[8]*b[0]*b[1]*c[2] - D[8]*b[0]*b[2]*c[0] + D[8]*b[0]*b[2]*c[1])/(24*delta)
,
t*(D[0]*b[0]*b[0]*b[1]*b[2] - 2*D[0]*b[0]*b[0]*b[2]*b[2] - D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] + D[1]*b[0]*b[2]*c[0]*c[1] - 2*D[1]*b[0]*b[2]*c[0]*c[2] - D[1]*b[1]*b[2]*c[0]*c[1] + D[1]*b[1]*b[2]*c[0]*c[2] + D[2]*b[0]*b[0]*b[2]*c[1] - 2*D[2]*b[0]*b[0]*b[2]*c[2] + D[2]*b[0]*b[1]*b[2]*c[0] - D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] - 2*D[2]*b[0]*b[2]*b[2]*c[0] - D[2]*b[1]*b[1]*b[2]*c[0] + D[2]*b[1]*b[2]*b[2]*c[0] + D[3]*b[0]*b[1]*c[0]*c[2] - D[3]*b[0]*b[1]*c[1]*c[2] - 2*D[3]*b[0]*b[2]*c[0]*c[2] + D[3]*b[0]*b[2]*c[1]*c[2] + D[4]*c[0]*c[0]*c[1]*c[2] - 2*D[4]*c[0]*c[0]*c[2]*c[2] - D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] + D[5]*b[0]*c[0]*c[1]*c[2] - 2*D[5]*b[0]*c[0]*c[2]*c[2] - D[5]*b[0]*c[1]*c[1]*c[2] + D[5]*b[0]*c[1]*c[2]*c[2] + D[5]*b[1]*c[0]*c[0]*c[2] - D[5]*b[1]*c[0]*c[1]*c[2] - 2*D[5]*b[2]*c[0]*c[0]*c[2] + D[5]*b[2]*c[0]*c[1]*c[2] + D[6]*b[0]*b[0]*b[1]*c[2] - 2*D[6]*b[0]*b[0]*b[2]*c[2] - D[6]*b[0]*b[1]*b[1]*c[2] + D[6]*b[0]*b[1]*b[2]*c[0] - D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] - 2*D[6]*b[0]*b[2]*b[2]*c[0] + D[6]*b[0]*b[2]*b[2]*c[1] + D[7]*b[0]*c[0]*c[1]*c[2] - 2*D[7]*b[0]*c[0]*c[2]*c[2] - D[7]*b[1]*c[0]*c[1]*c[2] + D[7]*b[1]*c[0]*c[2]*c[2] + D[7]*b[2]*c[0]*c[0]*c[1] - 2*D[7]*b[2]*c[0]*c[0]*c[2] - D[7]*b[2]*c[0]*c[1]*c[1] + D[7]*b[2]*c[0]*c[1]*c[2] + D[8]*b[0]*b[0]*c[1]*c[2] - 2*D[8]*b[0]*b[0]*c[2]*c[2] + D[8]*b[0]*b[1]*c[0]*c[2] - D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] + D[8]*b[0]*b[2]*c[0]*c[1] - 4*D[8]*b[0]*b[2]*c[0]*c[2] - D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] - D[8]*b[1]*b[1]*c[0]*c[2] + D[8]*b[1]*b[2]*c[0]*c[0] - D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 2*D[8]*b[2]*b[2]*c[0]*c[0] + D[8]*b[2]*b[2]*c[0]*c[1])/(192*delta)
,
t*(-D[0]*b[0]*b[1]*b[2] + D[0]*b[1]*b[1]*b[2] - D[2]*b[0]*b[2]*c[1] + D[2]*b[1]*b[2]*c[1] - D[3]*b[1]*c[0]*c[2] + D[3]*b[1]*c[1]*c[2] - D[5]*c[0]*c[1]*c[2] + D[5]*c[1]*c[1]*c[2] - D[6]*b[0]*b[1]*c[2] + D[6]*b[1]*b[1]*c[2] - D[6]*b[1]*b[2]*c[0] + D[6]*b[1]*b[2]*c[1] - D[8]*b[0]*c[1]*c[2] + D[8]*b[1]*c[1]*c[2] - D[8]*b[2]*c[0]*c[1] + D[8]*b[2]*c[1]*c[1])/(24*delta)
,
t*(-D[1]*b[0]*b[2]*c[1] + D[1]*b[1]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2] + D[2]*b[1]*b[1]*b[2] - D[4]*c[0]*c[1]*c[2] + D[4]*c[1]*c[1]*c[2] - D[5]*b[1]*c[0]*c[2] + D[5]*b[1]*c[1]*c[2] - D[7]*b[0]*c[1]*c[2] + D[7]*b[1]*c[1]*c[2] - D[7]*b[2]*c[0]*c[1] + D[7]*b[2]*c[1]*c[1] - D[8]*b[0]*b[1]*c[2] + D[8]*b[1]*b[1]*c[2] - D[8]*b[1]*b[2]*c[0] + D[8]*b[1]*b[2]*c[1])/(24*delta)
,
t*(-D[0]*b[0]*b[0]*b[1]*b[2] + D[0]*b[0]*b[1]*b[1]*b[2] + D[0]*b[0]*b[1]*b[2]*b[2] - 2*D[0]*b[1]*b[1]*b[2]*b[2] - D[1]*b[0]*b[2]*c[0]*c[1] + D[1]*b[0]*b[2]*c[1]*c[2] + D[1]*b[1]*b[2]*c[0]*c[1] - 2*D[1]*b[1]*b[2]*c[1]*c[2] - D[2]*b[0]*b[0]*b[2]*c[1] - D[2]*b[0]*b[1]*b[2]*c[0] + D[2]*b[0]*b[1]*b[2]*c[1] + D[2]*b[0]*b[1]*b[2]*c[2] + D[2]*b[0]*b[2]*b[2]*c[1] + D[2]*b[1]*b[1]*b[2]*c[0] - 2*D[2]*b[1]*b[1]*b[2]*c[2] - 2*D[2]*b[1]*b[2]*b[2]*c[1] - D[3]*b[0]*b[1]*c[0]*c[2] + D[3]*b[0]*b[1]*c[1]*c[2] + D[3]*b[1]*b[2]*c[0]*c[2] - 2*D[3]*b[1]*b[2]*c[1]*c[2] - D[4]*c[0]*c[0]*c[1]*c[2] + D[4]*c[0]*c[1]*c[1]*c[2] + D[4]*c[0]*c[1]*c[2]*c[2] - 2*D[4]*c[1]*c[1]*c[2]*c[2] - D[5]*b[0]*c[0]*c[1]*c[2] + D[5]*b[0]*c[1]*c[1]*c[2] - D[5]*b[1]*c[0]*c[0]*c[2] + D[5]*b[1]*c[0]*c[1]*c[2] + D[5]*b[1]*c[0]*c[2]*c[2] - 2*D[5]*b[1]*c[1]*c[2]*c[2] + D[5]*b[2]*c[0]*c[1]*c[2] - 2*D[5]*b[2]*c[1]*c[1]*c[2] - D[6]*b[0]*b[0]*b[1]*c[2] + D[6]*b[0]*b[1]*b[1]*c[2] - D[6]*b[0]*b[1]*b[2]*c[0] + D[6]*b[0]*b[1]*b[2]*c[1] + D[6]*b[0]*b[1]*b[2]*c[2] - 2*D[6]*b[1]*b[1]*b[2]*c[2] + D[6]*b[1]*b[2]*b[2]*c[0] - 2*D[6]*b[1]*b[2]*b[2]*c[1] - D[7]*b[0]*c[0]*c[1]*c[2] + D[7]*b[0]*c[1]*c[2]*c[2] + D[7]*b[1]*c[0]*c[1]*c[2] - 2*D[7]*b[1]*c[1]*c[2]*c[2] - D[7]*b[2]*c[0]*c[0]*c[1] + D[7]*b[2]*c[0]*c[1]*c[1] + D[7]*b[2]*c[0]*c[1]*c[2] - 2*D[7]*b[2]*c[1]*c[1]*c[2] - D[8]*b[0]*b[0]*c[1]*c[2] - D[8]*b[0]*b[1]*c[0]*c[2] + D[8]*b[0]*b[1]*c[1]*c[2] + D[8]*b[0]*b[1]*c[2]*c[2] - D[8]*b[0]*b[2]*c[0]*c[1] + D[8]*b[0]*b[2]*c[1]*c[1] + D[8]*b[0]*b[2]*c[1]*c[2] + D[8]*b[1]*b[1]*c[0]*c[2] - 2*D[8]*b[1]*b[1]*c[2]*c[2] - D[8]*b[1]*b[2]*c[0]*c[0] + D[8]*b[1]*b[2]*c[0]*c[1] + D[8]*b[1]*b[2]*c[0]*c[2] - 4*D[8]*b[1]*b[2]*c[1]*c[2] + D[8]*b[2]*b[2]*c[0]*c[1] - 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
,
t*(-D[0]*b[0]*b[2]*b[2] + D[0]*b[1]*b[2]*b[2] - D[2]*b[0]*b[2]*c[2] + D[2]*b[1]*b[2]*c[2] - D[3]*b[2]*c[0]*c[2] + D[3]*b[2]*c[1]*c[2] - D[5]*c[0]*c[2]*c[2] + D[5]*c[1]*c[2]*c[2] - D[6]*b[0]*b[2]*c[2] + D[6]*b[1]*b[2]*c[2] - D[6]*b[2]*b[2]*c[0] + D[6]*b[2]*b[2]*c[1] - D[8]*b[0]*c[2]*c[2] + D[8]*b[1]*c[2]*c[2] - D[8]*b[2]*c[0]*c[2] + D[8]*b[2]*c[1]*c[2])/(24*delta)
,
t*(-D[1]*b[0]*b[2]*c[2] + D[1]*b[1]*b[2]*c[2] - D[2]*b[0]*b[2]*b[2] + D[2]*b[1]*b[2]*b[2] - D[4]*c[0]*c[2]*c[2] + D[4]*c[1]*c[2]*c[2] - D[5]*b[2]*c[0]*c[2] + D[5]*b[2]*c[1]*c[2] - D[7]*b[0]*c[2]*c[2] + D[7]*b[1]*c[2]*c[2] - D[7]*b[2]*c[0]*c[2] + D[7]*b[2]*c[1]*c[2] - D[8]*b[0]*b[2]*c[2] + D[8]*b[1]*b[2]*c[2] - D[8]*b[2]*b[2]*c[0] + D[8]*b[2]*b[2]*c[1])/(24*delta)
,
t*(2*D[0]*b[0]*b[0]*b[2]*b[2] - 2*D[0]*b[0]*b[1]*b[2]*b[2] + 2*D[0]*b[1]*b[1]*b[2]*b[2] + 2*D[1]*b[0]*b[2]*c[0]*c[2] - D[1]*b[0]*b[2]*c[1]*c[2] - D[1]*b[1]*b[2]*c[0]*c[2] + 2*D[1]*b[1]*b[2]*c[1]*c[2] + 2*D[2]*b[0]*b[0]*b[2]*c[2] - 2*D[2]*b[0]*b[1]*b[2]*c[2] + 2*D[2]*b[0]*b[2]*b[2]*c[0] - D[2]*b[0]*b[2]*b[2]*c[1] + 2*D[2]*b[1]*b[1]*b[2]*c[2] - D[2]*b[1]*b[2]*b[2]*c[0] + 2*D[2]*b[1]*b[2]*b[2]*c[1] + 2*D[3]*b[0]*b[2]*c[0]*c[2] - D[3]*b[0]*b[2]*c[1]*c[2] - D[3]*b[1]*b[2]*c[0]*c[2] + 2*D[3]*b[1]*b[2]*c[1]*c[2] + 2*D[4]*c[0]*c[0]*c[2]*c[2] - 2*D[4]*c[0]*c[1]*c[2]*c[2] + 2*D[4]*c[1]*c[1]*c[2]*c[2] + 2*D[5]*b[0]*c[0]*c[2]*c[2] - D[5]*b[0]*c[1]*c[2]*c[2] - D[5]*b[1]*c[0]*c[2]*c[2] + 2*D[5]*b[1]*c[1]*c[2]*c[2] + 2*D[5]*b[2]*c[0]*c[0]*c[2] - 2*D[5]*b[2]*c[0]*c[1]*c[2] + 2*D[5]*b[2]*c[1]*c[1]*c[2] + 2*D[6]*b[0]*b[0]*b[2]*c[2] - 2*D[6]*b[0]*b[1]*b[2]*c[2] + 2*D[6]*b[0]*b[2]*b[2]*c[0] - D[6]*b[0]*b[2]*b[2]*c[1] + 2*D[6]*b[1]*b[1]*b[2]*c[2] - D[6]*b[1]*b[2]*b[2]*c[0] + 2*D[6]*b[1]*b[2]*b[2]*c[1] + 2*D[7]*b[0]*c[0]*c[2]*c[2] - D[7]*b[0]*c[1]*c[2]*c[2] - D[7]*b[1]*c[0]*c[2]*c[2] + 2*D[7]*b[1]*c[1]*c[2]*c[2] + 2*D[7]*b[2]*c[0]*c[0]*c[2] - 2*D[7]*b[2]*c[0]*c[1]*c[2] + 2*D[7]*b[2]*c[1]*c[1]*c[2] + 2*D[8]*b[0]*b[0]*c[2]*c[2] - 2*D[8]*b[0]*b[1]*c[2]*c[2] + 4*D[8]*b[0]*b[2]*c[0]*c[2] - 2*D[8]*b[0]*b[2]*c[1]*c[2] + 2*D[8]*b[1]*b[1]*c[2]*c[2] - 2*D[8]*b[1]*b[2]*c[0]*c[2] + 4*D[8]*b[1]*b[2]*c[1]*c[2] + 2*D[8]*b[2]*b[2]*c[0]*c[0] - 2*D[8]*b[2]*b[2]*c[0]*c[1] + 2*D[8]*b[2]*b[2]*c[1]*c[1])/(192*delta)
};
    return K;
}


std::vector<double> GT9::get_DB(const std::vector<double>& D, const gp_Pnt& point) const{
    const size_t N = this->NODES_PER_ELEM;

    std::vector<gp_Pnt> p;
    for(size_t i = 0; i < N; ++i){
        const auto& n = this->nodes[i];
        p.push_back(n->point);
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    const double delta = 0.5*deltaM.Determinant();

    std::vector<double> a, b, c;
    a.reserve(N);
    b.reserve(N);
    c.reserve(N);
    for(size_t i = 0; i < N; ++i){
        const size_t j = (i + 1) % 3;
        const size_t k = (i + 2) % 3;

        a.push_back(p[j].X()*p[k].Y() - p[k].X()*p[j].Y());
        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }

    const double L0 = (a[0] + b[0]*point.X() + c[0]*point.Y())/(2*delta);
    const double L1 = (a[1] + b[1]*point.X() + c[1]*point.Y())/(2*delta);
    const double L2 = (a[2] + b[2]*point.X() + c[2]*point.Y())/(2*delta);

    std::vector<double> DB{
(D[0]*b[0] + D[2]*c[0])/(2*delta)
,
(D[1]*c[0] + D[2]*b[0])/(2*delta)
,
(-(D[0]*b[0]*b[1] + D[1]*c[0]*c[1] + D[2]*b[0]*c[1] + D[2]*b[1]*c[0])*L2 + (D[0]*b[0]*b[2] + D[1]*c[0]*c[2] + D[2]*b[0]*c[2] + D[2]*b[2]*c[0])*L1)/(4*delta)
,
(D[0]*b[1] + D[2]*c[1])/(2*delta)
,
(D[1]*c[1] + D[2]*b[1])/(2*delta)
,
((D[0]*b[0]*b[1] + D[1]*c[0]*c[1] + D[2]*b[0]*c[1] + D[2]*b[1]*c[0])*L2 - (D[0]*b[1]*b[2] + D[1]*c[1]*c[2] + D[2]*b[1]*c[2] + D[2]*b[2]*c[1])*L0)/(4*delta)
,
(D[0]*b[2] + D[2]*c[2])/(2*delta)
,
(D[1]*c[2] + D[2]*b[2])/(2*delta)
,
(-(D[0]*b[0]*b[2] + D[1]*c[0]*c[2] + D[2]*b[0]*c[2] + D[2]*b[2]*c[0])*L1 + (D[0]*b[1]*b[2] + D[1]*c[1]*c[2] + D[2]*b[1]*c[2] + D[2]*b[2]*c[1])*L0)/(4*delta)
,
(D[3]*b[0] + D[5]*c[0])/(2*delta)
,
(D[4]*c[0] + D[5]*b[0])/(2*delta)
,
(-(D[3]*b[0]*b[1] + D[4]*c[0]*c[1] + D[5]*b[0]*c[1] + D[5]*b[1]*c[0])*L2 + (D[3]*b[0]*b[2] + D[4]*c[0]*c[2] + D[5]*b[0]*c[2] + D[5]*b[2]*c[0])*L1)/(4*delta)
,
(D[3]*b[1] + D[5]*c[1])/(2*delta)
,
(D[4]*c[1] + D[5]*b[1])/(2*delta)
,
((D[3]*b[0]*b[1] + D[4]*c[0]*c[1] + D[5]*b[0]*c[1] + D[5]*b[1]*c[0])*L2 - (D[3]*b[1]*b[2] + D[4]*c[1]*c[2] + D[5]*b[1]*c[2] + D[5]*b[2]*c[1])*L0)/(4*delta)
,
(D[3]*b[2] + D[5]*c[2])/(2*delta)
,
(D[4]*c[2] + D[5]*b[2])/(2*delta)
,
(-(D[3]*b[0]*b[2] + D[4]*c[0]*c[2] + D[5]*b[0]*c[2] + D[5]*b[2]*c[0])*L1 + (D[3]*b[1]*b[2] + D[4]*c[1]*c[2] + D[5]*b[1]*c[2] + D[5]*b[2]*c[1])*L0)/(4*delta)
,
(D[6]*b[0] + D[8]*c[0])/(2*delta)
,
(D[7]*c[0] + D[8]*b[0])/(2*delta)
,
(-(D[6]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[0]*c[1] + D[8]*b[1]*c[0])*L2 + (D[6]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[0]*c[2] + D[8]*b[2]*c[0])*L1)/(4*delta)
,
(D[6]*b[1] + D[8]*c[1])/(2*delta)
,
(D[7]*c[1] + D[8]*b[1])/(2*delta)
,
((D[6]*b[0]*b[1] + D[7]*c[0]*c[1] + D[8]*b[0]*c[1] + D[8]*b[1]*c[0])*L2 - (D[6]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[1]*c[2] + D[8]*b[2]*c[1])*L0)/(4*delta)
,
(D[6]*b[2] + D[8]*c[2])/(2*delta)
,
(D[7]*c[2] + D[8]*b[2])/(2*delta)
,
(-(D[6]*b[0]*b[2] + D[7]*c[0]*c[2] + D[8]*b[0]*c[2] + D[8]*b[2]*c[0])*L1 + (D[6]*b[1]*b[2] + D[7]*c[1]*c[2] + D[8]*b[1]*c[2] + D[8]*b[2]*c[1])*L0)/(4*delta)
};

    return DB;
}

std::vector<double> GT9::get_Nf(const double t, const std::vector<gp_Pnt>& points) const{
    const size_t N = this->NODES_PER_ELEM;

    std::vector<gp_Pnt> p;
    p.reserve(N);
    for(size_t i = 0; i < N; ++i){
        const auto& n = this->nodes[i];
        p.push_back(n->point);
    }

    const gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    const double delta = 0.5*deltaM.Determinant();

    std::vector<double> a, b, c;
    a.reserve(N);
    b.reserve(N);
    c.reserve(N);
    for(size_t i = 0; i < N; ++i){
        const size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        a.push_back(p[j].X()*p[k].Y() - p[k].X()*p[j].Y());
        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }

    const double x[]{points[0].X(), points[1].X()};
    const double y[]{points[0].Y(), points[1].Y()};

    std::vector<double> Nf{
t*(2*a[0] + b[0]*x[0] + b[0]*x[1] + c[0]*y[0] + c[0]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
0
,
0
,
t*(2*a[0] + b[0]*x[0] + b[0]*x[1] + c[0]*y[0] + c[0]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1]*b[2] - 6*a[0]*a[2]*b[1] - 3*a[0]*b[1]*c[2]*y[0] - 3*a[0]*b[1]*c[2]*y[1] + 3*a[0]*b[2]*c[1]*y[0] + 3*a[0]*b[2]*c[1]*y[1] + 3*a[1]*b[0]*b[2]*x[0] + 3*a[1]*b[0]*b[2]*x[1] + 3*a[1]*b[2]*c[0]*y[0] + 3*a[1]*b[2]*c[0]*y[1] - 3*a[2]*b[0]*b[1]*x[0] - 3*a[2]*b[0]*b[1]*x[1] - 3*a[2]*b[1]*c[0]*y[0] - 3*a[2]*b[1]*c[0]*y[1] - 2*b[0]*b[1]*c[2]*x[0]*y[0] - b[0]*b[1]*c[2]*x[0]*y[1] - b[0]*b[1]*c[2]*x[1]*y[0] - 2*b[0]*b[1]*c[2]*x[1]*y[1] + 2*b[0]*b[2]*c[1]*x[0]*y[0] + b[0]*b[2]*c[1]*x[0]*y[1] + b[0]*b[2]*c[1]*x[1]*y[0] + 2*b[0]*b[2]*c[1]*x[1]*y[1] - 2*b[1]*c[0]*c[2]*y[0]*y[0] - 2*b[1]*c[0]*c[2]*y[0]*y[1] - 2*b[1]*c[0]*c[2]*y[1]*y[1] + 2*b[2]*c[0]*c[1]*y[0]*y[0] + 2*b[2]*c[0]*c[1]*y[0]*y[1] + 2*b[2]*c[0]*c[1]*y[1]*y[1])/(48*(delta*delta))
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[1]*c[2] - 6*a[0]*a[2]*c[1] + 3*a[0]*b[1]*c[2]*x[0] + 3*a[0]*b[1]*c[2]*x[1] - 3*a[0]*b[2]*c[1]*x[0] - 3*a[0]*b[2]*c[1]*x[1] + 3*a[1]*b[0]*c[2]*x[0] + 3*a[1]*b[0]*c[2]*x[1] + 3*a[1]*c[0]*c[2]*y[0] + 3*a[1]*c[0]*c[2]*y[1] - 3*a[2]*b[0]*c[1]*x[0] - 3*a[2]*b[0]*c[1]*x[1] - 3*a[2]*c[0]*c[1]*y[0] - 3*a[2]*c[0]*c[1]*y[1] + 2*b[0]*b[1]*c[2]*x[0]*x[0] + 2*b[0]*b[1]*c[2]*x[0]*x[1] + 2*b[0]*b[1]*c[2]*x[1]*x[1] - 2*b[0]*b[2]*c[1]*x[0]*x[0] - 2*b[0]*b[2]*c[1]*x[0]*x[1] - 2*b[0]*b[2]*c[1]*x[1]*x[1] + 2*b[1]*c[0]*c[2]*x[0]*y[0] + b[1]*c[0]*c[2]*x[0]*y[1] + b[1]*c[0]*c[2]*x[1]*y[0] + 2*b[1]*c[0]*c[2]*x[1]*y[1] - 2*b[2]*c[0]*c[1]*x[0]*y[0] - b[2]*c[0]*c[1]*x[0]*y[1] - b[2]*c[0]*c[1]*x[1]*y[0] - 2*b[2]*c[0]*c[1]*x[1]*y[1])/(48*(delta*delta))
,
t*(2*a[1] + b[1]*x[0] + b[1]*x[1] + c[1]*y[0] + c[1]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
0
,
0
,
t*(2*a[1] + b[1]*x[0] + b[1]*x[1] + c[1]*y[0] + c[1]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(-6*a[0]*a[1]*b[2] - 3*a[0]*b[1]*b[2]*x[0] - 3*a[0]*b[1]*b[2]*x[1] - 3*a[0]*b[2]*c[1]*y[0] - 3*a[0]*b[2]*c[1]*y[1] + 6*a[1]*a[2]*b[0] + 3*a[1]*b[0]*c[2]*y[0] + 3*a[1]*b[0]*c[2]*y[1] - 3*a[1]*b[2]*c[0]*y[0] - 3*a[1]*b[2]*c[0]*y[1] + 3*a[2]*b[0]*b[1]*x[0] + 3*a[2]*b[0]*b[1]*x[1] + 3*a[2]*b[0]*c[1]*y[0] + 3*a[2]*b[0]*c[1]*y[1] + 2*b[0]*b[1]*c[2]*x[0]*y[0] + b[0]*b[1]*c[2]*x[0]*y[1] + b[0]*b[1]*c[2]*x[1]*y[0] + 2*b[0]*b[1]*c[2]*x[1]*y[1] + 2*b[0]*c[1]*c[2]*y[0]*y[0] + 2*b[0]*c[1]*c[2]*y[0]*y[1] + 2*b[0]*c[1]*c[2]*y[1]*y[1] - 2*b[1]*b[2]*c[0]*x[0]*y[0] - b[1]*b[2]*c[0]*x[0]*y[1] - b[1]*b[2]*c[0]*x[1]*y[0] - 2*b[1]*b[2]*c[0]*x[1]*y[1] - 2*b[2]*c[0]*c[1]*y[0]*y[0] - 2*b[2]*c[0]*c[1]*y[0]*y[1] - 2*b[2]*c[0]*c[1]*y[1]*y[1])/(48*(delta*delta))
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(-6*a[0]*a[1]*c[2] - 3*a[0]*b[1]*c[2]*x[0] - 3*a[0]*b[1]*c[2]*x[1] - 3*a[0]*c[1]*c[2]*y[0] - 3*a[0]*c[1]*c[2]*y[1] + 6*a[1]*a[2]*c[0] - 3*a[1]*b[0]*c[2]*x[0] - 3*a[1]*b[0]*c[2]*x[1] + 3*a[1]*b[2]*c[0]*x[0] + 3*a[1]*b[2]*c[0]*x[1] + 3*a[2]*b[1]*c[0]*x[0] + 3*a[2]*b[1]*c[0]*x[1] + 3*a[2]*c[0]*c[1]*y[0] + 3*a[2]*c[0]*c[1]*y[1] - 2*b[0]*b[1]*c[2]*x[0]*x[0] - 2*b[0]*b[1]*c[2]*x[0]*x[1] - 2*b[0]*b[1]*c[2]*x[1]*x[1] - 2*b[0]*c[1]*c[2]*x[0]*y[0] - b[0]*c[1]*c[2]*x[0]*y[1] - b[0]*c[1]*c[2]*x[1]*y[0] - 2*b[0]*c[1]*c[2]*x[1]*y[1] + 2*b[1]*b[2]*c[0]*x[0]*x[0] + 2*b[1]*b[2]*c[0]*x[0]*x[1] + 2*b[1]*b[2]*c[0]*x[1]*x[1] + 2*b[2]*c[0]*c[1]*x[0]*y[0] + b[2]*c[0]*c[1]*x[0]*y[1] + b[2]*c[0]*c[1]*x[1]*y[0] + 2*b[2]*c[0]*c[1]*x[1]*y[1])/(48*(delta*delta))
,
t*(2*a[2] + b[2]*x[0] + b[2]*x[1] + c[2]*y[0] + c[2]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
0
,
0
,
t*(2*a[2] + b[2]*x[0] + b[2]*x[1] + c[2]*y[0] + c[2]*y[1])*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])/(4*delta)
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2]*b[1] + 3*a[0]*b[1]*b[2]*x[0] + 3*a[0]*b[1]*b[2]*x[1] + 3*a[0]*b[1]*c[2]*y[0] + 3*a[0]*b[1]*c[2]*y[1] - 6*a[1]*a[2]*b[0] - 3*a[1]*b[0]*b[2]*x[0] - 3*a[1]*b[0]*b[2]*x[1] - 3*a[1]*b[0]*c[2]*y[0] - 3*a[1]*b[0]*c[2]*y[1] - 3*a[2]*b[0]*c[1]*y[0] - 3*a[2]*b[0]*c[1]*y[1] + 3*a[2]*b[1]*c[0]*y[0] + 3*a[2]*b[1]*c[0]*y[1] - 2*b[0]*b[2]*c[1]*x[0]*y[0] - b[0]*b[2]*c[1]*x[0]*y[1] - b[0]*b[2]*c[1]*x[1]*y[0] - 2*b[0]*b[2]*c[1]*x[1]*y[1] - 2*b[0]*c[1]*c[2]*y[0]*y[0] - 2*b[0]*c[1]*c[2]*y[0]*y[1] - 2*b[0]*c[1]*c[2]*y[1]*y[1] + 2*b[1]*b[2]*c[0]*x[0]*y[0] + b[1]*b[2]*c[0]*x[0]*y[1] + b[1]*b[2]*c[0]*x[1]*y[0] + 2*b[1]*b[2]*c[0]*x[1]*y[1] + 2*b[1]*c[0]*c[2]*y[0]*y[0] + 2*b[1]*c[0]*c[2]*y[0]*y[1] + 2*b[1]*c[0]*c[2]*y[1]*y[1])/(48*(delta*delta))
,
t*std::sqrt(x[0]*x[0] - 2*x[0]*x[1] + x[1]*x[1] + y[0]*y[0] - 2*y[0]*y[1] + y[1]*y[1])*(6*a[0]*a[2]*c[1] + 3*a[0]*b[2]*c[1]*x[0] + 3*a[0]*b[2]*c[1]*x[1] + 3*a[0]*c[1]*c[2]*y[0] + 3*a[0]*c[1]*c[2]*y[1] - 6*a[1]*a[2]*c[0] - 3*a[1]*b[2]*c[0]*x[0] - 3*a[1]*b[2]*c[0]*x[1] - 3*a[1]*c[0]*c[2]*y[0] - 3*a[1]*c[0]*c[2]*y[1] + 3*a[2]*b[0]*c[1]*x[0] + 3*a[2]*b[0]*c[1]*x[1] - 3*a[2]*b[1]*c[0]*x[0] - 3*a[2]*b[1]*c[0]*x[1] + 2*b[0]*b[2]*c[1]*x[0]*x[0] + 2*b[0]*b[2]*c[1]*x[0]*x[1] + 2*b[0]*b[2]*c[1]*x[1]*x[1] + 2*b[0]*c[1]*c[2]*x[0]*y[0] + b[0]*c[1]*c[2]*x[0]*y[1] + b[0]*c[1]*c[2]*x[1]*y[0] + 2*b[0]*c[1]*c[2]*x[1]*y[1] - 2*b[1]*b[2]*c[0]*x[0]*x[0] - 2*b[1]*b[2]*c[0]*x[0]*x[1] - 2*b[1]*b[2]*c[0]*x[1]*x[1] - 2*b[1]*c[0]*c[2]*x[0]*y[0] - b[1]*c[0]*c[2]*x[0]*y[1] - b[1]*c[0]*c[2]*x[1]*y[0] - 2*b[1]*c[0]*c[2]*x[1]*y[1])/(48*(delta*delta))
    };

    return Nf;
}

std::vector<double> GT9::helmholtz_tensor(const double t, const double r) const{
    const size_t N = this->NODES_PER_ELEM;
    const double delta = this->get_volume(1);

    std::vector<gp_Pnt> p;
    for(size_t i = 0; i < N; ++i){
        const auto& n = this->nodes[i];
        p.push_back(n->point);
    }
    std::vector<double> b, c;
    for(size_t i = 0; i < N; ++i){
        size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }
    std::vector<double> h{
    t*(3*b[0]*b[0]*r*r + 3*c[0]*c[0]*r*r + 2*delta*delta)/(12*delta)
    ,
    t*(9*b[0]*b[1]*r*r + 9*c[0]*c[1]*r*r + 4*delta*delta)/(36*delta)
    ,
    t*(9*b[0]*b[2]*r*r + 9*c[0]*c[2]*r*r + 4*delta*delta)/(36*delta)
    ,
    t*(9*b[0]*b[1]*r*r + 9*c[0]*c[1]*r*r + 4*delta*delta)/(36*delta)
    ,
    t*(3*b[1]*b[1]*r*r + 3*c[1]*c[1]*r*r + 2*delta*delta)/(12*delta)
    ,
    t*(9*b[1]*b[2]*r*r + 9*c[1]*c[2]*r*r + 4*delta*delta)/(36*delta)
    ,
    t*(9*b[0]*b[2]*r*r + 9*c[0]*c[2]*r*r + 4*delta*delta)/(36*delta)
    ,
    t*(9*b[1]*b[2]*r*r + 9*c[1]*c[2]*r*r + 4*delta*delta)/(36*delta)
    ,
    t*(3*b[2]*b[2]*r*r + 3*c[2]*c[2]*r*r + 2*delta*delta)/(12*delta)
    };

    return h;
}

std::vector<double> GT9::helmholtz_vector(const double t) const{
    const double txdelta = this->get_volume(t);

    double Ni = txdelta/NODES_PER_ELEM;

    std::vector<double> NT{Ni, Ni, Ni};

    return NT;
}

}
