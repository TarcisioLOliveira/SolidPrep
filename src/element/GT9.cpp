/*
 *   Copyright (C) 2021 Tarc√≠sio Ladeia de Oliveira.
 *
 *   This file is part of SolidPrep
 *
 *   SolidPrep is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SolidPrep is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SolidPrep.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include "element/GT9.hpp"
#include "cblas.h"
#include "logger.hpp"
#include <vector>

namespace element{

GT9::GT9(ElementShape s):
    MeshElementCommon2DTri<GT9>(s.nodes)
    {}

std::vector<double> GT9::get_k(const std::vector<double>& D, const double t) const{

    size_t N = this->NODES_PER_ELEM;

    std::vector<gp_Pnt> p;
    for(auto n:this->nodes){
        p.push_back(n->point);
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    double delta = 0.5*std::abs(deltaM.Determinant());

    std::vector<double> a, b, c;
    for(size_t i = 0; i < N; ++i){
        size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        a.push_back(p[j].X()*p[k].Y() - p[k].X()*p[j].Y());
        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }

    double b0 = b[0];
    double b1 = b[1];
    double b2 = b[2];
    double c0 = c[0];
    double c1 = c[1];
    double c2 = c[2];
    
    double d0 = D[0];
    double d1 = D[1];
    double d2 = D[2];
    double d3 = D[3];
    double d4 = D[4];
    double d5 = D[5];
    double d6 = D[6];
    double d7 = D[7];
    double d8 = D[8];

    std::vector<double> K{
t*(b0*b0*d0 + b0*c0*d2 + b0*c0*d6 + c0*c0*d8)/(4*delta)
,
t*(b0*b0*d2 + b0*c0*d1 + b0*c0*d8 + c0*c0*d7)/(4*delta)
,
0.0416666666666667*t*(-b0*b0*b1*d0 + b0*b0*b2*d0 - b0*b0*c1*d2 + b0*b0*c2*d2 - b0*b1*c0*d2 - b0*b1*c0*d6 + b0*b2*c0*d2 + b0*b2*c0*d6 - b0*c0*c1*d1 - b0*c0*c1*d8 + b0*c0*c2*d1 + b0*c0*c2*d8 - b1*c0*c0*d8 + b2*c0*c0*d8 - c0*c0*c1*d7 + c0*c0*c2*d7)/delta
,
t*(b0*b1*d0 + b0*c1*d2 + b1*c0*d6 + c0*c1*d8)/(4*delta)
,
t*(b0*b1*d2 + b0*c1*d1 + b1*c0*d8 + c0*c1*d7)/(4*delta)
,
0.0416666666666667*t*(b0*b0*b1*d0 + b0*b0*c1*d2 - b0*b1*b2*d0 + b0*b1*c0*d2 + b0*b1*c0*d6 - b0*b1*c2*d2 - b0*b2*c1*d2 + b0*c0*c1*d1 + b0*c0*c1*d8 - b0*c1*c2*d1 - b1*b2*c0*d6 + b1*c0*c0*d8 - b1*c0*c2*d8 - b2*c0*c1*d8 + c0*c0*c1*d7 - c0*c1*c2*d7)/delta
,
t*(b0*b2*d0 + b0*c2*d2 + b2*c0*d6 + c0*c2*d8)/(4*delta)
,
t*(b0*b2*d2 + b0*c2*d1 + b2*c0*d8 + c0*c2*d7)/(4*delta)
,
0.0416666666666667*t*(-b0*b0*b2*d0 - b0*b0*c2*d2 + b0*b1*b2*d0 + b0*b1*c2*d2 - b0*b2*c0*d2 - b0*b2*c0*d6 + b0*b2*c1*d2 - b0*c0*c2*d1 - b0*c0*c2*d8 + b0*c1*c2*d1 + b1*b2*c0*d6 + b1*c0*c2*d8 - b2*c0*c0*d8 + b2*c0*c1*d8 - c0*c0*c2*d7 + c0*c1*c2*d7)/delta
,
t*(b0*b0*d6 + b0*c0*d3 + b0*c0*d8 + c0*c0*d5)/(4*delta)
,
t*(b0*b0*d8 + b0*c0*d5 + b0*c0*d7 + c0*c0*d4)/(4*delta)
,
0.0416666666666667*t*(-b0*b0*b1*d6 + b0*b0*b2*d6 - b0*b0*c1*d8 + b0*b0*c2*d8 - b0*b1*c0*d3 - b0*b1*c0*d8 + b0*b2*c0*d3 + b0*b2*c0*d8 - b0*c0*c1*d5 - b0*c0*c1*d7 + b0*c0*c2*d5 + b0*c0*c2*d7 - b1*c0*c0*d5 + b2*c0*c0*d5 - c0*c0*c1*d4 + c0*c0*c2*d4)/delta
,
t*(b0*b1*d6 + b0*c1*d8 + b1*c0*d3 + c0*c1*d5)/(4*delta)
,
t*(b0*b1*d8 + b0*c1*d7 + b1*c0*d5 + c0*c1*d4)/(4*delta)
,
0.0416666666666667*t*(b0*b0*b1*d6 + b0*b0*c1*d8 - b0*b1*b2*d6 + b0*b1*c0*d3 + b0*b1*c0*d8 - b0*b1*c2*d8 - b0*b2*c1*d8 + b0*c0*c1*d5 + b0*c0*c1*d7 - b0*c1*c2*d7 - b1*b2*c0*d3 + b1*c0*c0*d5 - b1*c0*c2*d5 - b2*c0*c1*d5 + c0*c0*c1*d4 - c0*c1*c2*d4)/delta
,
t*(b0*b2*d6 + b0*c2*d8 + b2*c0*d3 + c0*c2*d5)/(4*delta)
,
t*(b0*b2*d8 + b0*c2*d7 + b2*c0*d5 + c0*c2*d4)/(4*delta)
,
0.0416666666666667*t*(-b0*b0*b2*d6 - b0*b0*c2*d8 + b0*b1*b2*d6 + b0*b1*c2*d8 - b0*b2*c0*d3 - b0*b2*c0*d8 + b0*b2*c1*d8 - b0*c0*c2*d5 - b0*c0*c2*d7 + b0*c1*c2*d7 + b1*b2*c0*d3 + b1*c0*c2*d5 - b2*c0*c0*d5 + b2*c0*c1*d5 - c0*c0*c2*d4 + c0*c1*c2*d4)/delta
,
0.0416666666666667*t*(-b0*b0*b1*d0 + b0*b0*b2*d0 - b0*b0*c1*d6 + b0*b0*c2*d6 - b0*b1*c0*d2 - b0*b1*c0*d6 + b0*b2*c0*d2 + b0*b2*c0*d6 - b0*c0*c1*d3 - b0*c0*c1*d8 + b0*c0*c2*d3 + b0*c0*c2*d8 - b1*c0*c0*d8 + b2*c0*c0*d8 - c0*c0*c1*d5 + c0*c0*c2*d5)/delta
,
0.0416666666666667*t*(-b0*b0*b1*d2 + b0*b0*b2*d2 - b0*b0*c1*d8 + b0*b0*c2*d8 - b0*b1*c0*d1 - b0*b1*c0*d8 + b0*b2*c0*d1 + b0*b2*c0*d8 - b0*c0*c1*d5 - b0*c0*c1*d7 + b0*c0*c2*d5 + b0*c0*c2*d7 - b1*c0*c0*d7 + b2*c0*c0*d7 - c0*c0*c1*d4 + c0*c0*c2*d4)/delta
,
t*(0.0104166666666667*b0*b0*b1*b1*d0 - 0.0104166666666667*b0*b0*b1*b2*d0 + 0.0104166666666667*b0*b0*b1*c1*d2 + 0.0104166666666667*b0*b0*b1*c1*d6 - 0.00520833333333333*b0*b0*b1*c2*d2 - 0.00520833333333333*b0*b0*b1*c2*d6 + 0.0104166666666667*b0*b0*b2*b2*d0 - 0.00520833333333333*b0*b0*b2*c1*d2 - 0.00520833333333333*b0*b0*b2*c1*d6 + 0.0104166666666667*b0*b0*b2*c2*d2 + 0.0104166666666667*b0*b0*b2*c2*d6 + 0.0104166666666667*b0*b0*c1*c1*d8 - 0.0104166666666667*b0*b0*c1*c2*d8 + 0.0104166666666667*b0*b0*c2*c2*d8 + 0.0104166666666667*b0*b1*b1*c0*d2 + 0.0104166666666667*b0*b1*b1*c0*d6 - 0.0104166666666667*b0*b1*b2*c0*d2 - 0.0104166666666667*b0*b1*b2*c0*d6 + 0.0104166666666667*b0*b1*c0*c1*d1 + 0.0104166666666667*b0*b1*c0*c1*d3 + 0.0208333333333333*b0*b1*c0*c1*d8 - 0.00520833333333333*b0*b1*c0*c2*d1 - 0.00520833333333333*b0*b1*c0*c2*d3 - 0.0104166666666667*b0*b1*c0*c2*d8 + 0.0104166666666667*b0*b2*b2*c0*d2 + 0.0104166666666667*b0*b2*b2*c0*d6 - 0.00520833333333333*b0*b2*c0*c1*d1 - 0.00520833333333333*b0*b2*c0*c1*d3 - 0.0104166666666667*b0*b2*c0*c1*d8 + 0.0104166666666667*b0*b2*c0*c2*d1 + 0.0104166666666667*b0*b2*c0*c2*d3 + 0.0208333333333333*b0*b2*c0*c2*d8 + 0.0104166666666667*b0*c0*c1*c1*d5 + 0.0104166666666667*b0*c0*c1*c1*d7 - 0.0104166666666667*b0*c0*c1*c2*d5 - 0.0104166666666667*b0*c0*c1*c2*d7 + 0.0104166666666667*b0*c0*c2*c2*d5 + 0.0104166666666667*b0*c0*c2*c2*d7 + 0.0104166666666667*b1*b1*c0*c0*d8 - 0.0104166666666667*b1*b2*c0*c0*d8 + 0.0104166666666667*b1*c0*c0*c1*d5 + 0.0104166666666667*b1*c0*c0*c1*d7 - 0.00520833333333333*b1*c0*c0*c2*d5 - 0.00520833333333333*b1*c0*c0*c2*d7 + 0.0104166666666667*b2*b2*c0*c0*d8 - 0.00520833333333333*b2*c0*c0*c1*d5 - 0.00520833333333333*b2*c0*c0*c1*d7 + 0.0104166666666667*b2*c0*c0*c2*d5 + 0.0104166666666667*b2*c0*c0*c2*d7 + 0.0104166666666667*c0*c0*c1*c1*d4 - 0.0104166666666667*c0*c0*c1*c2*d4 + 0.0104166666666667*c0*c0*c2*c2*d4)/delta
,
0.0416666666666667*t*(-b0*b1*b1*d0 + b0*b1*b2*d0 - b0*b1*c1*d2 - b0*b1*c1*d6 + b0*b1*c2*d6 + b0*b2*c1*d2 - b0*c1*c1*d8 + b0*c1*c2*d8 - b1*b1*c0*d6 + b1*b2*c0*d6 - b1*c0*c1*d3 - b1*c0*c1*d8 + b1*c0*c2*d3 + b2*c0*c1*d8 - c0*c1*c1*d5 + c0*c1*c2*d5)/delta
,
0.0416666666666667*t*(-b0*b1*b1*d2 + b0*b1*b2*d2 - b0*b1*c1*d1 - b0*b1*c1*d8 + b0*b1*c2*d8 + b0*b2*c1*d1 - b0*c1*c1*d7 + b0*c1*c2*d7 - b1*b1*c0*d8 + b1*b2*c0*d8 - b1*c0*c1*d5 - b1*c0*c1*d7 + b1*c0*c2*d5 + b2*c0*c1*d7 - c0*c1*c1*d4 + c0*c1*c2*d4)/delta
,
t*(-0.0104166666666667*b0*b0*b1*b1*d0 + 0.00520833333333333*b0*b0*b1*b2*d0 - 0.0104166666666667*b0*b0*b1*c1*d2 - 0.0104166666666667*b0*b0*b1*c1*d6 + 0.00520833333333333*b0*b0*b1*c2*d6 + 0.00520833333333333*b0*b0*b2*c1*d2 - 0.0104166666666667*b0*b0*c1*c1*d8 + 0.00520833333333333*b0*b0*c1*c2*d8 + 0.00520833333333333*b0*b1*b1*b2*d0 - 0.0104166666666667*b0*b1*b1*c0*d2 - 0.0104166666666667*b0*b1*b1*c0*d6 + 0.00520833333333333*b0*b1*b1*c2*d2 - 0.00520833333333333*b0*b1*b2*b2*d0 + 0.00520833333333333*b0*b1*b2*c0*d2 + 0.00520833333333333*b0*b1*b2*c0*d6 + 0.00520833333333333*b0*b1*b2*c1*d2 + 0.00520833333333333*b0*b1*b2*c1*d6 - 0.00520833333333333*b0*b1*b2*c2*d2 - 0.00520833333333333*b0*b1*b2*c2*d6 - 0.0104166666666667*b0*b1*c0*c1*d1 - 0.0104166666666667*b0*b1*c0*c1*d3 - 0.0208333333333333*b0*b1*c0*c1*d8 + 0.00520833333333333*b0*b1*c0*c2*d3 + 0.00520833333333333*b0*b1*c0*c2*d8 + 0.00520833333333333*b0*b1*c1*c2*d1 + 0.00520833333333333*b0*b1*c1*c2*d8 - 0.00520833333333333*b0*b1*c2*c2*d8 - 0.00520833333333333*b0*b2*b2*c1*d2 + 0.00520833333333333*b0*b2*c0*c1*d1 + 0.00520833333333333*b0*b2*c0*c1*d8 + 0.00520833333333333*b0*b2*c1*c1*d8 - 0.00520833333333333*b0*b2*c1*c2*d1 - 0.00520833333333333*b0*b2*c1*c2*d8 - 0.0104166666666667*b0*c0*c1*c1*d5 - 0.0104166666666667*b0*c0*c1*c1*d7 + 0.00520833333333333*b0*c0*c1*c2*d5 + 0.00520833333333333*b0*c0*c1*c2*d7 + 0.00520833333333333*b0*c1*c1*c2*d7 - 0.00520833333333333*b0*c1*c2*c2*d7 + 0.00520833333333333*b1*b1*b2*c0*d6 - 0.0104166666666667*b1*b1*c0*c0*d8 + 0.00520833333333333*b1*b1*c0*c2*d8 - 0.00520833333333333*b1*b2*b2*c0*d6 + 0.00520833333333333*b1*b2*c0*c0*d8 + 0.00520833333333333*b1*b2*c0*c1*d3 + 0.00520833333333333*b1*b2*c0*c1*d8 - 0.00520833333333333*b1*b2*c0*c2*d3 - 0.00520833333333333*b1*b2*c0*c2*d8 - 0.0104166666666667*b1*c0*c0*c1*d5 - 0.0104166666666667*b1*c0*c0*c1*d7 + 0.00520833333333333*b1*c0*c0*c2*d5 + 0.00520833333333333*b1*c0*c1*c2*d5 + 0.00520833333333333*b1*c0*c1*c2*d7 - 0.00520833333333333*b1*c0*c2*c2*d5 - 0.00520833333333333*b2*b2*c0*c1*d8 + 0.00520833333333333*b2*c0*c0*c1*d7 + 0.00520833333333333*b2*c0*c1*c1*d5 - 0.00520833333333333*b2*c0*c1*c2*d5 - 0.00520833333333333*b2*c0*c1*c2*d7 - 0.0104166666666667*c0*c0*c1*c1*d4 + 0.00520833333333333*c0*c0*c1*c2*d4 + 0.00520833333333333*c0*c1*c1*c2*d4 - 0.00520833333333333*c0*c1*c2*c2*d4)/delta
,
0.0416666666666667*t*(-b0*b1*b2*d0 - b0*b1*c2*d2 + b0*b2*b2*d0 - b0*b2*c1*d6 + b0*b2*c2*d2 + b0*b2*c2*d6 - b0*c1*c2*d8 + b0*c2*c2*d8 - b1*b2*c0*d6 - b1*c0*c2*d8 + b2*b2*c0*d6 - b2*c0*c1*d3 + b2*c0*c2*d3 + b2*c0*c2*d8 - c0*c1*c2*d5 + c0*c2*c2*d5)/delta
,
0.0416666666666667*t*(-b0*b1*b2*d2 - b0*b1*c2*d1 + b0*b2*b2*d2 - b0*b2*c1*d8 + b0*b2*c2*d1 + b0*b2*c2*d8 - b0*c1*c2*d7 + b0*c2*c2*d7 - b1*b2*c0*d8 - b1*c0*c2*d7 + b2*b2*c0*d8 - b2*c0*c1*d5 + b2*c0*c2*d5 + b2*c0*c2*d7 - c0*c1*c2*d4 + c0*c2*c2*d4)/delta
,
t*(0.00520833333333333*b0*b0*b1*b2*d0 + 0.00520833333333333*b0*b0*b1*c2*d2 - 0.0104166666666667*b0*b0*b2*b2*d0 + 0.00520833333333333*b0*b0*b2*c1*d6 - 0.0104166666666667*b0*b0*b2*c2*d2 - 0.0104166666666667*b0*b0*b2*c2*d6 + 0.00520833333333333*b0*b0*c1*c2*d8 - 0.0104166666666667*b0*b0*c2*c2*d8 - 0.00520833333333333*b0*b1*b1*b2*d0 - 0.00520833333333333*b0*b1*b1*c2*d2 + 0.00520833333333333*b0*b1*b2*b2*d0 + 0.00520833333333333*b0*b1*b2*c0*d2 + 0.00520833333333333*b0*b1*b2*c0*d6 - 0.00520833333333333*b0*b1*b2*c1*d2 - 0.00520833333333333*b0*b1*b2*c1*d6 + 0.00520833333333333*b0*b1*b2*c2*d2 + 0.00520833333333333*b0*b1*b2*c2*d6 + 0.00520833333333333*b0*b1*c0*c2*d1 + 0.00520833333333333*b0*b1*c0*c2*d8 - 0.00520833333333333*b0*b1*c1*c2*d1 - 0.00520833333333333*b0*b1*c1*c2*d8 + 0.00520833333333333*b0*b1*c2*c2*d8 - 0.0104166666666667*b0*b2*b2*c0*d2 - 0.0104166666666667*b0*b2*b2*c0*d6 + 0.00520833333333333*b0*b2*b2*c1*d2 + 0.00520833333333333*b0*b2*c0*c1*d3 + 0.00520833333333333*b0*b2*c0*c1*d8 - 0.0104166666666667*b0*b2*c0*c2*d1 - 0.0104166666666667*b0*b2*c0*c2*d3 - 0.0208333333333333*b0*b2*c0*c2*d8 - 0.00520833333333333*b0*b2*c1*c1*d8 + 0.00520833333333333*b0*b2*c1*c2*d1 + 0.00520833333333333*b0*b2*c1*c2*d8 + 0.00520833333333333*b0*c0*c1*c2*d5 + 0.00520833333333333*b0*c0*c1*c2*d7 - 0.0104166666666667*b0*c0*c2*c2*d5 - 0.0104166666666667*b0*c0*c2*c2*d7 - 0.00520833333333333*b0*c1*c1*c2*d7 + 0.00520833333333333*b0*c1*c2*c2*d7 - 0.00520833333333333*b1*b1*b2*c0*d6 - 0.00520833333333333*b1*b1*c0*c2*d8 + 0.00520833333333333*b1*b2*b2*c0*d6 + 0.00520833333333333*b1*b2*c0*c0*d8 - 0.00520833333333333*b1*b2*c0*c1*d3 - 0.00520833333333333*b1*b2*c0*c1*d8 + 0.00520833333333333*b1*b2*c0*c2*d3 + 0.00520833333333333*b1*b2*c0*c2*d8 + 0.00520833333333333*b1*c0*c0*c2*d7 - 0.00520833333333333*b1*c0*c1*c2*d5 - 0.00520833333333333*b1*c0*c1*c2*d7 + 0.00520833333333333*b1*c0*c2*c2*d5 - 0.0104166666666667*b2*b2*c0*c0*d8 + 0.00520833333333333*b2*b2*c0*c1*d8 + 0.00520833333333333*b2*c0*c0*c1*d5 - 0.0104166666666667*b2*c0*c0*c2*d5 - 0.0104166666666667*b2*c0*c0*c2*d7 - 0.00520833333333333*b2*c0*c1*c1*d5 + 0.00520833333333333*b2*c0*c1*c2*d5 + 0.00520833333333333*b2*c0*c1*c2*d7 + 0.00520833333333333*c0*c0*c1*c2*d4 - 0.0104166666666667*c0*c0*c2*c2*d4 - 0.00520833333333333*c0*c1*c1*c2*d4 + 0.00520833333333333*c0*c1*c2*c2*d4)/delta
,
t*(b0*b1*d0 + b0*c1*d6 + b1*c0*d2 + c0*c1*d8)/(4*delta)
,
t*(b0*b1*d2 + b0*c1*d8 + b1*c0*d1 + c0*c1*d7)/(4*delta)
,
0.0416666666666667*t*(-b0*b1*b1*d0 + b0*b1*b2*d0 - b0*b1*c1*d2 - b0*b1*c1*d6 + b0*b1*c2*d2 + b0*b2*c1*d6 - b0*c1*c1*d8 + b0*c1*c2*d8 - b1*b1*c0*d2 + b1*b2*c0*d2 - b1*c0*c1*d1 - b1*c0*c1*d8 + b1*c0*c2*d1 + b2*c0*c1*d8 - c0*c1*c1*d7 + c0*c1*c2*d7)/delta
,
t*(b1*b1*d0 + b1*c1*d2 + b1*c1*d6 + c1*c1*d8)/(4*delta)
,
t*(b1*b1*d2 + b1*c1*d1 + b1*c1*d8 + c1*c1*d7)/(4*delta)
,
0.0416666666666667*t*(b0*b1*b1*d0 + b0*b1*c1*d2 + b0*b1*c1*d6 + b0*c1*c1*d8 - b1*b1*b2*d0 + b1*b1*c0*d2 - b1*b1*c2*d2 - b1*b2*c1*d2 - b1*b2*c1*d6 + b1*c0*c1*d1 + b1*c0*c1*d8 - b1*c1*c2*d1 - b1*c1*c2*d8 - b2*c1*c1*d8 + c0*c1*c1*d7 - c1*c1*c2*d7)/delta
,
t*(b1*b2*d0 + b1*c2*d2 + b2*c1*d6 + c1*c2*d8)/(4*delta)
,
t*(b1*b2*d2 + b1*c2*d1 + b2*c1*d8 + c1*c2*d7)/(4*delta)
,
0.0416666666666667*t*(-b0*b1*b2*d0 - b0*b1*c2*d2 - b0*b2*c1*d6 - b0*c1*c2*d8 + b1*b1*b2*d0 + b1*b1*c2*d2 - b1*b2*c0*d2 + b1*b2*c1*d2 + b1*b2*c1*d6 - b1*c0*c2*d1 + b1*c1*c2*d1 + b1*c1*c2*d8 - b2*c0*c1*d8 + b2*c1*c1*d8 - c0*c1*c2*d7 + c1*c1*c2*d7)/delta
,
t*(b0*b1*d6 + b0*c1*d3 + b1*c0*d8 + c0*c1*d5)/(4*delta)
,
t*(b0*b1*d8 + b0*c1*d5 + b1*c0*d7 + c0*c1*d4)/(4*delta)
,
0.0416666666666667*t*(-b0*b1*b1*d6 + b0*b1*b2*d6 - b0*b1*c1*d3 - b0*b1*c1*d8 + b0*b1*c2*d8 + b0*b2*c1*d3 - b0*c1*c1*d5 + b0*c1*c2*d5 - b1*b1*c0*d8 + b1*b2*c0*d8 - b1*c0*c1*d5 - b1*c0*c1*d7 + b1*c0*c2*d7 + b2*c0*c1*d5 - c0*c1*c1*d4 + c0*c1*c2*d4)/delta
,
t*(b1*b1*d6 + b1*c1*d3 + b1*c1*d8 + c1*c1*d5)/(4*delta)
,
t*(b1*b1*d8 + b1*c1*d5 + b1*c1*d7 + c1*c1*d4)/(4*delta)
,
0.0416666666666667*t*(b0*b1*b1*d6 + b0*b1*c1*d3 + b0*b1*c1*d8 + b0*c1*c1*d5 - b1*b1*b2*d6 + b1*b1*c0*d8 - b1*b1*c2*d8 - b1*b2*c1*d3 - b1*b2*c1*d8 + b1*c0*c1*d5 + b1*c0*c1*d7 - b1*c1*c2*d5 - b1*c1*c2*d7 - b2*c1*c1*d5 + c0*c1*c1*d4 - c1*c1*c2*d4)/delta
,
t*(b1*b2*d6 + b1*c2*d8 + b2*c1*d3 + c1*c2*d5)/(4*delta)
,
t*(b1*b2*d8 + b1*c2*d7 + b2*c1*d5 + c1*c2*d4)/(4*delta)
,
0.0416666666666667*t*(-b0*b1*b2*d6 - b0*b1*c2*d8 - b0*b2*c1*d3 - b0*c1*c2*d5 + b1*b1*b2*d6 + b1*b1*c2*d8 - b1*b2*c0*d8 + b1*b2*c1*d3 + b1*b2*c1*d8 - b1*c0*c2*d7 + b1*c1*c2*d5 + b1*c1*c2*d7 - b2*c0*c1*d5 + b2*c1*c1*d5 - c0*c1*c2*d4 + c1*c1*c2*d4)/delta
,
0.0416666666666667*t*(b0*b0*b1*d0 + b0*b0*c1*d6 - b0*b1*b2*d0 + b0*b1*c0*d2 + b0*b1*c0*d6 - b0*b1*c2*d6 - b0*b2*c1*d6 + b0*c0*c1*d3 + b0*c0*c1*d8 - b0*c1*c2*d3 - b1*b2*c0*d2 + b1*c0*c0*d8 - b1*c0*c2*d8 - b2*c0*c1*d8 + c0*c0*c1*d5 - c0*c1*c2*d5)/delta
,
0.0416666666666667*t*(b0*b0*b1*d2 + b0*b0*c1*d8 - b0*b1*b2*d2 + b0*b1*c0*d1 + b0*b1*c0*d8 - b0*b1*c2*d8 - b0*b2*c1*d8 + b0*c0*c1*d5 + b0*c0*c1*d7 - b0*c1*c2*d5 - b1*b2*c0*d1 + b1*c0*c0*d7 - b1*c0*c2*d7 - b2*c0*c1*d7 + c0*c0*c1*d4 - c0*c1*c2*d4)/delta
,
t*(-0.0104166666666667*b0*b0*b1*b1*d0 + 0.00520833333333333*b0*b0*b1*b2*d0 - 0.0104166666666667*b0*b0*b1*c1*d2 - 0.0104166666666667*b0*b0*b1*c1*d6 + 0.00520833333333333*b0*b0*b1*c2*d2 + 0.00520833333333333*b0*b0*b2*c1*d6 - 0.0104166666666667*b0*b0*c1*c1*d8 + 0.00520833333333333*b0*b0*c1*c2*d8 + 0.00520833333333333*b0*b1*b1*b2*d0 - 0.0104166666666667*b0*b1*b1*c0*d2 - 0.0104166666666667*b0*b1*b1*c0*d6 + 0.00520833333333333*b0*b1*b1*c2*d6 - 0.00520833333333333*b0*b1*b2*b2*d0 + 0.00520833333333333*b0*b1*b2*c0*d2 + 0.00520833333333333*b0*b1*b2*c0*d6 + 0.00520833333333333*b0*b1*b2*c1*d2 + 0.00520833333333333*b0*b1*b2*c1*d6 - 0.00520833333333333*b0*b1*b2*c2*d2 - 0.00520833333333333*b0*b1*b2*c2*d6 - 0.0104166666666667*b0*b1*c0*c1*d1 - 0.0104166666666667*b0*b1*c0*c1*d3 - 0.0208333333333333*b0*b1*c0*c1*d8 + 0.00520833333333333*b0*b1*c0*c2*d1 + 0.00520833333333333*b0*b1*c0*c2*d8 + 0.00520833333333333*b0*b1*c1*c2*d3 + 0.00520833333333333*b0*b1*c1*c2*d8 - 0.00520833333333333*b0*b1*c2*c2*d8 - 0.00520833333333333*b0*b2*b2*c1*d6 + 0.00520833333333333*b0*b2*c0*c1*d3 + 0.00520833333333333*b0*b2*c0*c1*d8 + 0.00520833333333333*b0*b2*c1*c1*d8 - 0.00520833333333333*b0*b2*c1*c2*d3 - 0.00520833333333333*b0*b2*c1*c2*d8 - 0.0104166666666667*b0*c0*c1*c1*d5 - 0.0104166666666667*b0*c0*c1*c1*d7 + 0.00520833333333333*b0*c0*c1*c2*d5 + 0.00520833333333333*b0*c0*c1*c2*d7 + 0.00520833333333333*b0*c1*c1*c2*d5 - 0.00520833333333333*b0*c1*c2*c2*d5 + 0.00520833333333333*b1*b1*b2*c0*d2 - 0.0104166666666667*b1*b1*c0*c0*d8 + 0.00520833333333333*b1*b1*c0*c2*d8 - 0.00520833333333333*b1*b2*b2*c0*d2 + 0.00520833333333333*b1*b2*c0*c0*d8 + 0.00520833333333333*b1*b2*c0*c1*d1 + 0.00520833333333333*b1*b2*c0*c1*d8 - 0.00520833333333333*b1*b2*c0*c2*d1 - 0.00520833333333333*b1*b2*c0*c2*d8 - 0.0104166666666667*b1*c0*c0*c1*d5 - 0.0104166666666667*b1*c0*c0*c1*d7 + 0.00520833333333333*b1*c0*c0*c2*d7 + 0.00520833333333333*b1*c0*c1*c2*d5 + 0.00520833333333333*b1*c0*c1*c2*d7 - 0.00520833333333333*b1*c0*c2*c2*d7 - 0.00520833333333333*b2*b2*c0*c1*d8 + 0.00520833333333333*b2*c0*c0*c1*d5 + 0.00520833333333333*b2*c0*c1*c1*d7 - 0.00520833333333333*b2*c0*c1*c2*d5 - 0.00520833333333333*b2*c0*c1*c2*d7 - 0.0104166666666667*c0*c0*c1*c1*d4 + 0.00520833333333333*c0*c0*c1*c2*d4 + 0.00520833333333333*c0*c1*c1*c2*d4 - 0.00520833333333333*c0*c1*c2*c2*d4)/delta
,
0.0416666666666667*t*(b0*b1*b1*d0 + b0*b1*c1*d2 + b0*b1*c1*d6 + b0*c1*c1*d8 - b1*b1*b2*d0 + b1*b1*c0*d6 - b1*b1*c2*d6 - b1*b2*c1*d2 - b1*b2*c1*d6 + b1*c0*c1*d3 + b1*c0*c1*d8 - b1*c1*c2*d3 - b1*c1*c2*d8 - b2*c1*c1*d8 + c0*c1*c1*d5 - c1*c1*c2*d5)/delta
,
0.0416666666666667*t*(b0*b1*b1*d2 + b0*b1*c1*d1 + b0*b1*c1*d8 + b0*c1*c1*d7 - b1*b1*b2*d2 + b1*b1*c0*d8 - b1*b1*c2*d8 - b1*b2*c1*d1 - b1*b2*c1*d8 + b1*c0*c1*d5 + b1*c0*c1*d7 - b1*c1*c2*d5 - b1*c1*c2*d7 - b2*c1*c1*d7 + c0*c1*c1*d4 - c1*c1*c2*d4)/delta
,
t*(0.0104166666666667*b0*b0*b1*b1*d0 + 0.0104166666666667*b0*b0*b1*c1*d2 + 0.0104166666666667*b0*b0*b1*c1*d6 + 0.0104166666666667*b0*b0*c1*c1*d8 - 0.0104166666666667*b0*b1*b1*b2*d0 + 0.0104166666666667*b0*b1*b1*c0*d2 + 0.0104166666666667*b0*b1*b1*c0*d6 - 0.00520833333333333*b0*b1*b1*c2*d2 - 0.00520833333333333*b0*b1*b1*c2*d6 - 0.0104166666666667*b0*b1*b2*c1*d2 - 0.0104166666666667*b0*b1*b2*c1*d6 + 0.0104166666666667*b0*b1*c0*c1*d1 + 0.0104166666666667*b0*b1*c0*c1*d3 + 0.0208333333333333*b0*b1*c0*c1*d8 - 0.00520833333333333*b0*b1*c1*c2*d1 - 0.00520833333333333*b0*b1*c1*c2*d3 - 0.0104166666666667*b0*b1*c1*c2*d8 - 0.0104166666666667*b0*b2*c1*c1*d8 + 0.0104166666666667*b0*c0*c1*c1*d5 + 0.0104166666666667*b0*c0*c1*c1*d7 - 0.00520833333333333*b0*c1*c1*c2*d5 - 0.00520833333333333*b0*c1*c1*c2*d7 + 0.0104166666666667*b1*b1*b2*b2*d0 - 0.00520833333333333*b1*b1*b2*c0*d2 - 0.00520833333333333*b1*b1*b2*c0*d6 + 0.0104166666666667*b1*b1*b2*c2*d2 + 0.0104166666666667*b1*b1*b2*c2*d6 + 0.0104166666666667*b1*b1*c0*c0*d8 - 0.0104166666666667*b1*b1*c0*c2*d8 + 0.0104166666666667*b1*b1*c2*c2*d8 + 0.0104166666666667*b1*b2*b2*c1*d2 + 0.0104166666666667*b1*b2*b2*c1*d6 - 0.00520833333333333*b1*b2*c0*c1*d1 - 0.00520833333333333*b1*b2*c0*c1*d3 - 0.0104166666666667*b1*b2*c0*c1*d8 + 0.0104166666666667*b1*b2*c1*c2*d1 + 0.0104166666666667*b1*b2*c1*c2*d3 + 0.0208333333333333*b1*b2*c1*c2*d8 + 0.0104166666666667*b1*c0*c0*c1*d5 + 0.0104166666666667*b1*c0*c0*c1*d7 - 0.0104166666666667*b1*c0*c1*c2*d5 - 0.0104166666666667*b1*c0*c1*c2*d7 + 0.0104166666666667*b1*c1*c2*c2*d5 + 0.0104166666666667*b1*c1*c2*c2*d7 + 0.0104166666666667*b2*b2*c1*c1*d8 - 0.00520833333333333*b2*c0*c1*c1*d5 - 0.00520833333333333*b2*c0*c1*c1*d7 + 0.0104166666666667*b2*c1*c1*c2*d5 + 0.0104166666666667*b2*c1*c1*c2*d7 + 0.0104166666666667*c0*c0*c1*c1*d4 - 0.0104166666666667*c0*c1*c1*c2*d4 + 0.0104166666666667*c1*c1*c2*c2*d4)/delta
,
0.0416666666666667*t*(b0*b1*b2*d0 + b0*b1*c2*d2 + b0*b2*c1*d6 + b0*c1*c2*d8 - b1*b2*b2*d0 + b1*b2*c0*d6 - b1*b2*c2*d2 - b1*b2*c2*d6 + b1*c0*c2*d8 - b1*c2*c2*d8 - b2*b2*c1*d6 + b2*c0*c1*d3 - b2*c1*c2*d3 - b2*c1*c2*d8 + c0*c1*c2*d5 - c1*c2*c2*d5)/delta
,
0.0416666666666667*t*(b0*b1*b2*d2 + b0*b1*c2*d1 + b0*b2*c1*d8 + b0*c1*c2*d7 - b1*b2*b2*d2 + b1*b2*c0*d8 - b1*b2*c2*d1 - b1*b2*c2*d8 + b1*c0*c2*d7 - b1*c2*c2*d7 - b2*b2*c1*d8 + b2*c0*c1*d5 - b2*c1*c2*d5 - b2*c1*c2*d7 + c0*c1*c2*d4 - c1*c2*c2*d4)/delta
,
t*(-0.00520833333333333*b0*b0*b1*b2*d0 - 0.00520833333333333*b0*b0*b1*c2*d2 - 0.00520833333333333*b0*b0*b2*c1*d6 - 0.00520833333333333*b0*b0*c1*c2*d8 + 0.00520833333333333*b0*b1*b1*b2*d0 + 0.00520833333333333*b0*b1*b1*c2*d2 + 0.00520833333333333*b0*b1*b2*b2*d0 - 0.00520833333333333*b0*b1*b2*c0*d2 - 0.00520833333333333*b0*b1*b2*c0*d6 + 0.00520833333333333*b0*b1*b2*c1*d2 + 0.00520833333333333*b0*b1*b2*c1*d6 + 0.00520833333333333*b0*b1*b2*c2*d2 + 0.00520833333333333*b0*b1*b2*c2*d6 - 0.00520833333333333*b0*b1*c0*c2*d1 - 0.00520833333333333*b0*b1*c0*c2*d8 + 0.00520833333333333*b0*b1*c1*c2*d1 + 0.00520833333333333*b0*b1*c1*c2*d8 + 0.00520833333333333*b0*b1*c2*c2*d8 + 0.00520833333333333*b0*b2*b2*c1*d6 - 0.00520833333333333*b0*b2*c0*c1*d3 - 0.00520833333333333*b0*b2*c0*c1*d8 + 0.00520833333333333*b0*b2*c1*c1*d8 + 0.00520833333333333*b0*b2*c1*c2*d3 + 0.00520833333333333*b0*b2*c1*c2*d8 - 0.00520833333333333*b0*c0*c1*c2*d5 - 0.00520833333333333*b0*c0*c1*c2*d7 + 0.00520833333333333*b0*c1*c1*c2*d7 + 0.00520833333333333*b0*c1*c2*c2*d5 - 0.0104166666666667*b1*b1*b2*b2*d0 + 0.00520833333333333*b1*b1*b2*c0*d6 - 0.0104166666666667*b1*b1*b2*c2*d2 - 0.0104166666666667*b1*b1*b2*c2*d6 + 0.00520833333333333*b1*b1*c0*c2*d8 - 0.0104166666666667*b1*b1*c2*c2*d8 + 0.00520833333333333*b1*b2*b2*c0*d2 - 0.0104166666666667*b1*b2*b2*c1*d2 - 0.0104166666666667*b1*b2*b2*c1*d6 - 0.00520833333333333*b1*b2*c0*c0*d8 + 0.00520833333333333*b1*b2*c0*c1*d3 + 0.00520833333333333*b1*b2*c0*c1*d8 + 0.00520833333333333*b1*b2*c0*c2*d1 + 0.00520833333333333*b1*b2*c0*c2*d8 - 0.0104166666666667*b1*b2*c1*c2*d1 - 0.0104166666666667*b1*b2*c1*c2*d3 - 0.0208333333333333*b1*b2*c1*c2*d8 - 0.00520833333333333*b1*c0*c0*c2*d7 + 0.00520833333333333*b1*c0*c1*c2*d5 + 0.00520833333333333*b1*c0*c1*c2*d7 + 0.00520833333333333*b1*c0*c2*c2*d7 - 0.0104166666666667*b1*c1*c2*c2*d5 - 0.0104166666666667*b1*c1*c2*c2*d7 + 0.00520833333333333*b2*b2*c0*c1*d8 - 0.0104166666666667*b2*b2*c1*c1*d8 - 0.00520833333333333*b2*c0*c0*c1*d5 + 0.00520833333333333*b2*c0*c1*c1*d5 + 0.00520833333333333*b2*c0*c1*c2*d5 + 0.00520833333333333*b2*c0*c1*c2*d7 - 0.0104166666666667*b2*c1*c1*c2*d5 - 0.0104166666666667*b2*c1*c1*c2*d7 - 0.00520833333333333*c0*c0*c1*c2*d4 + 0.00520833333333333*c0*c1*c1*c2*d4 + 0.00520833333333333*c0*c1*c2*c2*d4 - 0.0104166666666667*c1*c1*c2*c2*d4)/delta
,
t*(b0*b2*d0 + b0*c2*d6 + b2*c0*d2 + c0*c2*d8)/(4*delta)
,
t*(b0*b2*d2 + b0*c2*d8 + b2*c0*d1 + c0*c2*d7)/(4*delta)
,
0.0416666666666667*t*(-b0*b1*b2*d0 - b0*b1*c2*d6 + b0*b2*b2*d0 - b0*b2*c1*d2 + b0*b2*c2*d2 + b0*b2*c2*d6 - b0*c1*c2*d8 + b0*c2*c2*d8 - b1*b2*c0*d2 - b1*c0*c2*d8 + b2*b2*c0*d2 - b2*c0*c1*d1 + b2*c0*c2*d1 + b2*c0*c2*d8 - c0*c1*c2*d7 + c0*c2*c2*d7)/delta
,
t*(b1*b2*d0 + b1*c2*d6 + b2*c1*d2 + c1*c2*d8)/(4*delta)
,
t*(b1*b2*d2 + b1*c2*d8 + b2*c1*d1 + c1*c2*d7)/(4*delta)
,
0.0416666666666667*t*(b0*b1*b2*d0 + b0*b1*c2*d6 + b0*b2*c1*d2 + b0*c1*c2*d8 - b1*b2*b2*d0 + b1*b2*c0*d2 - b1*b2*c2*d2 - b1*b2*c2*d6 + b1*c0*c2*d8 - b1*c2*c2*d8 - b2*b2*c1*d2 + b2*c0*c1*d1 - b2*c1*c2*d1 - b2*c1*c2*d8 + c0*c1*c2*d7 - c1*c2*c2*d7)/delta
,
t*(b2*b2*d0 + b2*c2*d2 + b2*c2*d6 + c2*c2*d8)/(4*delta)
,
t*(b2*b2*d2 + b2*c2*d1 + b2*c2*d8 + c2*c2*d7)/(4*delta)
,
0.0416666666666667*t*(-b0*b2*b2*d0 - b0*b2*c2*d2 - b0*b2*c2*d6 - b0*c2*c2*d8 + b1*b2*b2*d0 + b1*b2*c2*d2 + b1*b2*c2*d6 + b1*c2*c2*d8 - b2*b2*c0*d2 + b2*b2*c1*d2 - b2*c0*c2*d1 - b2*c0*c2*d8 + b2*c1*c2*d1 + b2*c1*c2*d8 - c0*c2*c2*d7 + c1*c2*c2*d7)/delta
,
t*(b0*b2*d6 + b0*c2*d3 + b2*c0*d8 + c0*c2*d5)/(4*delta)
,
t*(b0*b2*d8 + b0*c2*d5 + b2*c0*d7 + c0*c2*d4)/(4*delta)
,
0.0416666666666667*t*(-b0*b1*b2*d6 - b0*b1*c2*d3 + b0*b2*b2*d6 - b0*b2*c1*d8 + b0*b2*c2*d3 + b0*b2*c2*d8 - b0*c1*c2*d5 + b0*c2*c2*d5 - b1*b2*c0*d8 - b1*c0*c2*d5 + b2*b2*c0*d8 - b2*c0*c1*d7 + b2*c0*c2*d5 + b2*c0*c2*d7 - c0*c1*c2*d4 + c0*c2*c2*d4)/delta
,
t*(b1*b2*d6 + b1*c2*d3 + b2*c1*d8 + c1*c2*d5)/(4*delta)
,
t*(b1*b2*d8 + b1*c2*d5 + b2*c1*d7 + c1*c2*d4)/(4*delta)
,
0.0416666666666667*t*(b0*b1*b2*d6 + b0*b1*c2*d3 + b0*b2*c1*d8 + b0*c1*c2*d5 - b1*b2*b2*d6 + b1*b2*c0*d8 - b1*b2*c2*d3 - b1*b2*c2*d8 + b1*c0*c2*d5 - b1*c2*c2*d5 - b2*b2*c1*d8 + b2*c0*c1*d7 - b2*c1*c2*d5 - b2*c1*c2*d7 + c0*c1*c2*d4 - c1*c2*c2*d4)/delta
,
t*(b2*b2*d6 + b2*c2*d3 + b2*c2*d8 + c2*c2*d5)/(4*delta)
,
t*(b2*b2*d8 + b2*c2*d5 + b2*c2*d7 + c2*c2*d4)/(4*delta)
,
0.0416666666666667*t*(-b0*b2*b2*d6 - b0*b2*c2*d3 - b0*b2*c2*d8 - b0*c2*c2*d5 + b1*b2*b2*d6 + b1*b2*c2*d3 + b1*b2*c2*d8 + b1*c2*c2*d5 - b2*b2*c0*d8 + b2*b2*c1*d8 - b2*c0*c2*d5 - b2*c0*c2*d7 + b2*c1*c2*d5 + b2*c1*c2*d7 - c0*c2*c2*d4 + c1*c2*c2*d4)/delta
,
0.0416666666666667*t*(-b0*b0*b2*d0 - b0*b0*c2*d6 + b0*b1*b2*d0 + b0*b1*c2*d6 - b0*b2*c0*d2 - b0*b2*c0*d6 + b0*b2*c1*d6 - b0*c0*c2*d3 - b0*c0*c2*d8 + b0*c1*c2*d3 + b1*b2*c0*d2 + b1*c0*c2*d8 - b2*c0*c0*d8 + b2*c0*c1*d8 - c0*c0*c2*d5 + c0*c1*c2*d5)/delta
,
0.0416666666666667*t*(-b0*b0*b2*d2 - b0*b0*c2*d8 + b0*b1*b2*d2 + b0*b1*c2*d8 - b0*b2*c0*d1 - b0*b2*c0*d8 + b0*b2*c1*d8 - b0*c0*c2*d5 - b0*c0*c2*d7 + b0*c1*c2*d5 + b1*b2*c0*d1 + b1*c0*c2*d7 - b2*c0*c0*d7 + b2*c0*c1*d7 - c0*c0*c2*d4 + c0*c1*c2*d4)/delta
,
t*(0.00520833333333333*b0*b0*b1*b2*d0 + 0.00520833333333333*b0*b0*b1*c2*d6 - 0.0104166666666667*b0*b0*b2*b2*d0 + 0.00520833333333333*b0*b0*b2*c1*d2 - 0.0104166666666667*b0*b0*b2*c2*d2 - 0.0104166666666667*b0*b0*b2*c2*d6 + 0.00520833333333333*b0*b0*c1*c2*d8 - 0.0104166666666667*b0*b0*c2*c2*d8 - 0.00520833333333333*b0*b1*b1*b2*d0 - 0.00520833333333333*b0*b1*b1*c2*d6 + 0.00520833333333333*b0*b1*b2*b2*d0 + 0.00520833333333333*b0*b1*b2*c0*d2 + 0.00520833333333333*b0*b1*b2*c0*d6 - 0.00520833333333333*b0*b1*b2*c1*d2 - 0.00520833333333333*b0*b1*b2*c1*d6 + 0.00520833333333333*b0*b1*b2*c2*d2 + 0.00520833333333333*b0*b1*b2*c2*d6 + 0.00520833333333333*b0*b1*c0*c2*d3 + 0.00520833333333333*b0*b1*c0*c2*d8 - 0.00520833333333333*b0*b1*c1*c2*d3 - 0.00520833333333333*b0*b1*c1*c2*d8 + 0.00520833333333333*b0*b1*c2*c2*d8 - 0.0104166666666667*b0*b2*b2*c0*d2 - 0.0104166666666667*b0*b2*b2*c0*d6 + 0.00520833333333333*b0*b2*b2*c1*d6 + 0.00520833333333333*b0*b2*c0*c1*d1 + 0.00520833333333333*b0*b2*c0*c1*d8 - 0.0104166666666667*b0*b2*c0*c2*d1 - 0.0104166666666667*b0*b2*c0*c2*d3 - 0.0208333333333333*b0*b2*c0*c2*d8 - 0.00520833333333333*b0*b2*c1*c1*d8 + 0.00520833333333333*b0*b2*c1*c2*d3 + 0.00520833333333333*b0*b2*c1*c2*d8 + 0.00520833333333333*b0*c0*c1*c2*d5 + 0.00520833333333333*b0*c0*c1*c2*d7 - 0.0104166666666667*b0*c0*c2*c2*d5 - 0.0104166666666667*b0*c0*c2*c2*d7 - 0.00520833333333333*b0*c1*c1*c2*d5 + 0.00520833333333333*b0*c1*c2*c2*d5 - 0.00520833333333333*b1*b1*b2*c0*d2 - 0.00520833333333333*b1*b1*c0*c2*d8 + 0.00520833333333333*b1*b2*b2*c0*d2 + 0.00520833333333333*b1*b2*c0*c0*d8 - 0.00520833333333333*b1*b2*c0*c1*d1 - 0.00520833333333333*b1*b2*c0*c1*d8 + 0.00520833333333333*b1*b2*c0*c2*d1 + 0.00520833333333333*b1*b2*c0*c2*d8 + 0.00520833333333333*b1*c0*c0*c2*d5 - 0.00520833333333333*b1*c0*c1*c2*d5 - 0.00520833333333333*b1*c0*c1*c2*d7 + 0.00520833333333333*b1*c0*c2*c2*d7 - 0.0104166666666667*b2*b2*c0*c0*d8 + 0.00520833333333333*b2*b2*c0*c1*d8 + 0.00520833333333333*b2*c0*c0*c1*d7 - 0.0104166666666667*b2*c0*c0*c2*d5 - 0.0104166666666667*b2*c0*c0*c2*d7 - 0.00520833333333333*b2*c0*c1*c1*d7 + 0.00520833333333333*b2*c0*c1*c2*d5 + 0.00520833333333333*b2*c0*c1*c2*d7 + 0.00520833333333333*c0*c0*c1*c2*d4 - 0.0104166666666667*c0*c0*c2*c2*d4 - 0.00520833333333333*c0*c1*c1*c2*d4 + 0.00520833333333333*c0*c1*c2*c2*d4)/delta
,
0.0416666666666667*t*(-b0*b1*b2*d0 - b0*b1*c2*d6 - b0*b2*c1*d2 - b0*c1*c2*d8 + b1*b1*b2*d0 + b1*b1*c2*d6 - b1*b2*c0*d6 + b1*b2*c1*d2 + b1*b2*c1*d6 - b1*c0*c2*d3 + b1*c1*c2*d3 + b1*c1*c2*d8 - b2*c0*c1*d8 + b2*c1*c1*d8 - c0*c1*c2*d5 + c1*c1*c2*d5)/delta
,
0.0416666666666667*t*(-b0*b1*b2*d2 - b0*b1*c2*d8 - b0*b2*c1*d1 - b0*c1*c2*d7 + b1*b1*b2*d2 + b1*b1*c2*d8 - b1*b2*c0*d8 + b1*b2*c1*d1 + b1*b2*c1*d8 - b1*c0*c2*d5 + b1*c1*c2*d5 + b1*c1*c2*d7 - b2*c0*c1*d7 + b2*c1*c1*d7 - c0*c1*c2*d4 + c1*c1*c2*d4)/delta
,
t*(-0.00520833333333333*b0*b0*b1*b2*d0 - 0.00520833333333333*b0*b0*b1*c2*d6 - 0.00520833333333333*b0*b0*b2*c1*d2 - 0.00520833333333333*b0*b0*c1*c2*d8 + 0.00520833333333333*b0*b1*b1*b2*d0 + 0.00520833333333333*b0*b1*b1*c2*d6 + 0.00520833333333333*b0*b1*b2*b2*d0 - 0.00520833333333333*b0*b1*b2*c0*d2 - 0.00520833333333333*b0*b1*b2*c0*d6 + 0.00520833333333333*b0*b1*b2*c1*d2 + 0.00520833333333333*b0*b1*b2*c1*d6 + 0.00520833333333333*b0*b1*b2*c2*d2 + 0.00520833333333333*b0*b1*b2*c2*d6 - 0.00520833333333333*b0*b1*c0*c2*d3 - 0.00520833333333333*b0*b1*c0*c2*d8 + 0.00520833333333333*b0*b1*c1*c2*d3 + 0.00520833333333333*b0*b1*c1*c2*d8 + 0.00520833333333333*b0*b1*c2*c2*d8 + 0.00520833333333333*b0*b2*b2*c1*d2 - 0.00520833333333333*b0*b2*c0*c1*d1 - 0.00520833333333333*b0*b2*c0*c1*d8 + 0.00520833333333333*b0*b2*c1*c1*d8 + 0.00520833333333333*b0*b2*c1*c2*d1 + 0.00520833333333333*b0*b2*c1*c2*d8 - 0.00520833333333333*b0*c0*c1*c2*d5 - 0.00520833333333333*b0*c0*c1*c2*d7 + 0.00520833333333333*b0*c1*c1*c2*d5 + 0.00520833333333333*b0*c1*c2*c2*d7 - 0.0104166666666667*b1*b1*b2*b2*d0 + 0.00520833333333333*b1*b1*b2*c0*d2 - 0.0104166666666667*b1*b1*b2*c2*d2 - 0.0104166666666667*b1*b1*b2*c2*d6 + 0.00520833333333333*b1*b1*c0*c2*d8 - 0.0104166666666667*b1*b1*c2*c2*d8 + 0.00520833333333333*b1*b2*b2*c0*d6 - 0.0104166666666667*b1*b2*b2*c1*d2 - 0.0104166666666667*b1*b2*b2*c1*d6 - 0.00520833333333333*b1*b2*c0*c0*d8 + 0.00520833333333333*b1*b2*c0*c1*d1 + 0.00520833333333333*b1*b2*c0*c1*d8 + 0.00520833333333333*b1*b2*c0*c2*d3 + 0.00520833333333333*b1*b2*c0*c2*d8 - 0.0104166666666667*b1*b2*c1*c2*d1 - 0.0104166666666667*b1*b2*c1*c2*d3 - 0.0208333333333333*b1*b2*c1*c2*d8 - 0.00520833333333333*b1*c0*c0*c2*d5 + 0.00520833333333333*b1*c0*c1*c2*d5 + 0.00520833333333333*b1*c0*c1*c2*d7 + 0.00520833333333333*b1*c0*c2*c2*d5 - 0.0104166666666667*b1*c1*c2*c2*d5 - 0.0104166666666667*b1*c1*c2*c2*d7 + 0.00520833333333333*b2*b2*c0*c1*d8 - 0.0104166666666667*b2*b2*c1*c1*d8 - 0.00520833333333333*b2*c0*c0*c1*d7 + 0.00520833333333333*b2*c0*c1*c1*d7 + 0.00520833333333333*b2*c0*c1*c2*d5 + 0.00520833333333333*b2*c0*c1*c2*d7 - 0.0104166666666667*b2*c1*c1*c2*d5 - 0.0104166666666667*b2*c1*c1*c2*d7 - 0.00520833333333333*c0*c0*c1*c2*d4 + 0.00520833333333333*c0*c1*c1*c2*d4 + 0.00520833333333333*c0*c1*c2*c2*d4 - 0.0104166666666667*c1*c1*c2*c2*d4)/delta
,
0.0416666666666667*t*(-b0*b2*b2*d0 - b0*b2*c2*d2 - b0*b2*c2*d6 - b0*c2*c2*d8 + b1*b2*b2*d0 + b1*b2*c2*d2 + b1*b2*c2*d6 + b1*c2*c2*d8 - b2*b2*c0*d6 + b2*b2*c1*d6 - b2*c0*c2*d3 - b2*c0*c2*d8 + b2*c1*c2*d3 + b2*c1*c2*d8 - c0*c2*c2*d5 + c1*c2*c2*d5)/delta
,
0.0416666666666667*t*(-b0*b2*b2*d2 - b0*b2*c2*d1 - b0*b2*c2*d8 - b0*c2*c2*d7 + b1*b2*b2*d2 + b1*b2*c2*d1 + b1*b2*c2*d8 + b1*c2*c2*d7 - b2*b2*c0*d8 + b2*b2*c1*d8 - b2*c0*c2*d5 - b2*c0*c2*d7 + b2*c1*c2*d5 + b2*c1*c2*d7 - c0*c2*c2*d4 + c1*c2*c2*d4)/delta
,
t*(0.0104166666666667*b0*b0*b2*b2*d0 + 0.0104166666666667*b0*b0*b2*c2*d2 + 0.0104166666666667*b0*b0*b2*c2*d6 + 0.0104166666666667*b0*b0*c2*c2*d8 - 0.0104166666666667*b0*b1*b2*b2*d0 - 0.0104166666666667*b0*b1*b2*c2*d2 - 0.0104166666666667*b0*b1*b2*c2*d6 - 0.0104166666666667*b0*b1*c2*c2*d8 + 0.0104166666666667*b0*b2*b2*c0*d2 + 0.0104166666666667*b0*b2*b2*c0*d6 - 0.00520833333333333*b0*b2*b2*c1*d2 - 0.00520833333333333*b0*b2*b2*c1*d6 + 0.0104166666666667*b0*b2*c0*c2*d1 + 0.0104166666666667*b0*b2*c0*c2*d3 + 0.0208333333333333*b0*b2*c0*c2*d8 - 0.00520833333333333*b0*b2*c1*c2*d1 - 0.00520833333333333*b0*b2*c1*c2*d3 - 0.0104166666666667*b0*b2*c1*c2*d8 + 0.0104166666666667*b0*c0*c2*c2*d5 + 0.0104166666666667*b0*c0*c2*c2*d7 - 0.00520833333333333*b0*c1*c2*c2*d5 - 0.00520833333333333*b0*c1*c2*c2*d7 + 0.0104166666666667*b1*b1*b2*b2*d0 + 0.0104166666666667*b1*b1*b2*c2*d2 + 0.0104166666666667*b1*b1*b2*c2*d6 + 0.0104166666666667*b1*b1*c2*c2*d8 - 0.00520833333333333*b1*b2*b2*c0*d2 - 0.00520833333333333*b1*b2*b2*c0*d6 + 0.0104166666666667*b1*b2*b2*c1*d2 + 0.0104166666666667*b1*b2*b2*c1*d6 - 0.00520833333333333*b1*b2*c0*c2*d1 - 0.00520833333333333*b1*b2*c0*c2*d3 - 0.0104166666666667*b1*b2*c0*c2*d8 + 0.0104166666666667*b1*b2*c1*c2*d1 + 0.0104166666666667*b1*b2*c1*c2*d3 + 0.0208333333333333*b1*b2*c1*c2*d8 - 0.00520833333333333*b1*c0*c2*c2*d5 - 0.00520833333333333*b1*c0*c2*c2*d7 + 0.0104166666666667*b1*c1*c2*c2*d5 + 0.0104166666666667*b1*c1*c2*c2*d7 + 0.0104166666666667*b2*b2*c0*c0*d8 - 0.0104166666666667*b2*b2*c0*c1*d8 + 0.0104166666666667*b2*b2*c1*c1*d8 + 0.0104166666666667*b2*c0*c0*c2*d5 + 0.0104166666666667*b2*c0*c0*c2*d7 - 0.0104166666666667*b2*c0*c1*c2*d5 - 0.0104166666666667*b2*c0*c1*c2*d7 + 0.0104166666666667*b2*c1*c1*c2*d5 + 0.0104166666666667*b2*c1*c1*c2*d7 + 0.0104166666666667*c0*c0*c2*c2*d4 - 0.0104166666666667*c0*c1*c2*c2*d4 + 0.0104166666666667*c1*c1*c2*c2*d4)/delta

};
    return K;
}


std::vector<double> GT9::get_DB(const std::vector<double>& D, const gp_Pnt& point) const{
    size_t N = this->nodes.size();

    std::vector<gp_Pnt> p;
    for(auto n:this->nodes){
        p.push_back(n->point);
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    double delta = 0.5*deltaM.Determinant();

    std::vector<double> a, b, c;
    for(size_t i = 0; i < N; ++i){
        size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        a.push_back(p[j].X()*p[k].Y() - p[k].X()*p[j].Y());
        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }

    double L0 = (a[0] + b[0]*point.X() + c[0]*point.Y())/(2*delta);
    double L1 = (a[1] + b[1]*point.X() + c[1]*point.Y())/(2*delta);
    double L2 = (a[2] + b[2]*point.X() + c[2]*point.Y())/(2*delta);

    double b0 = b[0];
    double b1 = b[1];
    double b2 = b[2];
    double c0 = c[0];
    double c1 = c[1];
    double c2 = c[2];
    
    double d0 = D[0];
    double d1 = D[1];
    double d2 = D[2];
    double d3 = D[3];
    double d4 = D[4];
    double d5 = D[5];
    double d6 = D[6];
    double d7 = D[7];
    double d8 = D[8];

    std::vector<double> DB{
(b0*d0 + c0*d2)/(2*delta)
,
(b0*d2 + c0*d1)/(2*delta)
,
0.25*(-(b0*b1*d0 + b0*c1*d2 + b1*c0*d2 + c0*c1*d1)*L2 + (b0*b2*d0 + b0*c2*d2 + b2*c0*d2 + c0*c2*d1)*L1)/delta
,
(b1*d0 + c1*d2)/(2*delta)
,
(b1*d2 + c1*d1)/(2*delta)
,
0.25*((b0*b1*d0 + b0*c1*d2 + b1*c0*d2 + c0*c1*d1)*L2 - (b1*b2*d0 + b1*c2*d2 + b2*c1*d2 + c1*c2*d1)*L0)/delta
,
(b2*d0 + c2*d2)/(2*delta)
,
(b2*d2 + c2*d1)/(2*delta)
,
0.25*(-(b0*b2*d0 + b0*c2*d2 + b2*c0*d2 + c0*c2*d1)*L1 + (b1*b2*d0 + b1*c2*d2 + b2*c1*d2 + c1*c2*d1)*L0)/delta
,
(b0*d3 + c0*d5)/(2*delta)
,
(b0*d5 + c0*d4)/(2*delta)
,
0.25*(-(b0*b1*d3 + b0*c1*d5 + b1*c0*d5 + c0*c1*d4)*L2 + (b0*b2*d3 + b0*c2*d5 + b2*c0*d5 + c0*c2*d4)*L1)/delta
,
(b1*d3 + c1*d5)/(2*delta)
,
(b1*d5 + c1*d4)/(2*delta)
,
0.25*((b0*b1*d3 + b0*c1*d5 + b1*c0*d5 + c0*c1*d4)*L2 - (b1*b2*d3 + b1*c2*d5 + b2*c1*d5 + c1*c2*d4)*L0)/delta
,
(b2*d3 + c2*d5)/(2*delta)
,
(b2*d5 + c2*d4)/(2*delta)
,
0.25*(-(b0*b2*d3 + b0*c2*d5 + b2*c0*d5 + c0*c2*d4)*L1 + (b1*b2*d3 + b1*c2*d5 + b2*c1*d5 + c1*c2*d4)*L0)/delta
,
(b0*d6 + c0*d8)/(2*delta)
,
(b0*d8 + c0*d7)/(2*delta)
,
0.25*(-(b0*b1*d6 + b0*c1*d8 + b1*c0*d8 + c0*c1*d7)*L2 + (b0*b2*d6 + b0*c2*d8 + b2*c0*d8 + c0*c2*d7)*L1)/delta
,
(b1*d6 + c1*d8)/(2*delta)
,
(b1*d8 + c1*d7)/(2*delta)
,
0.25*((b0*b1*d6 + b0*c1*d8 + b1*c0*d8 + c0*c1*d7)*L2 - (b1*b2*d6 + b1*c2*d8 + b2*c1*d8 + c1*c2*d7)*L0)/delta
,
(b2*d6 + c2*d8)/(2*delta)
,
(b2*d8 + c2*d7)/(2*delta)
,
0.25*(-(b0*b2*d6 + b0*c2*d8 + b2*c0*d8 + c0*c2*d7)*L1 + (b1*b2*d6 + b1*c2*d8 + b2*c1*d8 + c1*c2*d7)*L0)/delta
};

    return DB;
}

std::vector<double> GT9::get_Nf(const double t, const std::vector<gp_Pnt>& points) const{

    std::vector<gp_Pnt> p;
    for(auto n:this->nodes){
        p.push_back(n->point);
    }

    gp_Mat deltaM(1, p[0].X(), p[0].Y(), 1, p[1].X(), p[1].Y(), 1, p[2].X(), p[2].Y());

    double delta = 0.5*deltaM.Determinant();

    std::vector<double> a, b, c;
    for(size_t i = 0; i < this->nodes.size(); ++i){
        size_t j = (i + 1) % 3;
        size_t k = (i + 2) % 3;

        a.push_back(p[j].X()*p[k].Y() - p[k].X()*p[j].Y());
        b.push_back(p[j].Y() - p[k].Y());
        c.push_back(p[k].X() - p[j].X());
    }

    double a0 = a[0];
    double a1 = a[1];
    double a2 = a[2];
    double b0 = b[0];
    double b1 = b[1];
    double b2 = b[2];
    double c0 = c[0];
    double c1 = c[1];
    double c2 = c[2];

    double x1 = points[0].X();
    double y1 = points[0].Y();
    double x2 = points[1].X();
    double y2 = points[1].Y();

    std::vector<double> Nf({
        t*(2*a0 + b0*x1 + b0*x2 + c0*y1 + c0*y2)*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)/(4*delta)
        ,
        0
        ,
        0
        ,
        t*(2*a0 + b0*x1 + b0*x2 + c0*y1 + c0*y2)*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)/(4*delta)
        ,
        t*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)*(0.125*a0*a1*b2 - 0.125*a0*a2*b1 - 0.0625*a0*b1*c2*y1 - 0.0625*a0*b1*c2*y2 + 0.0625*a0*b2*c1*y1 + 0.0625*a0*b2*c1*y2 + 0.0625*a1*b0*b2*x1 + 0.0625*a1*b0*b2*x2 + 0.0625*a1*b2*c0*y1 + 0.0625*a1*b2*c0*y2 - 0.0625*a2*b0*b1*x1 - 0.0625*a2*b0*b1*x2 - 0.0625*a2*b1*c0*y1 - 0.0625*a2*b1*c0*y2 - 0.0416666666666667*b0*b1*c2*x1*y1 - 0.0208333333333333*b0*b1*c2*x1*y2 - 0.0208333333333333*b0*b1*c2*x2*y1 - 0.0416666666666667*b0*b1*c2*x2*y2 + 0.0416666666666667*b0*b2*c1*x1*y1 + 0.0208333333333333*b0*b2*c1*x1*y2 + 0.0208333333333333*b0*b2*c1*x2*y1 + 0.0416666666666667*b0*b2*c1*x2*y2 - 0.0416666666666667*b1*c0*c2*y1*y1 - 0.0416666666666667*b1*c0*c2*y1*y2 - 0.0416666666666667*b1*c0*c2*y2*y2 + 0.0416666666666667*b2*c0*c1*y1*y1 + 0.0416666666666667*b2*c0*c1*y1*y2 + 0.0416666666666667*b2*c0*c1*y2*y2)/(delta*delta)
        ,
        t*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)*(0.125*a0*a1*c2 - 0.125*a0*a2*c1 + 0.0625*a0*b1*c2*x1 + 0.0625*a0*b1*c2*x2 - 0.0625*a0*b2*c1*x1 - 0.0625*a0*b2*c1*x2 + 0.0625*a1*b0*c2*x1 + 0.0625*a1*b0*c2*x2 + 0.0625*a1*c0*c2*y1 + 0.0625*a1*c0*c2*y2 - 0.0625*a2*b0*c1*x1 - 0.0625*a2*b0*c1*x2 - 0.0625*a2*c0*c1*y1 - 0.0625*a2*c0*c1*y2 + 0.0416666666666667*b0*b1*c2*x1*x1 + 0.0416666666666667*b0*b1*c2*x1*x2 + 0.0416666666666667*b0*b1*c2*x2*x2 - 0.0416666666666667*b0*b2*c1*x1*x1 - 0.0416666666666667*b0*b2*c1*x1*x2 - 0.0416666666666667*b0*b2*c1*x2*x2 + 0.0416666666666667*b1*c0*c2*x1*y1 + 0.0208333333333333*b1*c0*c2*x1*y2 + 0.0208333333333333*b1*c0*c2*x2*y1 + 0.0416666666666667*b1*c0*c2*x2*y2 - 0.0416666666666667*b2*c0*c1*x1*y1 - 0.0208333333333333*b2*c0*c1*x1*y2 - 0.0208333333333333*b2*c0*c1*x2*y1 - 0.0416666666666667*b2*c0*c1*x2*y2)/(delta*delta)
        ,
        t*(2*a1 + b1*x1 + b1*x2 + c1*y1 + c1*y2)*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)/(4*delta)
        ,
        0
        ,
        0
        ,
        t*(2*a1 + b1*x1 + b1*x2 + c1*y1 + c1*y2)*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)/(4*delta)
        ,
        t*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)*(-0.125*a0*a1*b2 - 0.0625*a0*b1*b2*x1 - 0.0625*a0*b1*b2*x2 - 0.0625*a0*b2*c1*y1 - 0.0625*a0*b2*c1*y2 + 0.125*a1*a2*b0 + 0.0625*a1*b0*c2*y1 + 0.0625*a1*b0*c2*y2 - 0.0625*a1*b2*c0*y1 - 0.0625*a1*b2*c0*y2 + 0.0625*a2*b0*b1*x1 + 0.0625*a2*b0*b1*x2 + 0.0625*a2*b0*c1*y1 + 0.0625*a2*b0*c1*y2 + 0.0416666666666667*b0*b1*c2*x1*y1 + 0.0208333333333333*b0*b1*c2*x1*y2 + 0.0208333333333333*b0*b1*c2*x2*y1 + 0.0416666666666667*b0*b1*c2*x2*y2 + 0.0416666666666667*b0*c1*c2*y1*y1 + 0.0416666666666667*b0*c1*c2*y1*y2 + 0.0416666666666667*b0*c1*c2*y2*y2 - 0.0416666666666667*b1*b2*c0*x1*y1 - 0.0208333333333333*b1*b2*c0*x1*y2 - 0.0208333333333333*b1*b2*c0*x2*y1 - 0.0416666666666667*b1*b2*c0*x2*y2 - 0.0416666666666667*b2*c0*c1*y1*y1 - 0.0416666666666667*b2*c0*c1*y1*y2 - 0.0416666666666667*b2*c0*c1*y2*y2)/(delta*delta)
        ,
        t*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)*(-0.125*a0*a1*c2 - 0.0625*a0*b1*c2*x1 - 0.0625*a0*b1*c2*x2 - 0.0625*a0*c1*c2*y1 - 0.0625*a0*c1*c2*y2 + 0.125*a1*a2*c0 - 0.0625*a1*b0*c2*x1 - 0.0625*a1*b0*c2*x2 + 0.0625*a1*b2*c0*x1 + 0.0625*a1*b2*c0*x2 + 0.0625*a2*b1*c0*x1 + 0.0625*a2*b1*c0*x2 + 0.0625*a2*c0*c1*y1 + 0.0625*a2*c0*c1*y2 - 0.0416666666666667*b0*b1*c2*x1*x1 - 0.0416666666666667*b0*b1*c2*x1*x2 - 0.0416666666666667*b0*b1*c2*x2*x2 - 0.0416666666666667*b0*c1*c2*x1*y1 - 0.0208333333333333*b0*c1*c2*x1*y2 - 0.0208333333333333*b0*c1*c2*x2*y1 - 0.0416666666666667*b0*c1*c2*x2*y2 + 0.0416666666666667*b1*b2*c0*x1*x1 + 0.0416666666666667*b1*b2*c0*x1*x2 + 0.0416666666666667*b1*b2*c0*x2*x2 + 0.0416666666666667*b2*c0*c1*x1*y1 + 0.0208333333333333*b2*c0*c1*x1*y2 + 0.0208333333333333*b2*c0*c1*x2*y1 + 0.0416666666666667*b2*c0*c1*x2*y2)/(delta*delta)
        ,
        t*(2*a2 + b2*x1 + b2*x2 + c2*y1 + c2*y2)*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)/(4*delta)
        ,
        0
        ,
        0
        ,
        t*(2*a2 + b2*x1 + b2*x2 + c2*y1 + c2*y2)*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)/(4*delta)
        ,
        t*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)*(0.125*a0*a2*b1 + 0.0625*a0*b1*b2*x1 + 0.0625*a0*b1*b2*x2 + 0.0625*a0*b1*c2*y1 + 0.0625*a0*b1*c2*y2 - 0.125*a1*a2*b0 - 0.0625*a1*b0*b2*x1 - 0.0625*a1*b0*b2*x2 - 0.0625*a1*b0*c2*y1 - 0.0625*a1*b0*c2*y2 - 0.0625*a2*b0*c1*y1 - 0.0625*a2*b0*c1*y2 + 0.0625*a2*b1*c0*y1 + 0.0625*a2*b1*c0*y2 - 0.0416666666666667*b0*b2*c1*x1*y1 - 0.0208333333333333*b0*b2*c1*x1*y2 - 0.0208333333333333*b0*b2*c1*x2*y1 - 0.0416666666666667*b0*b2*c1*x2*y2 - 0.0416666666666667*b0*c1*c2*y1*y1 - 0.0416666666666667*b0*c1*c2*y1*y2 - 0.0416666666666667*b0*c1*c2*y2*y2 + 0.0416666666666667*b1*b2*c0*x1*y1 + 0.0208333333333333*b1*b2*c0*x1*y2 + 0.0208333333333333*b1*b2*c0*x2*y1 + 0.0416666666666667*b1*b2*c0*x2*y2 + 0.0416666666666667*b1*c0*c2*y1*y1 + 0.0416666666666667*b1*c0*c2*y1*y2 + 0.0416666666666667*b1*c0*c2*y2*y2)/(delta*delta)
        ,
        t*sqrt(x1*x1 - 2*x1*x2 + x2*x2 + y1*y1 - 2*y1*y2 + y2*y2)*(0.125*a0*a2*c1 + 0.0625*a0*b2*c1*x1 + 0.0625*a0*b2*c1*x2 + 0.0625*a0*c1*c2*y1 + 0.0625*a0*c1*c2*y2 - 0.125*a1*a2*c0 - 0.0625*a1*b2*c0*x1 - 0.0625*a1*b2*c0*x2 - 0.0625*a1*c0*c2*y1 - 0.0625*a1*c0*c2*y2 + 0.0625*a2*b0*c1*x1 + 0.0625*a2*b0*c1*x2 - 0.0625*a2*b1*c0*x1 - 0.0625*a2*b1*c0*x2 + 0.0416666666666667*b0*b2*c1*x1*x1 + 0.0416666666666667*b0*b2*c1*x1*x2 + 0.0416666666666667*b0*b2*c1*x2*x2 + 0.0416666666666667*b0*c1*c2*x1*y1 + 0.0208333333333333*b0*c1*c2*x1*y2 + 0.0208333333333333*b0*c1*c2*x2*y1 + 0.0416666666666667*b0*c1*c2*x2*y2 - 0.0416666666666667*b1*b2*c0*x1*x1 - 0.0416666666666667*b1*b2*c0*x1*x2 - 0.0416666666666667*b1*b2*c0*x2*x2 - 0.0416666666666667*b1*c0*c2*x1*y1 - 0.0208333333333333*b1*c0*c2*x1*y2 - 0.0208333333333333*b1*c0*c2*x2*y1 - 0.0416666666666667*b1*c0*c2*x2*y2)/(delta*delta)
    });

    return Nf;
}

}
