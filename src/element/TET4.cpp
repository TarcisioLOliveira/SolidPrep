/*
 *   Copyright (C) 2021 Tarc√≠sio Ladeia de Oliveira.
 *
 *   This file is part of SolidPrep
 *
 *   SolidPrep is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SolidPrep is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SolidPrep.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include "element/TET4.hpp"
#include "cblas.h"
#include "logger.hpp"
#include <BRepBuilderAPI_MakeVertex.hxx>
#include <BRepBuilderAPI_MakeEdge.hxx>
#include <BRepBuilderAPI_MakeWire.hxx>
#include <BRepBuilderAPI_MakeFace.hxx>
#include <TopoDS_Wire.hxx>
#include <TopoDS_Face.hxx>
#include <TopoDS.hxx>
#include <IntTools_EdgeEdge.hxx>
#include <lapacke.h>

namespace element{

TET4::TET4(ElementShape s):
    MeshElementCommon3DTet<TET4>(s.nodes), coeffs(this->get_coeffs()){}

std::array<double, TET4::NODES_PER_ELEM*TET4::NODES_PER_ELEM> TET4::get_coeffs() const{
    constexpr size_t N = TET4::NODES_PER_ELEM;
    std::array<double, N> x, y, z;
    for(size_t i = 0; i < N; ++i){
        x[i] = this->nodes[i]->point.X();
        y[i] = this->nodes[i]->point.Y();
        z[i] = this->nodes[i]->point.Z();
    }

    std::array<double, N*N> M = 
        {1, x[0], y[0], z[0],
         1, x[1], y[1], z[1],
         1, x[2], y[2], z[2],
         1, x[3], y[3], z[3]};

    std::array<int, N> ipiv;

    // M*C = I -> C=M^-1
    // C = {a[0], a[1], a[2], a[3],
    //      b[0], b[1], b[2], b[3],
    //      c[0], c[1], c[2], c[3],
    //      d[0], d[1], d[2], d[3]}
    int info = LAPACKE_dgetrf(LAPACK_COL_MAJOR, N, N, M.data(), N, ipiv.data());
    logger::log_assert(info == 0, logger::ERROR, "LAPACKE returned {} while calculating LU in Q4.", info);
    info = LAPACKE_dgetri(LAPACK_COL_MAJOR, N, M.data(), N, ipiv.data());
    logger::log_assert(info == 0, logger::ERROR, "LAPACKE returned {} while calculating computing inverse from LU in Q4.", info);

    const double V = this->get_volume(1.0);
    for(auto& m:M){
        m *= 6*V;
    }

    return M;
}

std::vector<double> TET4::get_k(const std::vector<double>& D, const double t) const{
    const size_t N = this->NODES_PER_ELEM;

    const double* const a = this->coeffs.data();
    const double* const b = a + N;
    const double* const c = b + N;
    const double* const d = c + N;

    const double V = this->get_volume(t);

std::vector<double> k{
(D[0]*b[0]*b[0] + D[18]*b[0]*c[0] + D[21]*c[0]*c[0] + D[23]*c[0]*d[0] + D[3]*b[0]*c[0] + D[30]*b[0]*d[0] + D[33]*c[0]*d[0] + D[35]*d[0]*d[0] + D[5]*b[0]*d[0])/(36*V)
,
(D[1]*b[0]*c[0] + D[19]*c[0]*c[0] + D[21]*b[0]*c[0] + D[22]*c[0]*d[0] + D[3]*b[0]*b[0] + D[31]*c[0]*d[0] + D[33]*b[0]*d[0] + D[34]*d[0]*d[0] + D[4]*b[0]*d[0])/(36*V)
,
(D[2]*b[0]*d[0] + D[20]*c[0]*d[0] + D[22]*c[0]*c[0] + D[23]*b[0]*c[0] + D[32]*d[0]*d[0] + D[34]*c[0]*d[0] + D[35]*b[0]*d[0] + D[4]*b[0]*c[0] + D[5]*b[0]*b[0])/(36*V)
,
(D[0]*b[0]*b[1] + D[18]*b[1]*c[0] + D[21]*c[0]*c[1] + D[23]*c[0]*d[1] + D[3]*b[0]*c[1] + D[30]*b[1]*d[0] + D[33]*c[1]*d[0] + D[35]*d[0]*d[1] + D[5]*b[0]*d[1])/(36*V)
,
(D[1]*b[0]*c[1] + D[19]*c[0]*c[1] + D[21]*b[1]*c[0] + D[22]*c[0]*d[1] + D[3]*b[0]*b[1] + D[31]*c[1]*d[0] + D[33]*b[1]*d[0] + D[34]*d[0]*d[1] + D[4]*b[0]*d[1])/(36*V)
,
(D[2]*b[0]*d[1] + D[20]*c[0]*d[1] + D[22]*c[0]*c[1] + D[23]*b[1]*c[0] + D[32]*d[0]*d[1] + D[34]*c[1]*d[0] + D[35]*b[1]*d[0] + D[4]*b[0]*c[1] + D[5]*b[0]*b[1])/(36*V)
,
(D[0]*b[0]*b[2] + D[18]*b[2]*c[0] + D[21]*c[0]*c[2] + D[23]*c[0]*d[2] + D[3]*b[0]*c[2] + D[30]*b[2]*d[0] + D[33]*c[2]*d[0] + D[35]*d[0]*d[2] + D[5]*b[0]*d[2])/(36*V)
,
(D[1]*b[0]*c[2] + D[19]*c[0]*c[2] + D[21]*b[2]*c[0] + D[22]*c[0]*d[2] + D[3]*b[0]*b[2] + D[31]*c[2]*d[0] + D[33]*b[2]*d[0] + D[34]*d[0]*d[2] + D[4]*b[0]*d[2])/(36*V)
,
(D[2]*b[0]*d[2] + D[20]*c[0]*d[2] + D[22]*c[0]*c[2] + D[23]*b[2]*c[0] + D[32]*d[0]*d[2] + D[34]*c[2]*d[0] + D[35]*b[2]*d[0] + D[4]*b[0]*c[2] + D[5]*b[0]*b[2])/(36*V)
,
(D[0]*b[0]*b[3] + D[18]*b[3]*c[0] + D[21]*c[0]*c[3] + D[23]*c[0]*d[3] + D[3]*b[0]*c[3] + D[30]*b[3]*d[0] + D[33]*c[3]*d[0] + D[35]*d[0]*d[3] + D[5]*b[0]*d[3])/(36*V)
,
(D[1]*b[0]*c[3] + D[19]*c[0]*c[3] + D[21]*b[3]*c[0] + D[22]*c[0]*d[3] + D[3]*b[0]*b[3] + D[31]*c[3]*d[0] + D[33]*b[3]*d[0] + D[34]*d[0]*d[3] + D[4]*b[0]*d[3])/(36*V)
,
(D[2]*b[0]*d[3] + D[20]*c[0]*d[3] + D[22]*c[0]*c[3] + D[23]*b[3]*c[0] + D[32]*d[0]*d[3] + D[34]*c[3]*d[0] + D[35]*b[3]*d[0] + D[4]*b[0]*c[3] + D[5]*b[0]*b[3])/(36*V)
,
(D[11]*c[0]*d[0] + D[18]*b[0]*b[0] + D[21]*b[0]*c[0] + D[23]*b[0]*d[0] + D[24]*b[0]*d[0] + D[27]*c[0]*d[0] + D[29]*d[0]*d[0] + D[6]*b[0]*c[0] + D[9]*c[0]*c[0])/(36*V)
,
(D[10]*c[0]*d[0] + D[19]*b[0]*c[0] + D[21]*b[0]*b[0] + D[22]*b[0]*d[0] + D[25]*c[0]*d[0] + D[27]*b[0]*d[0] + D[28]*d[0]*d[0] + D[7]*c[0]*c[0] + D[9]*b[0]*c[0])/(36*V)
,
(D[10]*c[0]*c[0] + D[11]*b[0]*c[0] + D[20]*b[0]*d[0] + D[22]*b[0]*c[0] + D[23]*b[0]*b[0] + D[26]*d[0]*d[0] + D[28]*c[0]*d[0] + D[29]*b[0]*d[0] + D[8]*c[0]*d[0])/(36*V)
,
(D[11]*c[0]*d[1] + D[18]*b[0]*b[1] + D[21]*b[0]*c[1] + D[23]*b[0]*d[1] + D[24]*b[1]*d[0] + D[27]*c[1]*d[0] + D[29]*d[0]*d[1] + D[6]*b[1]*c[0] + D[9]*c[0]*c[1])/(36*V)
,
(D[10]*c[0]*d[1] + D[19]*b[0]*c[1] + D[21]*b[0]*b[1] + D[22]*b[0]*d[1] + D[25]*c[1]*d[0] + D[27]*b[1]*d[0] + D[28]*d[0]*d[1] + D[7]*c[0]*c[1] + D[9]*b[1]*c[0])/(36*V)
,
(D[10]*c[0]*c[1] + D[11]*b[1]*c[0] + D[20]*b[0]*d[1] + D[22]*b[0]*c[1] + D[23]*b[0]*b[1] + D[26]*d[0]*d[1] + D[28]*c[1]*d[0] + D[29]*b[1]*d[0] + D[8]*c[0]*d[1])/(36*V)
,
(D[11]*c[0]*d[2] + D[18]*b[0]*b[2] + D[21]*b[0]*c[2] + D[23]*b[0]*d[2] + D[24]*b[2]*d[0] + D[27]*c[2]*d[0] + D[29]*d[0]*d[2] + D[6]*b[2]*c[0] + D[9]*c[0]*c[2])/(36*V)
,
(D[10]*c[0]*d[2] + D[19]*b[0]*c[2] + D[21]*b[0]*b[2] + D[22]*b[0]*d[2] + D[25]*c[2]*d[0] + D[27]*b[2]*d[0] + D[28]*d[0]*d[2] + D[7]*c[0]*c[2] + D[9]*b[2]*c[0])/(36*V)
,
(D[10]*c[0]*c[2] + D[11]*b[2]*c[0] + D[20]*b[0]*d[2] + D[22]*b[0]*c[2] + D[23]*b[0]*b[2] + D[26]*d[0]*d[2] + D[28]*c[2]*d[0] + D[29]*b[2]*d[0] + D[8]*c[0]*d[2])/(36*V)
,
(D[11]*c[0]*d[3] + D[18]*b[0]*b[3] + D[21]*b[0]*c[3] + D[23]*b[0]*d[3] + D[24]*b[3]*d[0] + D[27]*c[3]*d[0] + D[29]*d[0]*d[3] + D[6]*b[3]*c[0] + D[9]*c[0]*c[3])/(36*V)
,
(D[10]*c[0]*d[3] + D[19]*b[0]*c[3] + D[21]*b[0]*b[3] + D[22]*b[0]*d[3] + D[25]*c[3]*d[0] + D[27]*b[3]*d[0] + D[28]*d[0]*d[3] + D[7]*c[0]*c[3] + D[9]*b[3]*c[0])/(36*V)
,
(D[10]*c[0]*c[3] + D[11]*b[3]*c[0] + D[20]*b[0]*d[3] + D[22]*b[0]*c[3] + D[23]*b[0]*b[3] + D[26]*d[0]*d[3] + D[28]*c[3]*d[0] + D[29]*b[3]*d[0] + D[8]*c[0]*d[3])/(36*V)
,
(D[12]*b[0]*d[0] + D[15]*c[0]*d[0] + D[17]*d[0]*d[0] + D[24]*b[0]*c[0] + D[27]*c[0]*c[0] + D[29]*c[0]*d[0] + D[30]*b[0]*b[0] + D[33]*b[0]*c[0] + D[35]*b[0]*d[0])/(36*V)
,
(D[13]*c[0]*d[0] + D[15]*b[0]*d[0] + D[16]*d[0]*d[0] + D[25]*c[0]*c[0] + D[27]*b[0]*c[0] + D[28]*c[0]*d[0] + D[31]*b[0]*c[0] + D[33]*b[0]*b[0] + D[34]*b[0]*d[0])/(36*V)
,
(D[14]*d[0]*d[0] + D[16]*c[0]*d[0] + D[17]*b[0]*d[0] + D[26]*c[0]*d[0] + D[28]*c[0]*c[0] + D[29]*b[0]*c[0] + D[32]*b[0]*d[0] + D[34]*b[0]*c[0] + D[35]*b[0]*b[0])/(36*V)
,
(D[12]*b[1]*d[0] + D[15]*c[1]*d[0] + D[17]*d[0]*d[1] + D[24]*b[1]*c[0] + D[27]*c[0]*c[1] + D[29]*c[0]*d[1] + D[30]*b[0]*b[1] + D[33]*b[0]*c[1] + D[35]*b[0]*d[1])/(36*V)
,
(D[13]*c[1]*d[0] + D[15]*b[1]*d[0] + D[16]*d[0]*d[1] + D[25]*c[0]*c[1] + D[27]*b[1]*c[0] + D[28]*c[0]*d[1] + D[31]*b[0]*c[1] + D[33]*b[0]*b[1] + D[34]*b[0]*d[1])/(36*V)
,
(D[14]*d[0]*d[1] + D[16]*c[1]*d[0] + D[17]*b[1]*d[0] + D[26]*c[0]*d[1] + D[28]*c[0]*c[1] + D[29]*b[1]*c[0] + D[32]*b[0]*d[1] + D[34]*b[0]*c[1] + D[35]*b[0]*b[1])/(36*V)
,
(D[12]*b[2]*d[0] + D[15]*c[2]*d[0] + D[17]*d[0]*d[2] + D[24]*b[2]*c[0] + D[27]*c[0]*c[2] + D[29]*c[0]*d[2] + D[30]*b[0]*b[2] + D[33]*b[0]*c[2] + D[35]*b[0]*d[2])/(36*V)
,
(D[13]*c[2]*d[0] + D[15]*b[2]*d[0] + D[16]*d[0]*d[2] + D[25]*c[0]*c[2] + D[27]*b[2]*c[0] + D[28]*c[0]*d[2] + D[31]*b[0]*c[2] + D[33]*b[0]*b[2] + D[34]*b[0]*d[2])/(36*V)
,
(D[14]*d[0]*d[2] + D[16]*c[2]*d[0] + D[17]*b[2]*d[0] + D[26]*c[0]*d[2] + D[28]*c[0]*c[2] + D[29]*b[2]*c[0] + D[32]*b[0]*d[2] + D[34]*b[0]*c[2] + D[35]*b[0]*b[2])/(36*V)
,
(D[12]*b[3]*d[0] + D[15]*c[3]*d[0] + D[17]*d[0]*d[3] + D[24]*b[3]*c[0] + D[27]*c[0]*c[3] + D[29]*c[0]*d[3] + D[30]*b[0]*b[3] + D[33]*b[0]*c[3] + D[35]*b[0]*d[3])/(36*V)
,
(D[13]*c[3]*d[0] + D[15]*b[3]*d[0] + D[16]*d[0]*d[3] + D[25]*c[0]*c[3] + D[27]*b[3]*c[0] + D[28]*c[0]*d[3] + D[31]*b[0]*c[3] + D[33]*b[0]*b[3] + D[34]*b[0]*d[3])/(36*V)
,
(D[14]*d[0]*d[3] + D[16]*c[3]*d[0] + D[17]*b[3]*d[0] + D[26]*c[0]*d[3] + D[28]*c[0]*c[3] + D[29]*b[3]*c[0] + D[32]*b[0]*d[3] + D[34]*b[0]*c[3] + D[35]*b[0]*b[3])/(36*V)
,
(D[0]*b[0]*b[1] + D[18]*b[0]*c[1] + D[21]*c[0]*c[1] + D[23]*c[1]*d[0] + D[3]*b[1]*c[0] + D[30]*b[0]*d[1] + D[33]*c[0]*d[1] + D[35]*d[0]*d[1] + D[5]*b[1]*d[0])/(36*V)
,
(D[1]*b[1]*c[0] + D[19]*c[0]*c[1] + D[21]*b[0]*c[1] + D[22]*c[1]*d[0] + D[3]*b[0]*b[1] + D[31]*c[0]*d[1] + D[33]*b[0]*d[1] + D[34]*d[0]*d[1] + D[4]*b[1]*d[0])/(36*V)
,
(D[2]*b[1]*d[0] + D[20]*c[1]*d[0] + D[22]*c[0]*c[1] + D[23]*b[0]*c[1] + D[32]*d[0]*d[1] + D[34]*c[0]*d[1] + D[35]*b[0]*d[1] + D[4]*b[1]*c[0] + D[5]*b[0]*b[1])/(36*V)
,
(D[0]*b[1]*b[1] + D[18]*b[1]*c[1] + D[21]*c[1]*c[1] + D[23]*c[1]*d[1] + D[3]*b[1]*c[1] + D[30]*b[1]*d[1] + D[33]*c[1]*d[1] + D[35]*d[1]*d[1] + D[5]*b[1]*d[1])/(36*V)
,
(D[1]*b[1]*c[1] + D[19]*c[1]*c[1] + D[21]*b[1]*c[1] + D[22]*c[1]*d[1] + D[3]*b[1]*b[1] + D[31]*c[1]*d[1] + D[33]*b[1]*d[1] + D[34]*d[1]*d[1] + D[4]*b[1]*d[1])/(36*V)
,
(D[2]*b[1]*d[1] + D[20]*c[1]*d[1] + D[22]*c[1]*c[1] + D[23]*b[1]*c[1] + D[32]*d[1]*d[1] + D[34]*c[1]*d[1] + D[35]*b[1]*d[1] + D[4]*b[1]*c[1] + D[5]*b[1]*b[1])/(36*V)
,
(D[0]*b[1]*b[2] + D[18]*b[2]*c[1] + D[21]*c[1]*c[2] + D[23]*c[1]*d[2] + D[3]*b[1]*c[2] + D[30]*b[2]*d[1] + D[33]*c[2]*d[1] + D[35]*d[1]*d[2] + D[5]*b[1]*d[2])/(36*V)
,
(D[1]*b[1]*c[2] + D[19]*c[1]*c[2] + D[21]*b[2]*c[1] + D[22]*c[1]*d[2] + D[3]*b[1]*b[2] + D[31]*c[2]*d[1] + D[33]*b[2]*d[1] + D[34]*d[1]*d[2] + D[4]*b[1]*d[2])/(36*V)
,
(D[2]*b[1]*d[2] + D[20]*c[1]*d[2] + D[22]*c[1]*c[2] + D[23]*b[2]*c[1] + D[32]*d[1]*d[2] + D[34]*c[2]*d[1] + D[35]*b[2]*d[1] + D[4]*b[1]*c[2] + D[5]*b[1]*b[2])/(36*V)
,
(D[0]*b[1]*b[3] + D[18]*b[3]*c[1] + D[21]*c[1]*c[3] + D[23]*c[1]*d[3] + D[3]*b[1]*c[3] + D[30]*b[3]*d[1] + D[33]*c[3]*d[1] + D[35]*d[1]*d[3] + D[5]*b[1]*d[3])/(36*V)
,
(D[1]*b[1]*c[3] + D[19]*c[1]*c[3] + D[21]*b[3]*c[1] + D[22]*c[1]*d[3] + D[3]*b[1]*b[3] + D[31]*c[3]*d[1] + D[33]*b[3]*d[1] + D[34]*d[1]*d[3] + D[4]*b[1]*d[3])/(36*V)
,
(D[2]*b[1]*d[3] + D[20]*c[1]*d[3] + D[22]*c[1]*c[3] + D[23]*b[3]*c[1] + D[32]*d[1]*d[3] + D[34]*c[3]*d[1] + D[35]*b[3]*d[1] + D[4]*b[1]*c[3] + D[5]*b[1]*b[3])/(36*V)
,
(D[11]*c[1]*d[0] + D[18]*b[0]*b[1] + D[21]*b[1]*c[0] + D[23]*b[1]*d[0] + D[24]*b[0]*d[1] + D[27]*c[0]*d[1] + D[29]*d[0]*d[1] + D[6]*b[0]*c[1] + D[9]*c[0]*c[1])/(36*V)
,
(D[10]*c[1]*d[0] + D[19]*b[1]*c[0] + D[21]*b[0]*b[1] + D[22]*b[1]*d[0] + D[25]*c[0]*d[1] + D[27]*b[0]*d[1] + D[28]*d[0]*d[1] + D[7]*c[0]*c[1] + D[9]*b[0]*c[1])/(36*V)
,
(D[10]*c[0]*c[1] + D[11]*b[0]*c[1] + D[20]*b[1]*d[0] + D[22]*b[1]*c[0] + D[23]*b[0]*b[1] + D[26]*d[0]*d[1] + D[28]*c[0]*d[1] + D[29]*b[0]*d[1] + D[8]*c[1]*d[0])/(36*V)
,
(D[11]*c[1]*d[1] + D[18]*b[1]*b[1] + D[21]*b[1]*c[1] + D[23]*b[1]*d[1] + D[24]*b[1]*d[1] + D[27]*c[1]*d[1] + D[29]*d[1]*d[1] + D[6]*b[1]*c[1] + D[9]*c[1]*c[1])/(36*V)
,
(D[10]*c[1]*d[1] + D[19]*b[1]*c[1] + D[21]*b[1]*b[1] + D[22]*b[1]*d[1] + D[25]*c[1]*d[1] + D[27]*b[1]*d[1] + D[28]*d[1]*d[1] + D[7]*c[1]*c[1] + D[9]*b[1]*c[1])/(36*V)
,
(D[10]*c[1]*c[1] + D[11]*b[1]*c[1] + D[20]*b[1]*d[1] + D[22]*b[1]*c[1] + D[23]*b[1]*b[1] + D[26]*d[1]*d[1] + D[28]*c[1]*d[1] + D[29]*b[1]*d[1] + D[8]*c[1]*d[1])/(36*V)
,
(D[11]*c[1]*d[2] + D[18]*b[1]*b[2] + D[21]*b[1]*c[2] + D[23]*b[1]*d[2] + D[24]*b[2]*d[1] + D[27]*c[2]*d[1] + D[29]*d[1]*d[2] + D[6]*b[2]*c[1] + D[9]*c[1]*c[2])/(36*V)
,
(D[10]*c[1]*d[2] + D[19]*b[1]*c[2] + D[21]*b[1]*b[2] + D[22]*b[1]*d[2] + D[25]*c[2]*d[1] + D[27]*b[2]*d[1] + D[28]*d[1]*d[2] + D[7]*c[1]*c[2] + D[9]*b[2]*c[1])/(36*V)
,
(D[10]*c[1]*c[2] + D[11]*b[2]*c[1] + D[20]*b[1]*d[2] + D[22]*b[1]*c[2] + D[23]*b[1]*b[2] + D[26]*d[1]*d[2] + D[28]*c[2]*d[1] + D[29]*b[2]*d[1] + D[8]*c[1]*d[2])/(36*V)
,
(D[11]*c[1]*d[3] + D[18]*b[1]*b[3] + D[21]*b[1]*c[3] + D[23]*b[1]*d[3] + D[24]*b[3]*d[1] + D[27]*c[3]*d[1] + D[29]*d[1]*d[3] + D[6]*b[3]*c[1] + D[9]*c[1]*c[3])/(36*V)
,
(D[10]*c[1]*d[3] + D[19]*b[1]*c[3] + D[21]*b[1]*b[3] + D[22]*b[1]*d[3] + D[25]*c[3]*d[1] + D[27]*b[3]*d[1] + D[28]*d[1]*d[3] + D[7]*c[1]*c[3] + D[9]*b[3]*c[1])/(36*V)
,
(D[10]*c[1]*c[3] + D[11]*b[3]*c[1] + D[20]*b[1]*d[3] + D[22]*b[1]*c[3] + D[23]*b[1]*b[3] + D[26]*d[1]*d[3] + D[28]*c[3]*d[1] + D[29]*b[3]*d[1] + D[8]*c[1]*d[3])/(36*V)
,
(D[12]*b[0]*d[1] + D[15]*c[0]*d[1] + D[17]*d[0]*d[1] + D[24]*b[0]*c[1] + D[27]*c[0]*c[1] + D[29]*c[1]*d[0] + D[30]*b[0]*b[1] + D[33]*b[1]*c[0] + D[35]*b[1]*d[0])/(36*V)
,
(D[13]*c[0]*d[1] + D[15]*b[0]*d[1] + D[16]*d[0]*d[1] + D[25]*c[0]*c[1] + D[27]*b[0]*c[1] + D[28]*c[1]*d[0] + D[31]*b[1]*c[0] + D[33]*b[0]*b[1] + D[34]*b[1]*d[0])/(36*V)
,
(D[14]*d[0]*d[1] + D[16]*c[0]*d[1] + D[17]*b[0]*d[1] + D[26]*c[1]*d[0] + D[28]*c[0]*c[1] + D[29]*b[0]*c[1] + D[32]*b[1]*d[0] + D[34]*b[1]*c[0] + D[35]*b[0]*b[1])/(36*V)
,
(D[12]*b[1]*d[1] + D[15]*c[1]*d[1] + D[17]*d[1]*d[1] + D[24]*b[1]*c[1] + D[27]*c[1]*c[1] + D[29]*c[1]*d[1] + D[30]*b[1]*b[1] + D[33]*b[1]*c[1] + D[35]*b[1]*d[1])/(36*V)
,
(D[13]*c[1]*d[1] + D[15]*b[1]*d[1] + D[16]*d[1]*d[1] + D[25]*c[1]*c[1] + D[27]*b[1]*c[1] + D[28]*c[1]*d[1] + D[31]*b[1]*c[1] + D[33]*b[1]*b[1] + D[34]*b[1]*d[1])/(36*V)
,
(D[14]*d[1]*d[1] + D[16]*c[1]*d[1] + D[17]*b[1]*d[1] + D[26]*c[1]*d[1] + D[28]*c[1]*c[1] + D[29]*b[1]*c[1] + D[32]*b[1]*d[1] + D[34]*b[1]*c[1] + D[35]*b[1]*b[1])/(36*V)
,
(D[12]*b[2]*d[1] + D[15]*c[2]*d[1] + D[17]*d[1]*d[2] + D[24]*b[2]*c[1] + D[27]*c[1]*c[2] + D[29]*c[1]*d[2] + D[30]*b[1]*b[2] + D[33]*b[1]*c[2] + D[35]*b[1]*d[2])/(36*V)
,
(D[13]*c[2]*d[1] + D[15]*b[2]*d[1] + D[16]*d[1]*d[2] + D[25]*c[1]*c[2] + D[27]*b[2]*c[1] + D[28]*c[1]*d[2] + D[31]*b[1]*c[2] + D[33]*b[1]*b[2] + D[34]*b[1]*d[2])/(36*V)
,
(D[14]*d[1]*d[2] + D[16]*c[2]*d[1] + D[17]*b[2]*d[1] + D[26]*c[1]*d[2] + D[28]*c[1]*c[2] + D[29]*b[2]*c[1] + D[32]*b[1]*d[2] + D[34]*b[1]*c[2] + D[35]*b[1]*b[2])/(36*V)
,
(D[12]*b[3]*d[1] + D[15]*c[3]*d[1] + D[17]*d[1]*d[3] + D[24]*b[3]*c[1] + D[27]*c[1]*c[3] + D[29]*c[1]*d[3] + D[30]*b[1]*b[3] + D[33]*b[1]*c[3] + D[35]*b[1]*d[3])/(36*V)
,
(D[13]*c[3]*d[1] + D[15]*b[3]*d[1] + D[16]*d[1]*d[3] + D[25]*c[1]*c[3] + D[27]*b[3]*c[1] + D[28]*c[1]*d[3] + D[31]*b[1]*c[3] + D[33]*b[1]*b[3] + D[34]*b[1]*d[3])/(36*V)
,
(D[14]*d[1]*d[3] + D[16]*c[3]*d[1] + D[17]*b[3]*d[1] + D[26]*c[1]*d[3] + D[28]*c[1]*c[3] + D[29]*b[3]*c[1] + D[32]*b[1]*d[3] + D[34]*b[1]*c[3] + D[35]*b[1]*b[3])/(36*V)
,
(D[0]*b[0]*b[2] + D[18]*b[0]*c[2] + D[21]*c[0]*c[2] + D[23]*c[2]*d[0] + D[3]*b[2]*c[0] + D[30]*b[0]*d[2] + D[33]*c[0]*d[2] + D[35]*d[0]*d[2] + D[5]*b[2]*d[0])/(36*V)
,
(D[1]*b[2]*c[0] + D[19]*c[0]*c[2] + D[21]*b[0]*c[2] + D[22]*c[2]*d[0] + D[3]*b[0]*b[2] + D[31]*c[0]*d[2] + D[33]*b[0]*d[2] + D[34]*d[0]*d[2] + D[4]*b[2]*d[0])/(36*V)
,
(D[2]*b[2]*d[0] + D[20]*c[2]*d[0] + D[22]*c[0]*c[2] + D[23]*b[0]*c[2] + D[32]*d[0]*d[2] + D[34]*c[0]*d[2] + D[35]*b[0]*d[2] + D[4]*b[2]*c[0] + D[5]*b[0]*b[2])/(36*V)
,
(D[0]*b[1]*b[2] + D[18]*b[1]*c[2] + D[21]*c[1]*c[2] + D[23]*c[2]*d[1] + D[3]*b[2]*c[1] + D[30]*b[1]*d[2] + D[33]*c[1]*d[2] + D[35]*d[1]*d[2] + D[5]*b[2]*d[1])/(36*V)
,
(D[1]*b[2]*c[1] + D[19]*c[1]*c[2] + D[21]*b[1]*c[2] + D[22]*c[2]*d[1] + D[3]*b[1]*b[2] + D[31]*c[1]*d[2] + D[33]*b[1]*d[2] + D[34]*d[1]*d[2] + D[4]*b[2]*d[1])/(36*V)
,
(D[2]*b[2]*d[1] + D[20]*c[2]*d[1] + D[22]*c[1]*c[2] + D[23]*b[1]*c[2] + D[32]*d[1]*d[2] + D[34]*c[1]*d[2] + D[35]*b[1]*d[2] + D[4]*b[2]*c[1] + D[5]*b[1]*b[2])/(36*V)
,
(D[0]*b[2]*b[2] + D[18]*b[2]*c[2] + D[21]*c[2]*c[2] + D[23]*c[2]*d[2] + D[3]*b[2]*c[2] + D[30]*b[2]*d[2] + D[33]*c[2]*d[2] + D[35]*d[2]*d[2] + D[5]*b[2]*d[2])/(36*V)
,
(D[1]*b[2]*c[2] + D[19]*c[2]*c[2] + D[21]*b[2]*c[2] + D[22]*c[2]*d[2] + D[3]*b[2]*b[2] + D[31]*c[2]*d[2] + D[33]*b[2]*d[2] + D[34]*d[2]*d[2] + D[4]*b[2]*d[2])/(36*V)
,
(D[2]*b[2]*d[2] + D[20]*c[2]*d[2] + D[22]*c[2]*c[2] + D[23]*b[2]*c[2] + D[32]*d[2]*d[2] + D[34]*c[2]*d[2] + D[35]*b[2]*d[2] + D[4]*b[2]*c[2] + D[5]*b[2]*b[2])/(36*V)
,
(D[0]*b[2]*b[3] + D[18]*b[3]*c[2] + D[21]*c[2]*c[3] + D[23]*c[2]*d[3] + D[3]*b[2]*c[3] + D[30]*b[3]*d[2] + D[33]*c[3]*d[2] + D[35]*d[2]*d[3] + D[5]*b[2]*d[3])/(36*V)
,
(D[1]*b[2]*c[3] + D[19]*c[2]*c[3] + D[21]*b[3]*c[2] + D[22]*c[2]*d[3] + D[3]*b[2]*b[3] + D[31]*c[3]*d[2] + D[33]*b[3]*d[2] + D[34]*d[2]*d[3] + D[4]*b[2]*d[3])/(36*V)
,
(D[2]*b[2]*d[3] + D[20]*c[2]*d[3] + D[22]*c[2]*c[3] + D[23]*b[3]*c[2] + D[32]*d[2]*d[3] + D[34]*c[3]*d[2] + D[35]*b[3]*d[2] + D[4]*b[2]*c[3] + D[5]*b[2]*b[3])/(36*V)
,
(D[11]*c[2]*d[0] + D[18]*b[0]*b[2] + D[21]*b[2]*c[0] + D[23]*b[2]*d[0] + D[24]*b[0]*d[2] + D[27]*c[0]*d[2] + D[29]*d[0]*d[2] + D[6]*b[0]*c[2] + D[9]*c[0]*c[2])/(36*V)
,
(D[10]*c[2]*d[0] + D[19]*b[2]*c[0] + D[21]*b[0]*b[2] + D[22]*b[2]*d[0] + D[25]*c[0]*d[2] + D[27]*b[0]*d[2] + D[28]*d[0]*d[2] + D[7]*c[0]*c[2] + D[9]*b[0]*c[2])/(36*V)
,
(D[10]*c[0]*c[2] + D[11]*b[0]*c[2] + D[20]*b[2]*d[0] + D[22]*b[2]*c[0] + D[23]*b[0]*b[2] + D[26]*d[0]*d[2] + D[28]*c[0]*d[2] + D[29]*b[0]*d[2] + D[8]*c[2]*d[0])/(36*V)
,
(D[11]*c[2]*d[1] + D[18]*b[1]*b[2] + D[21]*b[2]*c[1] + D[23]*b[2]*d[1] + D[24]*b[1]*d[2] + D[27]*c[1]*d[2] + D[29]*d[1]*d[2] + D[6]*b[1]*c[2] + D[9]*c[1]*c[2])/(36*V)
,
(D[10]*c[2]*d[1] + D[19]*b[2]*c[1] + D[21]*b[1]*b[2] + D[22]*b[2]*d[1] + D[25]*c[1]*d[2] + D[27]*b[1]*d[2] + D[28]*d[1]*d[2] + D[7]*c[1]*c[2] + D[9]*b[1]*c[2])/(36*V)
,
(D[10]*c[1]*c[2] + D[11]*b[1]*c[2] + D[20]*b[2]*d[1] + D[22]*b[2]*c[1] + D[23]*b[1]*b[2] + D[26]*d[1]*d[2] + D[28]*c[1]*d[2] + D[29]*b[1]*d[2] + D[8]*c[2]*d[1])/(36*V)
,
(D[11]*c[2]*d[2] + D[18]*b[2]*b[2] + D[21]*b[2]*c[2] + D[23]*b[2]*d[2] + D[24]*b[2]*d[2] + D[27]*c[2]*d[2] + D[29]*d[2]*d[2] + D[6]*b[2]*c[2] + D[9]*c[2]*c[2])/(36*V)
,
(D[10]*c[2]*d[2] + D[19]*b[2]*c[2] + D[21]*b[2]*b[2] + D[22]*b[2]*d[2] + D[25]*c[2]*d[2] + D[27]*b[2]*d[2] + D[28]*d[2]*d[2] + D[7]*c[2]*c[2] + D[9]*b[2]*c[2])/(36*V)
,
(D[10]*c[2]*c[2] + D[11]*b[2]*c[2] + D[20]*b[2]*d[2] + D[22]*b[2]*c[2] + D[23]*b[2]*b[2] + D[26]*d[2]*d[2] + D[28]*c[2]*d[2] + D[29]*b[2]*d[2] + D[8]*c[2]*d[2])/(36*V)
,
(D[11]*c[2]*d[3] + D[18]*b[2]*b[3] + D[21]*b[2]*c[3] + D[23]*b[2]*d[3] + D[24]*b[3]*d[2] + D[27]*c[3]*d[2] + D[29]*d[2]*d[3] + D[6]*b[3]*c[2] + D[9]*c[2]*c[3])/(36*V)
,
(D[10]*c[2]*d[3] + D[19]*b[2]*c[3] + D[21]*b[2]*b[3] + D[22]*b[2]*d[3] + D[25]*c[3]*d[2] + D[27]*b[3]*d[2] + D[28]*d[2]*d[3] + D[7]*c[2]*c[3] + D[9]*b[3]*c[2])/(36*V)
,
(D[10]*c[2]*c[3] + D[11]*b[3]*c[2] + D[20]*b[2]*d[3] + D[22]*b[2]*c[3] + D[23]*b[2]*b[3] + D[26]*d[2]*d[3] + D[28]*c[3]*d[2] + D[29]*b[3]*d[2] + D[8]*c[2]*d[3])/(36*V)
,
(D[12]*b[0]*d[2] + D[15]*c[0]*d[2] + D[17]*d[0]*d[2] + D[24]*b[0]*c[2] + D[27]*c[0]*c[2] + D[29]*c[2]*d[0] + D[30]*b[0]*b[2] + D[33]*b[2]*c[0] + D[35]*b[2]*d[0])/(36*V)
,
(D[13]*c[0]*d[2] + D[15]*b[0]*d[2] + D[16]*d[0]*d[2] + D[25]*c[0]*c[2] + D[27]*b[0]*c[2] + D[28]*c[2]*d[0] + D[31]*b[2]*c[0] + D[33]*b[0]*b[2] + D[34]*b[2]*d[0])/(36*V)
,
(D[14]*d[0]*d[2] + D[16]*c[0]*d[2] + D[17]*b[0]*d[2] + D[26]*c[2]*d[0] + D[28]*c[0]*c[2] + D[29]*b[0]*c[2] + D[32]*b[2]*d[0] + D[34]*b[2]*c[0] + D[35]*b[0]*b[2])/(36*V)
,
(D[12]*b[1]*d[2] + D[15]*c[1]*d[2] + D[17]*d[1]*d[2] + D[24]*b[1]*c[2] + D[27]*c[1]*c[2] + D[29]*c[2]*d[1] + D[30]*b[1]*b[2] + D[33]*b[2]*c[1] + D[35]*b[2]*d[1])/(36*V)
,
(D[13]*c[1]*d[2] + D[15]*b[1]*d[2] + D[16]*d[1]*d[2] + D[25]*c[1]*c[2] + D[27]*b[1]*c[2] + D[28]*c[2]*d[1] + D[31]*b[2]*c[1] + D[33]*b[1]*b[2] + D[34]*b[2]*d[1])/(36*V)
,
(D[14]*d[1]*d[2] + D[16]*c[1]*d[2] + D[17]*b[1]*d[2] + D[26]*c[2]*d[1] + D[28]*c[1]*c[2] + D[29]*b[1]*c[2] + D[32]*b[2]*d[1] + D[34]*b[2]*c[1] + D[35]*b[1]*b[2])/(36*V)
,
(D[12]*b[2]*d[2] + D[15]*c[2]*d[2] + D[17]*d[2]*d[2] + D[24]*b[2]*c[2] + D[27]*c[2]*c[2] + D[29]*c[2]*d[2] + D[30]*b[2]*b[2] + D[33]*b[2]*c[2] + D[35]*b[2]*d[2])/(36*V)
,
(D[13]*c[2]*d[2] + D[15]*b[2]*d[2] + D[16]*d[2]*d[2] + D[25]*c[2]*c[2] + D[27]*b[2]*c[2] + D[28]*c[2]*d[2] + D[31]*b[2]*c[2] + D[33]*b[2]*b[2] + D[34]*b[2]*d[2])/(36*V)
,
(D[14]*d[2]*d[2] + D[16]*c[2]*d[2] + D[17]*b[2]*d[2] + D[26]*c[2]*d[2] + D[28]*c[2]*c[2] + D[29]*b[2]*c[2] + D[32]*b[2]*d[2] + D[34]*b[2]*c[2] + D[35]*b[2]*b[2])/(36*V)
,
(D[12]*b[3]*d[2] + D[15]*c[3]*d[2] + D[17]*d[2]*d[3] + D[24]*b[3]*c[2] + D[27]*c[2]*c[3] + D[29]*c[2]*d[3] + D[30]*b[2]*b[3] + D[33]*b[2]*c[3] + D[35]*b[2]*d[3])/(36*V)
,
(D[13]*c[3]*d[2] + D[15]*b[3]*d[2] + D[16]*d[2]*d[3] + D[25]*c[2]*c[3] + D[27]*b[3]*c[2] + D[28]*c[2]*d[3] + D[31]*b[2]*c[3] + D[33]*b[2]*b[3] + D[34]*b[2]*d[3])/(36*V)
,
(D[14]*d[2]*d[3] + D[16]*c[3]*d[2] + D[17]*b[3]*d[2] + D[26]*c[2]*d[3] + D[28]*c[2]*c[3] + D[29]*b[3]*c[2] + D[32]*b[2]*d[3] + D[34]*b[2]*c[3] + D[35]*b[2]*b[3])/(36*V)
,
(D[0]*b[0]*b[3] + D[18]*b[0]*c[3] + D[21]*c[0]*c[3] + D[23]*c[3]*d[0] + D[3]*b[3]*c[0] + D[30]*b[0]*d[3] + D[33]*c[0]*d[3] + D[35]*d[0]*d[3] + D[5]*b[3]*d[0])/(36*V)
,
(D[1]*b[3]*c[0] + D[19]*c[0]*c[3] + D[21]*b[0]*c[3] + D[22]*c[3]*d[0] + D[3]*b[0]*b[3] + D[31]*c[0]*d[3] + D[33]*b[0]*d[3] + D[34]*d[0]*d[3] + D[4]*b[3]*d[0])/(36*V)
,
(D[2]*b[3]*d[0] + D[20]*c[3]*d[0] + D[22]*c[0]*c[3] + D[23]*b[0]*c[3] + D[32]*d[0]*d[3] + D[34]*c[0]*d[3] + D[35]*b[0]*d[3] + D[4]*b[3]*c[0] + D[5]*b[0]*b[3])/(36*V)
,
(D[0]*b[1]*b[3] + D[18]*b[1]*c[3] + D[21]*c[1]*c[3] + D[23]*c[3]*d[1] + D[3]*b[3]*c[1] + D[30]*b[1]*d[3] + D[33]*c[1]*d[3] + D[35]*d[1]*d[3] + D[5]*b[3]*d[1])/(36*V)
,
(D[1]*b[3]*c[1] + D[19]*c[1]*c[3] + D[21]*b[1]*c[3] + D[22]*c[3]*d[1] + D[3]*b[1]*b[3] + D[31]*c[1]*d[3] + D[33]*b[1]*d[3] + D[34]*d[1]*d[3] + D[4]*b[3]*d[1])/(36*V)
,
(D[2]*b[3]*d[1] + D[20]*c[3]*d[1] + D[22]*c[1]*c[3] + D[23]*b[1]*c[3] + D[32]*d[1]*d[3] + D[34]*c[1]*d[3] + D[35]*b[1]*d[3] + D[4]*b[3]*c[1] + D[5]*b[1]*b[3])/(36*V)
,
(D[0]*b[2]*b[3] + D[18]*b[2]*c[3] + D[21]*c[2]*c[3] + D[23]*c[3]*d[2] + D[3]*b[3]*c[2] + D[30]*b[2]*d[3] + D[33]*c[2]*d[3] + D[35]*d[2]*d[3] + D[5]*b[3]*d[2])/(36*V)
,
(D[1]*b[3]*c[2] + D[19]*c[2]*c[3] + D[21]*b[2]*c[3] + D[22]*c[3]*d[2] + D[3]*b[2]*b[3] + D[31]*c[2]*d[3] + D[33]*b[2]*d[3] + D[34]*d[2]*d[3] + D[4]*b[3]*d[2])/(36*V)
,
(D[2]*b[3]*d[2] + D[20]*c[3]*d[2] + D[22]*c[2]*c[3] + D[23]*b[2]*c[3] + D[32]*d[2]*d[3] + D[34]*c[2]*d[3] + D[35]*b[2]*d[3] + D[4]*b[3]*c[2] + D[5]*b[2]*b[3])/(36*V)
,
(D[0]*b[3]*b[3] + D[18]*b[3]*c[3] + D[21]*c[3]*c[3] + D[23]*c[3]*d[3] + D[3]*b[3]*c[3] + D[30]*b[3]*d[3] + D[33]*c[3]*d[3] + D[35]*d[3]*d[3] + D[5]*b[3]*d[3])/(36*V)
,
(D[1]*b[3]*c[3] + D[19]*c[3]*c[3] + D[21]*b[3]*c[3] + D[22]*c[3]*d[3] + D[3]*b[3]*b[3] + D[31]*c[3]*d[3] + D[33]*b[3]*d[3] + D[34]*d[3]*d[3] + D[4]*b[3]*d[3])/(36*V)
,
(D[2]*b[3]*d[3] + D[20]*c[3]*d[3] + D[22]*c[3]*c[3] + D[23]*b[3]*c[3] + D[32]*d[3]*d[3] + D[34]*c[3]*d[3] + D[35]*b[3]*d[3] + D[4]*b[3]*c[3] + D[5]*b[3]*b[3])/(36*V)
,
(D[11]*c[3]*d[0] + D[18]*b[0]*b[3] + D[21]*b[3]*c[0] + D[23]*b[3]*d[0] + D[24]*b[0]*d[3] + D[27]*c[0]*d[3] + D[29]*d[0]*d[3] + D[6]*b[0]*c[3] + D[9]*c[0]*c[3])/(36*V)
,
(D[10]*c[3]*d[0] + D[19]*b[3]*c[0] + D[21]*b[0]*b[3] + D[22]*b[3]*d[0] + D[25]*c[0]*d[3] + D[27]*b[0]*d[3] + D[28]*d[0]*d[3] + D[7]*c[0]*c[3] + D[9]*b[0]*c[3])/(36*V)
,
(D[10]*c[0]*c[3] + D[11]*b[0]*c[3] + D[20]*b[3]*d[0] + D[22]*b[3]*c[0] + D[23]*b[0]*b[3] + D[26]*d[0]*d[3] + D[28]*c[0]*d[3] + D[29]*b[0]*d[3] + D[8]*c[3]*d[0])/(36*V)
,
(D[11]*c[3]*d[1] + D[18]*b[1]*b[3] + D[21]*b[3]*c[1] + D[23]*b[3]*d[1] + D[24]*b[1]*d[3] + D[27]*c[1]*d[3] + D[29]*d[1]*d[3] + D[6]*b[1]*c[3] + D[9]*c[1]*c[3])/(36*V)
,
(D[10]*c[3]*d[1] + D[19]*b[3]*c[1] + D[21]*b[1]*b[3] + D[22]*b[3]*d[1] + D[25]*c[1]*d[3] + D[27]*b[1]*d[3] + D[28]*d[1]*d[3] + D[7]*c[1]*c[3] + D[9]*b[1]*c[3])/(36*V)
,
(D[10]*c[1]*c[3] + D[11]*b[1]*c[3] + D[20]*b[3]*d[1] + D[22]*b[3]*c[1] + D[23]*b[1]*b[3] + D[26]*d[1]*d[3] + D[28]*c[1]*d[3] + D[29]*b[1]*d[3] + D[8]*c[3]*d[1])/(36*V)
,
(D[11]*c[3]*d[2] + D[18]*b[2]*b[3] + D[21]*b[3]*c[2] + D[23]*b[3]*d[2] + D[24]*b[2]*d[3] + D[27]*c[2]*d[3] + D[29]*d[2]*d[3] + D[6]*b[2]*c[3] + D[9]*c[2]*c[3])/(36*V)
,
(D[10]*c[3]*d[2] + D[19]*b[3]*c[2] + D[21]*b[2]*b[3] + D[22]*b[3]*d[2] + D[25]*c[2]*d[3] + D[27]*b[2]*d[3] + D[28]*d[2]*d[3] + D[7]*c[2]*c[3] + D[9]*b[2]*c[3])/(36*V)
,
(D[10]*c[2]*c[3] + D[11]*b[2]*c[3] + D[20]*b[3]*d[2] + D[22]*b[3]*c[2] + D[23]*b[2]*b[3] + D[26]*d[2]*d[3] + D[28]*c[2]*d[3] + D[29]*b[2]*d[3] + D[8]*c[3]*d[2])/(36*V)
,
(D[11]*c[3]*d[3] + D[18]*b[3]*b[3] + D[21]*b[3]*c[3] + D[23]*b[3]*d[3] + D[24]*b[3]*d[3] + D[27]*c[3]*d[3] + D[29]*d[3]*d[3] + D[6]*b[3]*c[3] + D[9]*c[3]*c[3])/(36*V)
,
(D[10]*c[3]*d[3] + D[19]*b[3]*c[3] + D[21]*b[3]*b[3] + D[22]*b[3]*d[3] + D[25]*c[3]*d[3] + D[27]*b[3]*d[3] + D[28]*d[3]*d[3] + D[7]*c[3]*c[3] + D[9]*b[3]*c[3])/(36*V)
,
(D[10]*c[3]*c[3] + D[11]*b[3]*c[3] + D[20]*b[3]*d[3] + D[22]*b[3]*c[3] + D[23]*b[3]*b[3] + D[26]*d[3]*d[3] + D[28]*c[3]*d[3] + D[29]*b[3]*d[3] + D[8]*c[3]*d[3])/(36*V)
,
(D[12]*b[0]*d[3] + D[15]*c[0]*d[3] + D[17]*d[0]*d[3] + D[24]*b[0]*c[3] + D[27]*c[0]*c[3] + D[29]*c[3]*d[0] + D[30]*b[0]*b[3] + D[33]*b[3]*c[0] + D[35]*b[3]*d[0])/(36*V)
,
(D[13]*c[0]*d[3] + D[15]*b[0]*d[3] + D[16]*d[0]*d[3] + D[25]*c[0]*c[3] + D[27]*b[0]*c[3] + D[28]*c[3]*d[0] + D[31]*b[3]*c[0] + D[33]*b[0]*b[3] + D[34]*b[3]*d[0])/(36*V)
,
(D[14]*d[0]*d[3] + D[16]*c[0]*d[3] + D[17]*b[0]*d[3] + D[26]*c[3]*d[0] + D[28]*c[0]*c[3] + D[29]*b[0]*c[3] + D[32]*b[3]*d[0] + D[34]*b[3]*c[0] + D[35]*b[0]*b[3])/(36*V)
,
(D[12]*b[1]*d[3] + D[15]*c[1]*d[3] + D[17]*d[1]*d[3] + D[24]*b[1]*c[3] + D[27]*c[1]*c[3] + D[29]*c[3]*d[1] + D[30]*b[1]*b[3] + D[33]*b[3]*c[1] + D[35]*b[3]*d[1])/(36*V)
,
(D[13]*c[1]*d[3] + D[15]*b[1]*d[3] + D[16]*d[1]*d[3] + D[25]*c[1]*c[3] + D[27]*b[1]*c[3] + D[28]*c[3]*d[1] + D[31]*b[3]*c[1] + D[33]*b[1]*b[3] + D[34]*b[3]*d[1])/(36*V)
,
(D[14]*d[1]*d[3] + D[16]*c[1]*d[3] + D[17]*b[1]*d[3] + D[26]*c[3]*d[1] + D[28]*c[1]*c[3] + D[29]*b[1]*c[3] + D[32]*b[3]*d[1] + D[34]*b[3]*c[1] + D[35]*b[1]*b[3])/(36*V)
,
(D[12]*b[2]*d[3] + D[15]*c[2]*d[3] + D[17]*d[2]*d[3] + D[24]*b[2]*c[3] + D[27]*c[2]*c[3] + D[29]*c[3]*d[2] + D[30]*b[2]*b[3] + D[33]*b[3]*c[2] + D[35]*b[3]*d[2])/(36*V)
,
(D[13]*c[2]*d[3] + D[15]*b[2]*d[3] + D[16]*d[2]*d[3] + D[25]*c[2]*c[3] + D[27]*b[2]*c[3] + D[28]*c[3]*d[2] + D[31]*b[3]*c[2] + D[33]*b[2]*b[3] + D[34]*b[3]*d[2])/(36*V)
,
(D[14]*d[2]*d[3] + D[16]*c[2]*d[3] + D[17]*b[2]*d[3] + D[26]*c[3]*d[2] + D[28]*c[2]*c[3] + D[29]*b[2]*c[3] + D[32]*b[3]*d[2] + D[34]*b[3]*c[2] + D[35]*b[2]*b[3])/(36*V)
,
(D[12]*b[3]*d[3] + D[15]*c[3]*d[3] + D[17]*d[3]*d[3] + D[24]*b[3]*c[3] + D[27]*c[3]*c[3] + D[29]*c[3]*d[3] + D[30]*b[3]*b[3] + D[33]*b[3]*c[3] + D[35]*b[3]*d[3])/(36*V)
,
(D[13]*c[3]*d[3] + D[15]*b[3]*d[3] + D[16]*d[3]*d[3] + D[25]*c[3]*c[3] + D[27]*b[3]*c[3] + D[28]*c[3]*d[3] + D[31]*b[3]*c[3] + D[33]*b[3]*b[3] + D[34]*b[3]*d[3])/(36*V)
,
(D[14]*d[3]*d[3] + D[16]*c[3]*d[3] + D[17]*b[3]*d[3] + D[26]*c[3]*d[3] + D[28]*c[3]*c[3] + D[29]*b[3]*c[3] + D[32]*b[3]*d[3] + D[34]*b[3]*c[3] + D[35]*b[3]*b[3])/(36*V)
};

    return k;
}

std::vector<double> TET4::get_DB(const std::vector<double>& D, const gp_Pnt& point) const{
    (void)point;
    const size_t N = this->NODES_PER_ELEM;

    const double* const a = this->coeffs.data();
    const double* const b = a + N;
    const double* const c = b + N;
    const double* const d = c + N;

    const double V = this->get_volume(1);

std::vector<double> DB{
(D[0]*b[0] + D[3]*c[0] + D[5]*d[0])/(6*V)
,
(D[1]*c[0] + D[3]*b[0] + D[4]*d[0])/(6*V)
,
(D[2]*d[0] + D[4]*c[0] + D[5]*b[0])/(6*V)
,
(D[0]*b[1] + D[3]*c[1] + D[5]*d[1])/(6*V)
,
(D[1]*c[1] + D[3]*b[1] + D[4]*d[1])/(6*V)
,
(D[2]*d[1] + D[4]*c[1] + D[5]*b[1])/(6*V)
,
(D[0]*b[2] + D[3]*c[2] + D[5]*d[2])/(6*V)
,
(D[1]*c[2] + D[3]*b[2] + D[4]*d[2])/(6*V)
,
(D[2]*d[2] + D[4]*c[2] + D[5]*b[2])/(6*V)
,
(D[0]*b[3] + D[3]*c[3] + D[5]*d[3])/(6*V)
,
(D[1]*c[3] + D[3]*b[3] + D[4]*d[3])/(6*V)
,
(D[2]*d[3] + D[4]*c[3] + D[5]*b[3])/(6*V)
,
(D[11]*d[0] + D[6]*b[0] + D[9]*c[0])/(6*V)
,
(D[10]*d[0] + D[7]*c[0] + D[9]*b[0])/(6*V)
,
(D[10]*c[0] + D[11]*b[0] + D[8]*d[0])/(6*V)
,
(D[11]*d[1] + D[6]*b[1] + D[9]*c[1])/(6*V)
,
(D[10]*d[1] + D[7]*c[1] + D[9]*b[1])/(6*V)
,
(D[10]*c[1] + D[11]*b[1] + D[8]*d[1])/(6*V)
,
(D[11]*d[2] + D[6]*b[2] + D[9]*c[2])/(6*V)
,
(D[10]*d[2] + D[7]*c[2] + D[9]*b[2])/(6*V)
,
(D[10]*c[2] + D[11]*b[2] + D[8]*d[2])/(6*V)
,
(D[11]*d[3] + D[6]*b[3] + D[9]*c[3])/(6*V)
,
(D[10]*d[3] + D[7]*c[3] + D[9]*b[3])/(6*V)
,
(D[10]*c[3] + D[11]*b[3] + D[8]*d[3])/(6*V)
,
(D[12]*b[0] + D[15]*c[0] + D[17]*d[0])/(6*V)
,
(D[13]*c[0] + D[15]*b[0] + D[16]*d[0])/(6*V)
,
(D[14]*d[0] + D[16]*c[0] + D[17]*b[0])/(6*V)
,
(D[12]*b[1] + D[15]*c[1] + D[17]*d[1])/(6*V)
,
(D[13]*c[1] + D[15]*b[1] + D[16]*d[1])/(6*V)
,
(D[14]*d[1] + D[16]*c[1] + D[17]*b[1])/(6*V)
,
(D[12]*b[2] + D[15]*c[2] + D[17]*d[2])/(6*V)
,
(D[13]*c[2] + D[15]*b[2] + D[16]*d[2])/(6*V)
,
(D[14]*d[2] + D[16]*c[2] + D[17]*b[2])/(6*V)
,
(D[12]*b[3] + D[15]*c[3] + D[17]*d[3])/(6*V)
,
(D[13]*c[3] + D[15]*b[3] + D[16]*d[3])/(6*V)
,
(D[14]*d[3] + D[16]*c[3] + D[17]*b[3])/(6*V)
,
(D[18]*b[0] + D[21]*c[0] + D[23]*d[0])/(6*V)
,
(D[19]*c[0] + D[21]*b[0] + D[22]*d[0])/(6*V)
,
(D[20]*d[0] + D[22]*c[0] + D[23]*b[0])/(6*V)
,
(D[18]*b[1] + D[21]*c[1] + D[23]*d[1])/(6*V)
,
(D[19]*c[1] + D[21]*b[1] + D[22]*d[1])/(6*V)
,
(D[20]*d[1] + D[22]*c[1] + D[23]*b[1])/(6*V)
,
(D[18]*b[2] + D[21]*c[2] + D[23]*d[2])/(6*V)
,
(D[19]*c[2] + D[21]*b[2] + D[22]*d[2])/(6*V)
,
(D[20]*d[2] + D[22]*c[2] + D[23]*b[2])/(6*V)
,
(D[18]*b[3] + D[21]*c[3] + D[23]*d[3])/(6*V)
,
(D[19]*c[3] + D[21]*b[3] + D[22]*d[3])/(6*V)
,
(D[20]*d[3] + D[22]*c[3] + D[23]*b[3])/(6*V)
,
(D[24]*b[0] + D[27]*c[0] + D[29]*d[0])/(6*V)
,
(D[25]*c[0] + D[27]*b[0] + D[28]*d[0])/(6*V)
,
(D[26]*d[0] + D[28]*c[0] + D[29]*b[0])/(6*V)
,
(D[24]*b[1] + D[27]*c[1] + D[29]*d[1])/(6*V)
,
(D[25]*c[1] + D[27]*b[1] + D[28]*d[1])/(6*V)
,
(D[26]*d[1] + D[28]*c[1] + D[29]*b[1])/(6*V)
,
(D[24]*b[2] + D[27]*c[2] + D[29]*d[2])/(6*V)
,
(D[25]*c[2] + D[27]*b[2] + D[28]*d[2])/(6*V)
,
(D[26]*d[2] + D[28]*c[2] + D[29]*b[2])/(6*V)
,
(D[24]*b[3] + D[27]*c[3] + D[29]*d[3])/(6*V)
,
(D[25]*c[3] + D[27]*b[3] + D[28]*d[3])/(6*V)
,
(D[26]*d[3] + D[28]*c[3] + D[29]*b[3])/(6*V)
,
(D[30]*b[0] + D[33]*c[0] + D[35]*d[0])/(6*V)
,
(D[31]*c[0] + D[33]*b[0] + D[34]*d[0])/(6*V)
,
(D[32]*d[0] + D[34]*c[0] + D[35]*b[0])/(6*V)
,
(D[30]*b[1] + D[33]*c[1] + D[35]*d[1])/(6*V)
,
(D[31]*c[1] + D[33]*b[1] + D[34]*d[1])/(6*V)
,
(D[32]*d[1] + D[34]*c[1] + D[35]*b[1])/(6*V)
,
(D[30]*b[2] + D[33]*c[2] + D[35]*d[2])/(6*V)
,
(D[31]*c[2] + D[33]*b[2] + D[34]*d[2])/(6*V)
,
(D[32]*d[2] + D[34]*c[2] + D[35]*b[2])/(6*V)
,
(D[30]*b[3] + D[33]*c[3] + D[35]*d[3])/(6*V)
,
(D[31]*c[3] + D[33]*b[3] + D[34]*d[3])/(6*V)
,
(D[32]*d[3] + D[34]*c[3] + D[35]*b[3])/(6*V)
};

    return DB;
}

std::vector<double> TET4::get_Nf(const double t, const std::vector<gp_Pnt>& points) const{
    (void)t;

    const gp_Vec v1(points[0], points[1]);
    const gp_Vec v2(points[0], points[2]);

    const double AA = v1.Crossed(v2).Magnitude()/6;
    double A[4] = {0,0,0,0};
    for(size_t i = 0; i < 4; ++i){
        for(size_t j = 0; j < 3; ++j){
            if(points[j].IsEqual(this->nodes[i]->point, Precision::Confusion())){
                A[i] = AA;
                break;
            }
        }
    }

    std::vector<double> Nf{
        A[0],  0,  0,
         0, A[0],  0,
         0,  0, A[0],
        A[1],  0,  0,
         0, A[1],  0,
         0,  0, A[1],
        A[2],  0,  0,
         0, A[2],  0,
         0,  0, A[2],
        A[3],  0,  0,
         0, A[3],  0,
         0,  0, A[3]
    };

    return Nf;
}

std::vector<double> TET4::get_phi_radial(const double t, const double beta, const double l, const std::vector<double>& v, const double dv, const double rho) const{
    const size_t N = this->NODES_PER_ELEM;
    const double V = this->get_volume(t);

    const double* const a = this->coeffs.data();
    const double* const b = a + N;
    const double* const c = b + N;
    const double* const d = c + N;

    std::vector<double> phi{
    (2*V*(-2*V*beta*rho + 2*V*dv + b[0]*l*v[0] + c[0]*l*v[1] + d[0]*l*v[2]) - b[0]*b[0]*l*l - c[0]*c[0]*l*l - d[0]*d[0]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[1]*l*v[0] + c[1]*l*v[1] + d[1]*l*v[2]) - b[0]*b[1]*l*l - c[0]*c[1]*l*l - d[0]*d[1]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[2]*l*v[0] + c[2]*l*v[1] + d[2]*l*v[2]) - b[0]*b[2]*l*l - c[0]*c[2]*l*l - d[0]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[3]*l*v[0] + c[3]*l*v[1] + d[3]*l*v[2]) - b[0]*b[3]*l*l - c[0]*c[3]*l*l - d[0]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[0]*l*v[0] + c[0]*l*v[1] + d[0]*l*v[2]) - b[0]*b[1]*l*l - c[0]*c[1]*l*l - d[0]*d[1]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[1]*l*v[0] + c[1]*l*v[1] + d[1]*l*v[2]) - b[1]*b[1]*l*l - c[1]*c[1]*l*l - d[1]*d[1]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[2]*l*v[0] + c[2]*l*v[1] + d[2]*l*v[2]) - b[1]*b[2]*l*l - c[1]*c[2]*l*l - d[1]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[3]*l*v[0] + c[3]*l*v[1] + d[3]*l*v[2]) - b[1]*b[3]*l*l - c[1]*c[3]*l*l - d[1]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[0]*l*v[0] + c[0]*l*v[1] + d[0]*l*v[2]) - b[0]*b[2]*l*l - c[0]*c[2]*l*l - d[0]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[1]*l*v[0] + c[1]*l*v[1] + d[1]*l*v[2]) - b[1]*b[2]*l*l - c[1]*c[2]*l*l - d[1]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[2]*l*v[0] + c[2]*l*v[1] + d[2]*l*v[2]) - b[2]*b[2]*l*l - c[2]*c[2]*l*l - d[2]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[3]*l*v[0] + c[3]*l*v[1] + d[3]*l*v[2]) - b[2]*b[3]*l*l - c[2]*c[3]*l*l - d[2]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[0]*l*v[0] + c[0]*l*v[1] + d[0]*l*v[2]) - b[0]*b[3]*l*l - c[0]*c[3]*l*l - d[0]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[1]*l*v[0] + c[1]*l*v[1] + d[1]*l*v[2]) - b[1]*b[3]*l*l - c[1]*c[3]*l*l - d[1]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[2]*l*v[0] + c[2]*l*v[1] + d[2]*l*v[2]) - b[2]*b[3]*l*l - c[2]*c[3]*l*l - d[2]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta*rho + 2*V*dv + b[3]*l*v[0] + c[3]*l*v[1] + d[3]*l*v[2]) - b[3]*b[3]*l*l - c[3]*c[3]*l*l - d[3]*d[3]*l*l)/(36*V)
    };

    return phi;
}

std::vector<double> TET4::get_phi_grad(const double t, const double beta) const{
    const double V = this->get_volume(t);

    std::vector<double> phi{
    V*beta/6
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/6
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/6
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/9
    ,
    V*beta/6
    };

    return phi;
}

std::vector<double> TET4::get_phi_unidirectional(const double t, const double beta, const double l, const std::vector<double>& v, const double vn) const{
    const size_t N = this->NODES_PER_ELEM;
    const double V = this->get_volume(t);

    const double* const a = this->coeffs.data();
    const double* const b = a + N;
    const double* const c = b + N;
    const double* const d = c + N;

    std::vector<double> phi{
    (2*V*(-2*V*beta + b[0]*l*v[0]*vn + c[0]*l*v[1]*vn + d[0]*l*v[2]*vn) - b[0]*b[0]*l*l - c[0]*c[0]*l*l - d[0]*d[0]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[1]*l*v[0]*vn + c[1]*l*v[1]*vn + d[1]*l*v[2]*vn) - b[0]*b[1]*l*l - c[0]*c[1]*l*l - d[0]*d[1]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[2]*l*v[0]*vn + c[2]*l*v[1]*vn + d[2]*l*v[2]*vn) - b[0]*b[2]*l*l - c[0]*c[2]*l*l - d[0]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[3]*l*v[0]*vn + c[3]*l*v[1]*vn + d[3]*l*v[2]*vn) - b[0]*b[3]*l*l - c[0]*c[3]*l*l - d[0]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[0]*l*v[0]*vn + c[0]*l*v[1]*vn + d[0]*l*v[2]*vn) - b[0]*b[1]*l*l - c[0]*c[1]*l*l - d[0]*d[1]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[1]*l*v[0]*vn + c[1]*l*v[1]*vn + d[1]*l*v[2]*vn) - b[1]*b[1]*l*l - c[1]*c[1]*l*l - d[1]*d[1]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[2]*l*v[0]*vn + c[2]*l*v[1]*vn + d[2]*l*v[2]*vn) - b[1]*b[2]*l*l - c[1]*c[2]*l*l - d[1]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[3]*l*v[0]*vn + c[3]*l*v[1]*vn + d[3]*l*v[2]*vn) - b[1]*b[3]*l*l - c[1]*c[3]*l*l - d[1]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[0]*l*v[0]*vn + c[0]*l*v[1]*vn + d[0]*l*v[2]*vn) - b[0]*b[2]*l*l - c[0]*c[2]*l*l - d[0]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[1]*l*v[0]*vn + c[1]*l*v[1]*vn + d[1]*l*v[2]*vn) - b[1]*b[2]*l*l - c[1]*c[2]*l*l - d[1]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[2]*l*v[0]*vn + c[2]*l*v[1]*vn + d[2]*l*v[2]*vn) - b[2]*b[2]*l*l - c[2]*c[2]*l*l - d[2]*d[2]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[3]*l*v[0]*vn + c[3]*l*v[1]*vn + d[3]*l*v[2]*vn) - b[2]*b[3]*l*l - c[2]*c[3]*l*l - d[2]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[0]*l*v[0]*vn + c[0]*l*v[1]*vn + d[0]*l*v[2]*vn) - b[0]*b[3]*l*l - c[0]*c[3]*l*l - d[0]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[1]*l*v[0]*vn + c[1]*l*v[1]*vn + d[1]*l*v[2]*vn) - b[1]*b[3]*l*l - c[1]*c[3]*l*l - d[1]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[2]*l*v[0]*vn + c[2]*l*v[1]*vn + d[2]*l*v[2]*vn) - b[2]*b[3]*l*l - c[2]*c[3]*l*l - d[2]*d[3]*l*l)/(36*V)
    ,
    (2*V*(-2*V*beta + b[3]*l*v[0]*vn + c[3]*l*v[1]*vn + d[3]*l*v[2]*vn) - b[3]*b[3]*l*l - c[3]*c[3]*l*l - d[3]*d[3]*l*l)/(36*V)
    };

    return phi;
}

std::vector<double> TET4::helmholtz_tensor(const double t, const double r) const{
    const size_t N = this->NODES_PER_ELEM;
    const double V = this->get_volume(t);

    const double* const a = this->coeffs.data();
    const double* const b = a + N;
    const double* const c = b + N;
    const double* const d = c + N;

    std::vector<double> h{
    (6*V*V + b[0]*b[0]*r*r + c[0]*c[0]*r*r + d[0]*d[0]*r*r)/(36*V)
    ,
    (4*V*V + b[0]*b[1]*r*r + c[0]*c[1]*r*r + d[0]*d[1]*r*r)/(36*V)
    ,
    (4*V*V + b[0]*b[2]*r*r + c[0]*c[2]*r*r + d[0]*d[2]*r*r)/(36*V)
    ,
    (4*V*V + b[0]*b[3]*r*r + c[0]*c[3]*r*r + d[0]*d[3]*r*r)/(36*V)
    ,
    (4*V*V + b[0]*b[1]*r*r + c[0]*c[1]*r*r + d[0]*d[1]*r*r)/(36*V)
    ,
    (6*V*V + b[1]*b[1]*r*r + c[1]*c[1]*r*r + d[1]*d[1]*r*r)/(36*V)
    ,
    (4*V*V + b[1]*b[2]*r*r + c[1]*c[2]*r*r + d[1]*d[2]*r*r)/(36*V)
    ,
    (4*V*V + b[1]*b[3]*r*r + c[1]*c[3]*r*r + d[1]*d[3]*r*r)/(36*V)
    ,
    (4*V*V + b[0]*b[2]*r*r + c[0]*c[2]*r*r + d[0]*d[2]*r*r)/(36*V)
    ,
    (4*V*V + b[1]*b[2]*r*r + c[1]*c[2]*r*r + d[1]*d[2]*r*r)/(36*V)
    ,
    (6*V*V + b[2]*b[2]*r*r + c[2]*c[2]*r*r + d[2]*d[2]*r*r)/(36*V)
    ,
    (4*V*V + b[2]*b[3]*r*r + c[2]*c[3]*r*r + d[2]*d[3]*r*r)/(36*V)
    ,
    (4*V*V + b[0]*b[3]*r*r + c[0]*c[3]*r*r + d[0]*d[3]*r*r)/(36*V)
    ,
    (4*V*V + b[1]*b[3]*r*r + c[1]*c[3]*r*r + d[1]*d[3]*r*r)/(36*V)
    ,
    (4*V*V + b[2]*b[3]*r*r + c[2]*c[3]*r*r + d[2]*d[3]*r*r)/(36*V)
    ,
    (6*V*V + b[3]*b[3]*r*r + c[3]*c[3]*r*r + d[3]*d[3]*r*r)/(36*V)
    };

    return h;
}

std::vector<double> TET4::helmholtz_vector(const double t) const{
    const double V = this->get_volume(t);

    double Ni = V/NODES_PER_ELEM;

    std::vector<double> NT{Ni, Ni, Ni, Ni};

    return NT;
}

std::vector<double> TET4::get_nodal_density_gradient(gp_Pnt p) const{
    (void)p;
    const size_t N = this->NODES_PER_ELEM;

    const double* const a = this->coeffs.data();
    const double* const b = a + N;
    const double* const c = b + N;
    const double* const d = c + N;

    const double V = this->get_volume(1.0);

    
    return std::vector<double>{b[0]/(6*V), b[1]/(6*V), b[2]/(6*V), b[3]/(6*V),
                               c[0]/(6*V), c[1]/(6*V), c[2]/(6*V), c[3]/(6*V),
                               d[0]/(6*V), d[1]/(6*V), d[2]/(6*V), d[3]/(6*V)};
}

}
