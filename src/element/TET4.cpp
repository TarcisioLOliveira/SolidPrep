/*
 *   Copyright (C) 2021 Tarc√≠sio Ladeia de Oliveira.
 *
 *   This file is part of SolidPrep
 *
 *   SolidPrep is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SolidPrep is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SolidPrep.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include <Eigen/Core>
#include <Eigen/Dense>
#include "element/TET4.hpp"
#include "boundary_element/BTRI3.hpp"
#include "cblas.h"
#include "logger.hpp"
#include <BRepBuilderAPI_MakeVertex.hxx>
#include <BRepBuilderAPI_MakeEdge.hxx>
#include <BRepBuilderAPI_MakeWire.hxx>
#include <BRepBuilderAPI_MakeFace.hxx>
#include <TopoDS_Wire.hxx>
#include <TopoDS_Face.hxx>
#include <TopoDS.hxx>
#include <IntTools_EdgeEdge.hxx>
#include <lapacke.h>

namespace element{

TET4::TET4(ElementShape s):
    MeshElementCommon3DTet<TET4>(s.nodes){

    this->get_coeffs();    
}

std::unique_ptr<BoundaryMeshElementFactory> TET4::get_boundary_element_info() {
    return std::unique_ptr<BoundaryMeshElementFactory>(new BoundaryMeshElementFactoryImpl<boundary_element::BTRI3>());
}

void TET4::get_coeffs(){
    constexpr size_t N = TET4::NODES_PER_ELEM;
    std::array<double, N> x, y, z;
    for(size_t i = 0; i < N; ++i){
        x[i] = this->nodes[i]->point.X();
        y[i] = this->nodes[i]->point.Y();
        z[i] = this->nodes[i]->point.Z();
    }

    std::array<double, N*N> M = 
        {1, x[0], y[0], z[0],
         1, x[1], y[1], z[1],
         1, x[2], y[2], z[2],
         1, x[3], y[3], z[3]};

    std::array<int, N> ipiv;

    // M*C = I -> C=M^-1
    // C = {a[0], a[1], a[2], a[3],
    //      b[0], b[1], b[2], b[3],
    //      c[0], c[1], c[2], c[3],
    //      d[0], d[1], d[2], d[3]}
    int info = LAPACKE_dgetrf(LAPACK_COL_MAJOR, N, N, M.data(), N, ipiv.data());
    logger::log_assert(info == 0, logger::ERROR, "LAPACKE returned {} while calculating LU in TET4.", info);
    info = LAPACKE_dgetri(LAPACK_COL_MAJOR, N, M.data(), N, ipiv.data());
    logger::log_assert(info == 0, logger::ERROR, "LAPACKE returned {} while calculating computing inverse from LU in TET4.", info);

    this->V = this->get_volume(1.0);
    for(auto& m:M){
        m *= 6*V;
    }

    std::copy(M.begin(), M.begin()+4, a);
    std::copy(M.begin()+4, M.begin()+8, b);
    std::copy(M.begin()+8, M.begin()+12, c);
    std::copy(M.begin()+12, M.begin()+16, d);
}

std::vector<double> TET4::get_k(const std::vector<double>& D, const double t) const{
    (void)t;

std::vector<double> k{
(D[0]*b[0]*b[0] + D[18]*b[0]*c[0] + D[21]*c[0]*c[0] + D[23]*c[0]*d[0] + D[3]*b[0]*c[0] + D[30]*b[0]*d[0] + D[33]*c[0]*d[0] + D[35]*d[0]*d[0] + D[5]*b[0]*d[0])/(36*V)
,
(D[1]*b[0]*c[0] + D[19]*c[0]*c[0] + D[21]*b[0]*c[0] + D[22]*c[0]*d[0] + D[3]*b[0]*b[0] + D[31]*c[0]*d[0] + D[33]*b[0]*d[0] + D[34]*d[0]*d[0] + D[4]*b[0]*d[0])/(36*V)
,
(D[2]*b[0]*d[0] + D[20]*c[0]*d[0] + D[22]*c[0]*c[0] + D[23]*b[0]*c[0] + D[32]*d[0]*d[0] + D[34]*c[0]*d[0] + D[35]*b[0]*d[0] + D[4]*b[0]*c[0] + D[5]*b[0]*b[0])/(36*V)
,
(D[0]*b[0]*b[1] + D[18]*b[1]*c[0] + D[21]*c[0]*c[1] + D[23]*c[0]*d[1] + D[3]*b[0]*c[1] + D[30]*b[1]*d[0] + D[33]*c[1]*d[0] + D[35]*d[0]*d[1] + D[5]*b[0]*d[1])/(36*V)
,
(D[1]*b[0]*c[1] + D[19]*c[0]*c[1] + D[21]*b[1]*c[0] + D[22]*c[0]*d[1] + D[3]*b[0]*b[1] + D[31]*c[1]*d[0] + D[33]*b[1]*d[0] + D[34]*d[0]*d[1] + D[4]*b[0]*d[1])/(36*V)
,
(D[2]*b[0]*d[1] + D[20]*c[0]*d[1] + D[22]*c[0]*c[1] + D[23]*b[1]*c[0] + D[32]*d[0]*d[1] + D[34]*c[1]*d[0] + D[35]*b[1]*d[0] + D[4]*b[0]*c[1] + D[5]*b[0]*b[1])/(36*V)
,
(D[0]*b[0]*b[2] + D[18]*b[2]*c[0] + D[21]*c[0]*c[2] + D[23]*c[0]*d[2] + D[3]*b[0]*c[2] + D[30]*b[2]*d[0] + D[33]*c[2]*d[0] + D[35]*d[0]*d[2] + D[5]*b[0]*d[2])/(36*V)
,
(D[1]*b[0]*c[2] + D[19]*c[0]*c[2] + D[21]*b[2]*c[0] + D[22]*c[0]*d[2] + D[3]*b[0]*b[2] + D[31]*c[2]*d[0] + D[33]*b[2]*d[0] + D[34]*d[0]*d[2] + D[4]*b[0]*d[2])/(36*V)
,
(D[2]*b[0]*d[2] + D[20]*c[0]*d[2] + D[22]*c[0]*c[2] + D[23]*b[2]*c[0] + D[32]*d[0]*d[2] + D[34]*c[2]*d[0] + D[35]*b[2]*d[0] + D[4]*b[0]*c[2] + D[5]*b[0]*b[2])/(36*V)
,
(D[0]*b[0]*b[3] + D[18]*b[3]*c[0] + D[21]*c[0]*c[3] + D[23]*c[0]*d[3] + D[3]*b[0]*c[3] + D[30]*b[3]*d[0] + D[33]*c[3]*d[0] + D[35]*d[0]*d[3] + D[5]*b[0]*d[3])/(36*V)
,
(D[1]*b[0]*c[3] + D[19]*c[0]*c[3] + D[21]*b[3]*c[0] + D[22]*c[0]*d[3] + D[3]*b[0]*b[3] + D[31]*c[3]*d[0] + D[33]*b[3]*d[0] + D[34]*d[0]*d[3] + D[4]*b[0]*d[3])/(36*V)
,
(D[2]*b[0]*d[3] + D[20]*c[0]*d[3] + D[22]*c[0]*c[3] + D[23]*b[3]*c[0] + D[32]*d[0]*d[3] + D[34]*c[3]*d[0] + D[35]*b[3]*d[0] + D[4]*b[0]*c[3] + D[5]*b[0]*b[3])/(36*V)
,
(D[11]*c[0]*d[0] + D[18]*b[0]*b[0] + D[21]*b[0]*c[0] + D[23]*b[0]*d[0] + D[24]*b[0]*d[0] + D[27]*c[0]*d[0] + D[29]*d[0]*d[0] + D[6]*b[0]*c[0] + D[9]*c[0]*c[0])/(36*V)
,
(D[10]*c[0]*d[0] + D[19]*b[0]*c[0] + D[21]*b[0]*b[0] + D[22]*b[0]*d[0] + D[25]*c[0]*d[0] + D[27]*b[0]*d[0] + D[28]*d[0]*d[0] + D[7]*c[0]*c[0] + D[9]*b[0]*c[0])/(36*V)
,
(D[10]*c[0]*c[0] + D[11]*b[0]*c[0] + D[20]*b[0]*d[0] + D[22]*b[0]*c[0] + D[23]*b[0]*b[0] + D[26]*d[0]*d[0] + D[28]*c[0]*d[0] + D[29]*b[0]*d[0] + D[8]*c[0]*d[0])/(36*V)
,
(D[11]*c[0]*d[1] + D[18]*b[0]*b[1] + D[21]*b[0]*c[1] + D[23]*b[0]*d[1] + D[24]*b[1]*d[0] + D[27]*c[1]*d[0] + D[29]*d[0]*d[1] + D[6]*b[1]*c[0] + D[9]*c[0]*c[1])/(36*V)
,
(D[10]*c[0]*d[1] + D[19]*b[0]*c[1] + D[21]*b[0]*b[1] + D[22]*b[0]*d[1] + D[25]*c[1]*d[0] + D[27]*b[1]*d[0] + D[28]*d[0]*d[1] + D[7]*c[0]*c[1] + D[9]*b[1]*c[0])/(36*V)
,
(D[10]*c[0]*c[1] + D[11]*b[1]*c[0] + D[20]*b[0]*d[1] + D[22]*b[0]*c[1] + D[23]*b[0]*b[1] + D[26]*d[0]*d[1] + D[28]*c[1]*d[0] + D[29]*b[1]*d[0] + D[8]*c[0]*d[1])/(36*V)
,
(D[11]*c[0]*d[2] + D[18]*b[0]*b[2] + D[21]*b[0]*c[2] + D[23]*b[0]*d[2] + D[24]*b[2]*d[0] + D[27]*c[2]*d[0] + D[29]*d[0]*d[2] + D[6]*b[2]*c[0] + D[9]*c[0]*c[2])/(36*V)
,
(D[10]*c[0]*d[2] + D[19]*b[0]*c[2] + D[21]*b[0]*b[2] + D[22]*b[0]*d[2] + D[25]*c[2]*d[0] + D[27]*b[2]*d[0] + D[28]*d[0]*d[2] + D[7]*c[0]*c[2] + D[9]*b[2]*c[0])/(36*V)
,
(D[10]*c[0]*c[2] + D[11]*b[2]*c[0] + D[20]*b[0]*d[2] + D[22]*b[0]*c[2] + D[23]*b[0]*b[2] + D[26]*d[0]*d[2] + D[28]*c[2]*d[0] + D[29]*b[2]*d[0] + D[8]*c[0]*d[2])/(36*V)
,
(D[11]*c[0]*d[3] + D[18]*b[0]*b[3] + D[21]*b[0]*c[3] + D[23]*b[0]*d[3] + D[24]*b[3]*d[0] + D[27]*c[3]*d[0] + D[29]*d[0]*d[3] + D[6]*b[3]*c[0] + D[9]*c[0]*c[3])/(36*V)
,
(D[10]*c[0]*d[3] + D[19]*b[0]*c[3] + D[21]*b[0]*b[3] + D[22]*b[0]*d[3] + D[25]*c[3]*d[0] + D[27]*b[3]*d[0] + D[28]*d[0]*d[3] + D[7]*c[0]*c[3] + D[9]*b[3]*c[0])/(36*V)
,
(D[10]*c[0]*c[3] + D[11]*b[3]*c[0] + D[20]*b[0]*d[3] + D[22]*b[0]*c[3] + D[23]*b[0]*b[3] + D[26]*d[0]*d[3] + D[28]*c[3]*d[0] + D[29]*b[3]*d[0] + D[8]*c[0]*d[3])/(36*V)
,
(D[12]*b[0]*d[0] + D[15]*c[0]*d[0] + D[17]*d[0]*d[0] + D[24]*b[0]*c[0] + D[27]*c[0]*c[0] + D[29]*c[0]*d[0] + D[30]*b[0]*b[0] + D[33]*b[0]*c[0] + D[35]*b[0]*d[0])/(36*V)
,
(D[13]*c[0]*d[0] + D[15]*b[0]*d[0] + D[16]*d[0]*d[0] + D[25]*c[0]*c[0] + D[27]*b[0]*c[0] + D[28]*c[0]*d[0] + D[31]*b[0]*c[0] + D[33]*b[0]*b[0] + D[34]*b[0]*d[0])/(36*V)
,
(D[14]*d[0]*d[0] + D[16]*c[0]*d[0] + D[17]*b[0]*d[0] + D[26]*c[0]*d[0] + D[28]*c[0]*c[0] + D[29]*b[0]*c[0] + D[32]*b[0]*d[0] + D[34]*b[0]*c[0] + D[35]*b[0]*b[0])/(36*V)
,
(D[12]*b[1]*d[0] + D[15]*c[1]*d[0] + D[17]*d[0]*d[1] + D[24]*b[1]*c[0] + D[27]*c[0]*c[1] + D[29]*c[0]*d[1] + D[30]*b[0]*b[1] + D[33]*b[0]*c[1] + D[35]*b[0]*d[1])/(36*V)
,
(D[13]*c[1]*d[0] + D[15]*b[1]*d[0] + D[16]*d[0]*d[1] + D[25]*c[0]*c[1] + D[27]*b[1]*c[0] + D[28]*c[0]*d[1] + D[31]*b[0]*c[1] + D[33]*b[0]*b[1] + D[34]*b[0]*d[1])/(36*V)
,
(D[14]*d[0]*d[1] + D[16]*c[1]*d[0] + D[17]*b[1]*d[0] + D[26]*c[0]*d[1] + D[28]*c[0]*c[1] + D[29]*b[1]*c[0] + D[32]*b[0]*d[1] + D[34]*b[0]*c[1] + D[35]*b[0]*b[1])/(36*V)
,
(D[12]*b[2]*d[0] + D[15]*c[2]*d[0] + D[17]*d[0]*d[2] + D[24]*b[2]*c[0] + D[27]*c[0]*c[2] + D[29]*c[0]*d[2] + D[30]*b[0]*b[2] + D[33]*b[0]*c[2] + D[35]*b[0]*d[2])/(36*V)
,
(D[13]*c[2]*d[0] + D[15]*b[2]*d[0] + D[16]*d[0]*d[2] + D[25]*c[0]*c[2] + D[27]*b[2]*c[0] + D[28]*c[0]*d[2] + D[31]*b[0]*c[2] + D[33]*b[0]*b[2] + D[34]*b[0]*d[2])/(36*V)
,
(D[14]*d[0]*d[2] + D[16]*c[2]*d[0] + D[17]*b[2]*d[0] + D[26]*c[0]*d[2] + D[28]*c[0]*c[2] + D[29]*b[2]*c[0] + D[32]*b[0]*d[2] + D[34]*b[0]*c[2] + D[35]*b[0]*b[2])/(36*V)
,
(D[12]*b[3]*d[0] + D[15]*c[3]*d[0] + D[17]*d[0]*d[3] + D[24]*b[3]*c[0] + D[27]*c[0]*c[3] + D[29]*c[0]*d[3] + D[30]*b[0]*b[3] + D[33]*b[0]*c[3] + D[35]*b[0]*d[3])/(36*V)
,
(D[13]*c[3]*d[0] + D[15]*b[3]*d[0] + D[16]*d[0]*d[3] + D[25]*c[0]*c[3] + D[27]*b[3]*c[0] + D[28]*c[0]*d[3] + D[31]*b[0]*c[3] + D[33]*b[0]*b[3] + D[34]*b[0]*d[3])/(36*V)
,
(D[14]*d[0]*d[3] + D[16]*c[3]*d[0] + D[17]*b[3]*d[0] + D[26]*c[0]*d[3] + D[28]*c[0]*c[3] + D[29]*b[3]*c[0] + D[32]*b[0]*d[3] + D[34]*b[0]*c[3] + D[35]*b[0]*b[3])/(36*V)
,
(D[0]*b[0]*b[1] + D[18]*b[0]*c[1] + D[21]*c[0]*c[1] + D[23]*c[1]*d[0] + D[3]*b[1]*c[0] + D[30]*b[0]*d[1] + D[33]*c[0]*d[1] + D[35]*d[0]*d[1] + D[5]*b[1]*d[0])/(36*V)
,
(D[1]*b[1]*c[0] + D[19]*c[0]*c[1] + D[21]*b[0]*c[1] + D[22]*c[1]*d[0] + D[3]*b[0]*b[1] + D[31]*c[0]*d[1] + D[33]*b[0]*d[1] + D[34]*d[0]*d[1] + D[4]*b[1]*d[0])/(36*V)
,
(D[2]*b[1]*d[0] + D[20]*c[1]*d[0] + D[22]*c[0]*c[1] + D[23]*b[0]*c[1] + D[32]*d[0]*d[1] + D[34]*c[0]*d[1] + D[35]*b[0]*d[1] + D[4]*b[1]*c[0] + D[5]*b[0]*b[1])/(36*V)
,
(D[0]*b[1]*b[1] + D[18]*b[1]*c[1] + D[21]*c[1]*c[1] + D[23]*c[1]*d[1] + D[3]*b[1]*c[1] + D[30]*b[1]*d[1] + D[33]*c[1]*d[1] + D[35]*d[1]*d[1] + D[5]*b[1]*d[1])/(36*V)
,
(D[1]*b[1]*c[1] + D[19]*c[1]*c[1] + D[21]*b[1]*c[1] + D[22]*c[1]*d[1] + D[3]*b[1]*b[1] + D[31]*c[1]*d[1] + D[33]*b[1]*d[1] + D[34]*d[1]*d[1] + D[4]*b[1]*d[1])/(36*V)
,
(D[2]*b[1]*d[1] + D[20]*c[1]*d[1] + D[22]*c[1]*c[1] + D[23]*b[1]*c[1] + D[32]*d[1]*d[1] + D[34]*c[1]*d[1] + D[35]*b[1]*d[1] + D[4]*b[1]*c[1] + D[5]*b[1]*b[1])/(36*V)
,
(D[0]*b[1]*b[2] + D[18]*b[2]*c[1] + D[21]*c[1]*c[2] + D[23]*c[1]*d[2] + D[3]*b[1]*c[2] + D[30]*b[2]*d[1] + D[33]*c[2]*d[1] + D[35]*d[1]*d[2] + D[5]*b[1]*d[2])/(36*V)
,
(D[1]*b[1]*c[2] + D[19]*c[1]*c[2] + D[21]*b[2]*c[1] + D[22]*c[1]*d[2] + D[3]*b[1]*b[2] + D[31]*c[2]*d[1] + D[33]*b[2]*d[1] + D[34]*d[1]*d[2] + D[4]*b[1]*d[2])/(36*V)
,
(D[2]*b[1]*d[2] + D[20]*c[1]*d[2] + D[22]*c[1]*c[2] + D[23]*b[2]*c[1] + D[32]*d[1]*d[2] + D[34]*c[2]*d[1] + D[35]*b[2]*d[1] + D[4]*b[1]*c[2] + D[5]*b[1]*b[2])/(36*V)
,
(D[0]*b[1]*b[3] + D[18]*b[3]*c[1] + D[21]*c[1]*c[3] + D[23]*c[1]*d[3] + D[3]*b[1]*c[3] + D[30]*b[3]*d[1] + D[33]*c[3]*d[1] + D[35]*d[1]*d[3] + D[5]*b[1]*d[3])/(36*V)
,
(D[1]*b[1]*c[3] + D[19]*c[1]*c[3] + D[21]*b[3]*c[1] + D[22]*c[1]*d[3] + D[3]*b[1]*b[3] + D[31]*c[3]*d[1] + D[33]*b[3]*d[1] + D[34]*d[1]*d[3] + D[4]*b[1]*d[3])/(36*V)
,
(D[2]*b[1]*d[3] + D[20]*c[1]*d[3] + D[22]*c[1]*c[3] + D[23]*b[3]*c[1] + D[32]*d[1]*d[3] + D[34]*c[3]*d[1] + D[35]*b[3]*d[1] + D[4]*b[1]*c[3] + D[5]*b[1]*b[3])/(36*V)
,
(D[11]*c[1]*d[0] + D[18]*b[0]*b[1] + D[21]*b[1]*c[0] + D[23]*b[1]*d[0] + D[24]*b[0]*d[1] + D[27]*c[0]*d[1] + D[29]*d[0]*d[1] + D[6]*b[0]*c[1] + D[9]*c[0]*c[1])/(36*V)
,
(D[10]*c[1]*d[0] + D[19]*b[1]*c[0] + D[21]*b[0]*b[1] + D[22]*b[1]*d[0] + D[25]*c[0]*d[1] + D[27]*b[0]*d[1] + D[28]*d[0]*d[1] + D[7]*c[0]*c[1] + D[9]*b[0]*c[1])/(36*V)
,
(D[10]*c[0]*c[1] + D[11]*b[0]*c[1] + D[20]*b[1]*d[0] + D[22]*b[1]*c[0] + D[23]*b[0]*b[1] + D[26]*d[0]*d[1] + D[28]*c[0]*d[1] + D[29]*b[0]*d[1] + D[8]*c[1]*d[0])/(36*V)
,
(D[11]*c[1]*d[1] + D[18]*b[1]*b[1] + D[21]*b[1]*c[1] + D[23]*b[1]*d[1] + D[24]*b[1]*d[1] + D[27]*c[1]*d[1] + D[29]*d[1]*d[1] + D[6]*b[1]*c[1] + D[9]*c[1]*c[1])/(36*V)
,
(D[10]*c[1]*d[1] + D[19]*b[1]*c[1] + D[21]*b[1]*b[1] + D[22]*b[1]*d[1] + D[25]*c[1]*d[1] + D[27]*b[1]*d[1] + D[28]*d[1]*d[1] + D[7]*c[1]*c[1] + D[9]*b[1]*c[1])/(36*V)
,
(D[10]*c[1]*c[1] + D[11]*b[1]*c[1] + D[20]*b[1]*d[1] + D[22]*b[1]*c[1] + D[23]*b[1]*b[1] + D[26]*d[1]*d[1] + D[28]*c[1]*d[1] + D[29]*b[1]*d[1] + D[8]*c[1]*d[1])/(36*V)
,
(D[11]*c[1]*d[2] + D[18]*b[1]*b[2] + D[21]*b[1]*c[2] + D[23]*b[1]*d[2] + D[24]*b[2]*d[1] + D[27]*c[2]*d[1] + D[29]*d[1]*d[2] + D[6]*b[2]*c[1] + D[9]*c[1]*c[2])/(36*V)
,
(D[10]*c[1]*d[2] + D[19]*b[1]*c[2] + D[21]*b[1]*b[2] + D[22]*b[1]*d[2] + D[25]*c[2]*d[1] + D[27]*b[2]*d[1] + D[28]*d[1]*d[2] + D[7]*c[1]*c[2] + D[9]*b[2]*c[1])/(36*V)
,
(D[10]*c[1]*c[2] + D[11]*b[2]*c[1] + D[20]*b[1]*d[2] + D[22]*b[1]*c[2] + D[23]*b[1]*b[2] + D[26]*d[1]*d[2] + D[28]*c[2]*d[1] + D[29]*b[2]*d[1] + D[8]*c[1]*d[2])/(36*V)
,
(D[11]*c[1]*d[3] + D[18]*b[1]*b[3] + D[21]*b[1]*c[3] + D[23]*b[1]*d[3] + D[24]*b[3]*d[1] + D[27]*c[3]*d[1] + D[29]*d[1]*d[3] + D[6]*b[3]*c[1] + D[9]*c[1]*c[3])/(36*V)
,
(D[10]*c[1]*d[3] + D[19]*b[1]*c[3] + D[21]*b[1]*b[3] + D[22]*b[1]*d[3] + D[25]*c[3]*d[1] + D[27]*b[3]*d[1] + D[28]*d[1]*d[3] + D[7]*c[1]*c[3] + D[9]*b[3]*c[1])/(36*V)
,
(D[10]*c[1]*c[3] + D[11]*b[3]*c[1] + D[20]*b[1]*d[3] + D[22]*b[1]*c[3] + D[23]*b[1]*b[3] + D[26]*d[1]*d[3] + D[28]*c[3]*d[1] + D[29]*b[3]*d[1] + D[8]*c[1]*d[3])/(36*V)
,
(D[12]*b[0]*d[1] + D[15]*c[0]*d[1] + D[17]*d[0]*d[1] + D[24]*b[0]*c[1] + D[27]*c[0]*c[1] + D[29]*c[1]*d[0] + D[30]*b[0]*b[1] + D[33]*b[1]*c[0] + D[35]*b[1]*d[0])/(36*V)
,
(D[13]*c[0]*d[1] + D[15]*b[0]*d[1] + D[16]*d[0]*d[1] + D[25]*c[0]*c[1] + D[27]*b[0]*c[1] + D[28]*c[1]*d[0] + D[31]*b[1]*c[0] + D[33]*b[0]*b[1] + D[34]*b[1]*d[0])/(36*V)
,
(D[14]*d[0]*d[1] + D[16]*c[0]*d[1] + D[17]*b[0]*d[1] + D[26]*c[1]*d[0] + D[28]*c[0]*c[1] + D[29]*b[0]*c[1] + D[32]*b[1]*d[0] + D[34]*b[1]*c[0] + D[35]*b[0]*b[1])/(36*V)
,
(D[12]*b[1]*d[1] + D[15]*c[1]*d[1] + D[17]*d[1]*d[1] + D[24]*b[1]*c[1] + D[27]*c[1]*c[1] + D[29]*c[1]*d[1] + D[30]*b[1]*b[1] + D[33]*b[1]*c[1] + D[35]*b[1]*d[1])/(36*V)
,
(D[13]*c[1]*d[1] + D[15]*b[1]*d[1] + D[16]*d[1]*d[1] + D[25]*c[1]*c[1] + D[27]*b[1]*c[1] + D[28]*c[1]*d[1] + D[31]*b[1]*c[1] + D[33]*b[1]*b[1] + D[34]*b[1]*d[1])/(36*V)
,
(D[14]*d[1]*d[1] + D[16]*c[1]*d[1] + D[17]*b[1]*d[1] + D[26]*c[1]*d[1] + D[28]*c[1]*c[1] + D[29]*b[1]*c[1] + D[32]*b[1]*d[1] + D[34]*b[1]*c[1] + D[35]*b[1]*b[1])/(36*V)
,
(D[12]*b[2]*d[1] + D[15]*c[2]*d[1] + D[17]*d[1]*d[2] + D[24]*b[2]*c[1] + D[27]*c[1]*c[2] + D[29]*c[1]*d[2] + D[30]*b[1]*b[2] + D[33]*b[1]*c[2] + D[35]*b[1]*d[2])/(36*V)
,
(D[13]*c[2]*d[1] + D[15]*b[2]*d[1] + D[16]*d[1]*d[2] + D[25]*c[1]*c[2] + D[27]*b[2]*c[1] + D[28]*c[1]*d[2] + D[31]*b[1]*c[2] + D[33]*b[1]*b[2] + D[34]*b[1]*d[2])/(36*V)
,
(D[14]*d[1]*d[2] + D[16]*c[2]*d[1] + D[17]*b[2]*d[1] + D[26]*c[1]*d[2] + D[28]*c[1]*c[2] + D[29]*b[2]*c[1] + D[32]*b[1]*d[2] + D[34]*b[1]*c[2] + D[35]*b[1]*b[2])/(36*V)
,
(D[12]*b[3]*d[1] + D[15]*c[3]*d[1] + D[17]*d[1]*d[3] + D[24]*b[3]*c[1] + D[27]*c[1]*c[3] + D[29]*c[1]*d[3] + D[30]*b[1]*b[3] + D[33]*b[1]*c[3] + D[35]*b[1]*d[3])/(36*V)
,
(D[13]*c[3]*d[1] + D[15]*b[3]*d[1] + D[16]*d[1]*d[3] + D[25]*c[1]*c[3] + D[27]*b[3]*c[1] + D[28]*c[1]*d[3] + D[31]*b[1]*c[3] + D[33]*b[1]*b[3] + D[34]*b[1]*d[3])/(36*V)
,
(D[14]*d[1]*d[3] + D[16]*c[3]*d[1] + D[17]*b[3]*d[1] + D[26]*c[1]*d[3] + D[28]*c[1]*c[3] + D[29]*b[3]*c[1] + D[32]*b[1]*d[3] + D[34]*b[1]*c[3] + D[35]*b[1]*b[3])/(36*V)
,
(D[0]*b[0]*b[2] + D[18]*b[0]*c[2] + D[21]*c[0]*c[2] + D[23]*c[2]*d[0] + D[3]*b[2]*c[0] + D[30]*b[0]*d[2] + D[33]*c[0]*d[2] + D[35]*d[0]*d[2] + D[5]*b[2]*d[0])/(36*V)
,
(D[1]*b[2]*c[0] + D[19]*c[0]*c[2] + D[21]*b[0]*c[2] + D[22]*c[2]*d[0] + D[3]*b[0]*b[2] + D[31]*c[0]*d[2] + D[33]*b[0]*d[2] + D[34]*d[0]*d[2] + D[4]*b[2]*d[0])/(36*V)
,
(D[2]*b[2]*d[0] + D[20]*c[2]*d[0] + D[22]*c[0]*c[2] + D[23]*b[0]*c[2] + D[32]*d[0]*d[2] + D[34]*c[0]*d[2] + D[35]*b[0]*d[2] + D[4]*b[2]*c[0] + D[5]*b[0]*b[2])/(36*V)
,
(D[0]*b[1]*b[2] + D[18]*b[1]*c[2] + D[21]*c[1]*c[2] + D[23]*c[2]*d[1] + D[3]*b[2]*c[1] + D[30]*b[1]*d[2] + D[33]*c[1]*d[2] + D[35]*d[1]*d[2] + D[5]*b[2]*d[1])/(36*V)
,
(D[1]*b[2]*c[1] + D[19]*c[1]*c[2] + D[21]*b[1]*c[2] + D[22]*c[2]*d[1] + D[3]*b[1]*b[2] + D[31]*c[1]*d[2] + D[33]*b[1]*d[2] + D[34]*d[1]*d[2] + D[4]*b[2]*d[1])/(36*V)
,
(D[2]*b[2]*d[1] + D[20]*c[2]*d[1] + D[22]*c[1]*c[2] + D[23]*b[1]*c[2] + D[32]*d[1]*d[2] + D[34]*c[1]*d[2] + D[35]*b[1]*d[2] + D[4]*b[2]*c[1] + D[5]*b[1]*b[2])/(36*V)
,
(D[0]*b[2]*b[2] + D[18]*b[2]*c[2] + D[21]*c[2]*c[2] + D[23]*c[2]*d[2] + D[3]*b[2]*c[2] + D[30]*b[2]*d[2] + D[33]*c[2]*d[2] + D[35]*d[2]*d[2] + D[5]*b[2]*d[2])/(36*V)
,
(D[1]*b[2]*c[2] + D[19]*c[2]*c[2] + D[21]*b[2]*c[2] + D[22]*c[2]*d[2] + D[3]*b[2]*b[2] + D[31]*c[2]*d[2] + D[33]*b[2]*d[2] + D[34]*d[2]*d[2] + D[4]*b[2]*d[2])/(36*V)
,
(D[2]*b[2]*d[2] + D[20]*c[2]*d[2] + D[22]*c[2]*c[2] + D[23]*b[2]*c[2] + D[32]*d[2]*d[2] + D[34]*c[2]*d[2] + D[35]*b[2]*d[2] + D[4]*b[2]*c[2] + D[5]*b[2]*b[2])/(36*V)
,
(D[0]*b[2]*b[3] + D[18]*b[3]*c[2] + D[21]*c[2]*c[3] + D[23]*c[2]*d[3] + D[3]*b[2]*c[3] + D[30]*b[3]*d[2] + D[33]*c[3]*d[2] + D[35]*d[2]*d[3] + D[5]*b[2]*d[3])/(36*V)
,
(D[1]*b[2]*c[3] + D[19]*c[2]*c[3] + D[21]*b[3]*c[2] + D[22]*c[2]*d[3] + D[3]*b[2]*b[3] + D[31]*c[3]*d[2] + D[33]*b[3]*d[2] + D[34]*d[2]*d[3] + D[4]*b[2]*d[3])/(36*V)
,
(D[2]*b[2]*d[3] + D[20]*c[2]*d[3] + D[22]*c[2]*c[3] + D[23]*b[3]*c[2] + D[32]*d[2]*d[3] + D[34]*c[3]*d[2] + D[35]*b[3]*d[2] + D[4]*b[2]*c[3] + D[5]*b[2]*b[3])/(36*V)
,
(D[11]*c[2]*d[0] + D[18]*b[0]*b[2] + D[21]*b[2]*c[0] + D[23]*b[2]*d[0] + D[24]*b[0]*d[2] + D[27]*c[0]*d[2] + D[29]*d[0]*d[2] + D[6]*b[0]*c[2] + D[9]*c[0]*c[2])/(36*V)
,
(D[10]*c[2]*d[0] + D[19]*b[2]*c[0] + D[21]*b[0]*b[2] + D[22]*b[2]*d[0] + D[25]*c[0]*d[2] + D[27]*b[0]*d[2] + D[28]*d[0]*d[2] + D[7]*c[0]*c[2] + D[9]*b[0]*c[2])/(36*V)
,
(D[10]*c[0]*c[2] + D[11]*b[0]*c[2] + D[20]*b[2]*d[0] + D[22]*b[2]*c[0] + D[23]*b[0]*b[2] + D[26]*d[0]*d[2] + D[28]*c[0]*d[2] + D[29]*b[0]*d[2] + D[8]*c[2]*d[0])/(36*V)
,
(D[11]*c[2]*d[1] + D[18]*b[1]*b[2] + D[21]*b[2]*c[1] + D[23]*b[2]*d[1] + D[24]*b[1]*d[2] + D[27]*c[1]*d[2] + D[29]*d[1]*d[2] + D[6]*b[1]*c[2] + D[9]*c[1]*c[2])/(36*V)
,
(D[10]*c[2]*d[1] + D[19]*b[2]*c[1] + D[21]*b[1]*b[2] + D[22]*b[2]*d[1] + D[25]*c[1]*d[2] + D[27]*b[1]*d[2] + D[28]*d[1]*d[2] + D[7]*c[1]*c[2] + D[9]*b[1]*c[2])/(36*V)
,
(D[10]*c[1]*c[2] + D[11]*b[1]*c[2] + D[20]*b[2]*d[1] + D[22]*b[2]*c[1] + D[23]*b[1]*b[2] + D[26]*d[1]*d[2] + D[28]*c[1]*d[2] + D[29]*b[1]*d[2] + D[8]*c[2]*d[1])/(36*V)
,
(D[11]*c[2]*d[2] + D[18]*b[2]*b[2] + D[21]*b[2]*c[2] + D[23]*b[2]*d[2] + D[24]*b[2]*d[2] + D[27]*c[2]*d[2] + D[29]*d[2]*d[2] + D[6]*b[2]*c[2] + D[9]*c[2]*c[2])/(36*V)
,
(D[10]*c[2]*d[2] + D[19]*b[2]*c[2] + D[21]*b[2]*b[2] + D[22]*b[2]*d[2] + D[25]*c[2]*d[2] + D[27]*b[2]*d[2] + D[28]*d[2]*d[2] + D[7]*c[2]*c[2] + D[9]*b[2]*c[2])/(36*V)
,
(D[10]*c[2]*c[2] + D[11]*b[2]*c[2] + D[20]*b[2]*d[2] + D[22]*b[2]*c[2] + D[23]*b[2]*b[2] + D[26]*d[2]*d[2] + D[28]*c[2]*d[2] + D[29]*b[2]*d[2] + D[8]*c[2]*d[2])/(36*V)
,
(D[11]*c[2]*d[3] + D[18]*b[2]*b[3] + D[21]*b[2]*c[3] + D[23]*b[2]*d[3] + D[24]*b[3]*d[2] + D[27]*c[3]*d[2] + D[29]*d[2]*d[3] + D[6]*b[3]*c[2] + D[9]*c[2]*c[3])/(36*V)
,
(D[10]*c[2]*d[3] + D[19]*b[2]*c[3] + D[21]*b[2]*b[3] + D[22]*b[2]*d[3] + D[25]*c[3]*d[2] + D[27]*b[3]*d[2] + D[28]*d[2]*d[3] + D[7]*c[2]*c[3] + D[9]*b[3]*c[2])/(36*V)
,
(D[10]*c[2]*c[3] + D[11]*b[3]*c[2] + D[20]*b[2]*d[3] + D[22]*b[2]*c[3] + D[23]*b[2]*b[3] + D[26]*d[2]*d[3] + D[28]*c[3]*d[2] + D[29]*b[3]*d[2] + D[8]*c[2]*d[3])/(36*V)
,
(D[12]*b[0]*d[2] + D[15]*c[0]*d[2] + D[17]*d[0]*d[2] + D[24]*b[0]*c[2] + D[27]*c[0]*c[2] + D[29]*c[2]*d[0] + D[30]*b[0]*b[2] + D[33]*b[2]*c[0] + D[35]*b[2]*d[0])/(36*V)
,
(D[13]*c[0]*d[2] + D[15]*b[0]*d[2] + D[16]*d[0]*d[2] + D[25]*c[0]*c[2] + D[27]*b[0]*c[2] + D[28]*c[2]*d[0] + D[31]*b[2]*c[0] + D[33]*b[0]*b[2] + D[34]*b[2]*d[0])/(36*V)
,
(D[14]*d[0]*d[2] + D[16]*c[0]*d[2] + D[17]*b[0]*d[2] + D[26]*c[2]*d[0] + D[28]*c[0]*c[2] + D[29]*b[0]*c[2] + D[32]*b[2]*d[0] + D[34]*b[2]*c[0] + D[35]*b[0]*b[2])/(36*V)
,
(D[12]*b[1]*d[2] + D[15]*c[1]*d[2] + D[17]*d[1]*d[2] + D[24]*b[1]*c[2] + D[27]*c[1]*c[2] + D[29]*c[2]*d[1] + D[30]*b[1]*b[2] + D[33]*b[2]*c[1] + D[35]*b[2]*d[1])/(36*V)
,
(D[13]*c[1]*d[2] + D[15]*b[1]*d[2] + D[16]*d[1]*d[2] + D[25]*c[1]*c[2] + D[27]*b[1]*c[2] + D[28]*c[2]*d[1] + D[31]*b[2]*c[1] + D[33]*b[1]*b[2] + D[34]*b[2]*d[1])/(36*V)
,
(D[14]*d[1]*d[2] + D[16]*c[1]*d[2] + D[17]*b[1]*d[2] + D[26]*c[2]*d[1] + D[28]*c[1]*c[2] + D[29]*b[1]*c[2] + D[32]*b[2]*d[1] + D[34]*b[2]*c[1] + D[35]*b[1]*b[2])/(36*V)
,
(D[12]*b[2]*d[2] + D[15]*c[2]*d[2] + D[17]*d[2]*d[2] + D[24]*b[2]*c[2] + D[27]*c[2]*c[2] + D[29]*c[2]*d[2] + D[30]*b[2]*b[2] + D[33]*b[2]*c[2] + D[35]*b[2]*d[2])/(36*V)
,
(D[13]*c[2]*d[2] + D[15]*b[2]*d[2] + D[16]*d[2]*d[2] + D[25]*c[2]*c[2] + D[27]*b[2]*c[2] + D[28]*c[2]*d[2] + D[31]*b[2]*c[2] + D[33]*b[2]*b[2] + D[34]*b[2]*d[2])/(36*V)
,
(D[14]*d[2]*d[2] + D[16]*c[2]*d[2] + D[17]*b[2]*d[2] + D[26]*c[2]*d[2] + D[28]*c[2]*c[2] + D[29]*b[2]*c[2] + D[32]*b[2]*d[2] + D[34]*b[2]*c[2] + D[35]*b[2]*b[2])/(36*V)
,
(D[12]*b[3]*d[2] + D[15]*c[3]*d[2] + D[17]*d[2]*d[3] + D[24]*b[3]*c[2] + D[27]*c[2]*c[3] + D[29]*c[2]*d[3] + D[30]*b[2]*b[3] + D[33]*b[2]*c[3] + D[35]*b[2]*d[3])/(36*V)
,
(D[13]*c[3]*d[2] + D[15]*b[3]*d[2] + D[16]*d[2]*d[3] + D[25]*c[2]*c[3] + D[27]*b[3]*c[2] + D[28]*c[2]*d[3] + D[31]*b[2]*c[3] + D[33]*b[2]*b[3] + D[34]*b[2]*d[3])/(36*V)
,
(D[14]*d[2]*d[3] + D[16]*c[3]*d[2] + D[17]*b[3]*d[2] + D[26]*c[2]*d[3] + D[28]*c[2]*c[3] + D[29]*b[3]*c[2] + D[32]*b[2]*d[3] + D[34]*b[2]*c[3] + D[35]*b[2]*b[3])/(36*V)
,
(D[0]*b[0]*b[3] + D[18]*b[0]*c[3] + D[21]*c[0]*c[3] + D[23]*c[3]*d[0] + D[3]*b[3]*c[0] + D[30]*b[0]*d[3] + D[33]*c[0]*d[3] + D[35]*d[0]*d[3] + D[5]*b[3]*d[0])/(36*V)
,
(D[1]*b[3]*c[0] + D[19]*c[0]*c[3] + D[21]*b[0]*c[3] + D[22]*c[3]*d[0] + D[3]*b[0]*b[3] + D[31]*c[0]*d[3] + D[33]*b[0]*d[3] + D[34]*d[0]*d[3] + D[4]*b[3]*d[0])/(36*V)
,
(D[2]*b[3]*d[0] + D[20]*c[3]*d[0] + D[22]*c[0]*c[3] + D[23]*b[0]*c[3] + D[32]*d[0]*d[3] + D[34]*c[0]*d[3] + D[35]*b[0]*d[3] + D[4]*b[3]*c[0] + D[5]*b[0]*b[3])/(36*V)
,
(D[0]*b[1]*b[3] + D[18]*b[1]*c[3] + D[21]*c[1]*c[3] + D[23]*c[3]*d[1] + D[3]*b[3]*c[1] + D[30]*b[1]*d[3] + D[33]*c[1]*d[3] + D[35]*d[1]*d[3] + D[5]*b[3]*d[1])/(36*V)
,
(D[1]*b[3]*c[1] + D[19]*c[1]*c[3] + D[21]*b[1]*c[3] + D[22]*c[3]*d[1] + D[3]*b[1]*b[3] + D[31]*c[1]*d[3] + D[33]*b[1]*d[3] + D[34]*d[1]*d[3] + D[4]*b[3]*d[1])/(36*V)
,
(D[2]*b[3]*d[1] + D[20]*c[3]*d[1] + D[22]*c[1]*c[3] + D[23]*b[1]*c[3] + D[32]*d[1]*d[3] + D[34]*c[1]*d[3] + D[35]*b[1]*d[3] + D[4]*b[3]*c[1] + D[5]*b[1]*b[3])/(36*V)
,
(D[0]*b[2]*b[3] + D[18]*b[2]*c[3] + D[21]*c[2]*c[3] + D[23]*c[3]*d[2] + D[3]*b[3]*c[2] + D[30]*b[2]*d[3] + D[33]*c[2]*d[3] + D[35]*d[2]*d[3] + D[5]*b[3]*d[2])/(36*V)
,
(D[1]*b[3]*c[2] + D[19]*c[2]*c[3] + D[21]*b[2]*c[3] + D[22]*c[3]*d[2] + D[3]*b[2]*b[3] + D[31]*c[2]*d[3] + D[33]*b[2]*d[3] + D[34]*d[2]*d[3] + D[4]*b[3]*d[2])/(36*V)
,
(D[2]*b[3]*d[2] + D[20]*c[3]*d[2] + D[22]*c[2]*c[3] + D[23]*b[2]*c[3] + D[32]*d[2]*d[3] + D[34]*c[2]*d[3] + D[35]*b[2]*d[3] + D[4]*b[3]*c[2] + D[5]*b[2]*b[3])/(36*V)
,
(D[0]*b[3]*b[3] + D[18]*b[3]*c[3] + D[21]*c[3]*c[3] + D[23]*c[3]*d[3] + D[3]*b[3]*c[3] + D[30]*b[3]*d[3] + D[33]*c[3]*d[3] + D[35]*d[3]*d[3] + D[5]*b[3]*d[3])/(36*V)
,
(D[1]*b[3]*c[3] + D[19]*c[3]*c[3] + D[21]*b[3]*c[3] + D[22]*c[3]*d[3] + D[3]*b[3]*b[3] + D[31]*c[3]*d[3] + D[33]*b[3]*d[3] + D[34]*d[3]*d[3] + D[4]*b[3]*d[3])/(36*V)
,
(D[2]*b[3]*d[3] + D[20]*c[3]*d[3] + D[22]*c[3]*c[3] + D[23]*b[3]*c[3] + D[32]*d[3]*d[3] + D[34]*c[3]*d[3] + D[35]*b[3]*d[3] + D[4]*b[3]*c[3] + D[5]*b[3]*b[3])/(36*V)
,
(D[11]*c[3]*d[0] + D[18]*b[0]*b[3] + D[21]*b[3]*c[0] + D[23]*b[3]*d[0] + D[24]*b[0]*d[3] + D[27]*c[0]*d[3] + D[29]*d[0]*d[3] + D[6]*b[0]*c[3] + D[9]*c[0]*c[3])/(36*V)
,
(D[10]*c[3]*d[0] + D[19]*b[3]*c[0] + D[21]*b[0]*b[3] + D[22]*b[3]*d[0] + D[25]*c[0]*d[3] + D[27]*b[0]*d[3] + D[28]*d[0]*d[3] + D[7]*c[0]*c[3] + D[9]*b[0]*c[3])/(36*V)
,
(D[10]*c[0]*c[3] + D[11]*b[0]*c[3] + D[20]*b[3]*d[0] + D[22]*b[3]*c[0] + D[23]*b[0]*b[3] + D[26]*d[0]*d[3] + D[28]*c[0]*d[3] + D[29]*b[0]*d[3] + D[8]*c[3]*d[0])/(36*V)
,
(D[11]*c[3]*d[1] + D[18]*b[1]*b[3] + D[21]*b[3]*c[1] + D[23]*b[3]*d[1] + D[24]*b[1]*d[3] + D[27]*c[1]*d[3] + D[29]*d[1]*d[3] + D[6]*b[1]*c[3] + D[9]*c[1]*c[3])/(36*V)
,
(D[10]*c[3]*d[1] + D[19]*b[3]*c[1] + D[21]*b[1]*b[3] + D[22]*b[3]*d[1] + D[25]*c[1]*d[3] + D[27]*b[1]*d[3] + D[28]*d[1]*d[3] + D[7]*c[1]*c[3] + D[9]*b[1]*c[3])/(36*V)
,
(D[10]*c[1]*c[3] + D[11]*b[1]*c[3] + D[20]*b[3]*d[1] + D[22]*b[3]*c[1] + D[23]*b[1]*b[3] + D[26]*d[1]*d[3] + D[28]*c[1]*d[3] + D[29]*b[1]*d[3] + D[8]*c[3]*d[1])/(36*V)
,
(D[11]*c[3]*d[2] + D[18]*b[2]*b[3] + D[21]*b[3]*c[2] + D[23]*b[3]*d[2] + D[24]*b[2]*d[3] + D[27]*c[2]*d[3] + D[29]*d[2]*d[3] + D[6]*b[2]*c[3] + D[9]*c[2]*c[3])/(36*V)
,
(D[10]*c[3]*d[2] + D[19]*b[3]*c[2] + D[21]*b[2]*b[3] + D[22]*b[3]*d[2] + D[25]*c[2]*d[3] + D[27]*b[2]*d[3] + D[28]*d[2]*d[3] + D[7]*c[2]*c[3] + D[9]*b[2]*c[3])/(36*V)
,
(D[10]*c[2]*c[3] + D[11]*b[2]*c[3] + D[20]*b[3]*d[2] + D[22]*b[3]*c[2] + D[23]*b[2]*b[3] + D[26]*d[2]*d[3] + D[28]*c[2]*d[3] + D[29]*b[2]*d[3] + D[8]*c[3]*d[2])/(36*V)
,
(D[11]*c[3]*d[3] + D[18]*b[3]*b[3] + D[21]*b[3]*c[3] + D[23]*b[3]*d[3] + D[24]*b[3]*d[3] + D[27]*c[3]*d[3] + D[29]*d[3]*d[3] + D[6]*b[3]*c[3] + D[9]*c[3]*c[3])/(36*V)
,
(D[10]*c[3]*d[3] + D[19]*b[3]*c[3] + D[21]*b[3]*b[3] + D[22]*b[3]*d[3] + D[25]*c[3]*d[3] + D[27]*b[3]*d[3] + D[28]*d[3]*d[3] + D[7]*c[3]*c[3] + D[9]*b[3]*c[3])/(36*V)
,
(D[10]*c[3]*c[3] + D[11]*b[3]*c[3] + D[20]*b[3]*d[3] + D[22]*b[3]*c[3] + D[23]*b[3]*b[3] + D[26]*d[3]*d[3] + D[28]*c[3]*d[3] + D[29]*b[3]*d[3] + D[8]*c[3]*d[3])/(36*V)
,
(D[12]*b[0]*d[3] + D[15]*c[0]*d[3] + D[17]*d[0]*d[3] + D[24]*b[0]*c[3] + D[27]*c[0]*c[3] + D[29]*c[3]*d[0] + D[30]*b[0]*b[3] + D[33]*b[3]*c[0] + D[35]*b[3]*d[0])/(36*V)
,
(D[13]*c[0]*d[3] + D[15]*b[0]*d[3] + D[16]*d[0]*d[3] + D[25]*c[0]*c[3] + D[27]*b[0]*c[3] + D[28]*c[3]*d[0] + D[31]*b[3]*c[0] + D[33]*b[0]*b[3] + D[34]*b[3]*d[0])/(36*V)
,
(D[14]*d[0]*d[3] + D[16]*c[0]*d[3] + D[17]*b[0]*d[3] + D[26]*c[3]*d[0] + D[28]*c[0]*c[3] + D[29]*b[0]*c[3] + D[32]*b[3]*d[0] + D[34]*b[3]*c[0] + D[35]*b[0]*b[3])/(36*V)
,
(D[12]*b[1]*d[3] + D[15]*c[1]*d[3] + D[17]*d[1]*d[3] + D[24]*b[1]*c[3] + D[27]*c[1]*c[3] + D[29]*c[3]*d[1] + D[30]*b[1]*b[3] + D[33]*b[3]*c[1] + D[35]*b[3]*d[1])/(36*V)
,
(D[13]*c[1]*d[3] + D[15]*b[1]*d[3] + D[16]*d[1]*d[3] + D[25]*c[1]*c[3] + D[27]*b[1]*c[3] + D[28]*c[3]*d[1] + D[31]*b[3]*c[1] + D[33]*b[1]*b[3] + D[34]*b[3]*d[1])/(36*V)
,
(D[14]*d[1]*d[3] + D[16]*c[1]*d[3] + D[17]*b[1]*d[3] + D[26]*c[3]*d[1] + D[28]*c[1]*c[3] + D[29]*b[1]*c[3] + D[32]*b[3]*d[1] + D[34]*b[3]*c[1] + D[35]*b[1]*b[3])/(36*V)
,
(D[12]*b[2]*d[3] + D[15]*c[2]*d[3] + D[17]*d[2]*d[3] + D[24]*b[2]*c[3] + D[27]*c[2]*c[3] + D[29]*c[3]*d[2] + D[30]*b[2]*b[3] + D[33]*b[3]*c[2] + D[35]*b[3]*d[2])/(36*V)
,
(D[13]*c[2]*d[3] + D[15]*b[2]*d[3] + D[16]*d[2]*d[3] + D[25]*c[2]*c[3] + D[27]*b[2]*c[3] + D[28]*c[3]*d[2] + D[31]*b[3]*c[2] + D[33]*b[2]*b[3] + D[34]*b[3]*d[2])/(36*V)
,
(D[14]*d[2]*d[3] + D[16]*c[2]*d[3] + D[17]*b[2]*d[3] + D[26]*c[3]*d[2] + D[28]*c[2]*c[3] + D[29]*b[2]*c[3] + D[32]*b[3]*d[2] + D[34]*b[3]*c[2] + D[35]*b[2]*b[3])/(36*V)
,
(D[12]*b[3]*d[3] + D[15]*c[3]*d[3] + D[17]*d[3]*d[3] + D[24]*b[3]*c[3] + D[27]*c[3]*c[3] + D[29]*c[3]*d[3] + D[30]*b[3]*b[3] + D[33]*b[3]*c[3] + D[35]*b[3]*d[3])/(36*V)
,
(D[13]*c[3]*d[3] + D[15]*b[3]*d[3] + D[16]*d[3]*d[3] + D[25]*c[3]*c[3] + D[27]*b[3]*c[3] + D[28]*c[3]*d[3] + D[31]*b[3]*c[3] + D[33]*b[3]*b[3] + D[34]*b[3]*d[3])/(36*V)
,
(D[14]*d[3]*d[3] + D[16]*c[3]*d[3] + D[17]*b[3]*d[3] + D[26]*c[3]*d[3] + D[28]*c[3]*c[3] + D[29]*b[3]*c[3] + D[32]*b[3]*d[3] + D[34]*b[3]*c[3] + D[35]*b[3]*b[3])/(36*V)
};

    return k;
}
std::vector<double> TET4::get_B(const gp_Pnt& point) const{
    (void)point;
    std::vector<double> B{
    b[0]/(6*V)
    ,
    0
    ,
    0
    ,
    b[1]/(6*V)
    ,
    0
    ,
    0
    ,
    b[2]/(6*V)
    ,
    0
    ,
    0
    ,
    b[3]/(6*V)
    ,
    0
    ,
    0
    ,
    0
    ,
    c[0]/(6*V)
    ,
    0
    ,
    0
    ,
    c[1]/(6*V)
    ,
    0
    ,
    0
    ,
    c[2]/(6*V)
    ,
    0
    ,
    0
    ,
    c[3]/(6*V)
    ,
    0
    ,
    0
    ,
    0
    ,
    d[0]/(6*V)
    ,
    0
    ,
    0
    ,
    d[1]/(6*V)
    ,
    0
    ,
    0
    ,
    d[2]/(6*V)
    ,
    0
    ,
    0
    ,
    d[3]/(6*V)
    ,
    c[0]/(6*V)
    ,
    b[0]/(6*V)
    ,
    0
    ,
    c[1]/(6*V)
    ,
    b[1]/(6*V)
    ,
    0
    ,
    c[2]/(6*V)
    ,
    b[2]/(6*V)
    ,
    0
    ,
    c[3]/(6*V)
    ,
    b[3]/(6*V)
    ,
    0
    ,
    0
    ,
    d[0]/(6*V)
    ,
    c[0]/(6*V)
    ,
    0
    ,
    d[1]/(6*V)
    ,
    c[1]/(6*V)
    ,
    0
    ,
    d[2]/(6*V)
    ,
    c[2]/(6*V)
    ,
    0
    ,
    d[3]/(6*V)
    ,
    c[3]/(6*V)
    ,
    d[0]/(6*V)
    ,
    0
    ,
    b[0]/(6*V)
    ,
    d[1]/(6*V)
    ,
    0
    ,
    b[1]/(6*V)
    ,
    d[2]/(6*V)
    ,
    0
    ,
    b[2]/(6*V)
    ,
    d[3]/(6*V)
    ,
    0
    ,
    b[3]/(6*V)
    };
    return B;
}

std::vector<double> TET4::get_DB(const std::vector<double>& D, const gp_Pnt& point) const{
    (void)point;

std::vector<double> DB{
(D[0]*b[0] + D[3]*c[0] + D[5]*d[0])/(6*V)
,
(D[1]*c[0] + D[3]*b[0] + D[4]*d[0])/(6*V)
,
(D[2]*d[0] + D[4]*c[0] + D[5]*b[0])/(6*V)
,
(D[0]*b[1] + D[3]*c[1] + D[5]*d[1])/(6*V)
,
(D[1]*c[1] + D[3]*b[1] + D[4]*d[1])/(6*V)
,
(D[2]*d[1] + D[4]*c[1] + D[5]*b[1])/(6*V)
,
(D[0]*b[2] + D[3]*c[2] + D[5]*d[2])/(6*V)
,
(D[1]*c[2] + D[3]*b[2] + D[4]*d[2])/(6*V)
,
(D[2]*d[2] + D[4]*c[2] + D[5]*b[2])/(6*V)
,
(D[0]*b[3] + D[3]*c[3] + D[5]*d[3])/(6*V)
,
(D[1]*c[3] + D[3]*b[3] + D[4]*d[3])/(6*V)
,
(D[2]*d[3] + D[4]*c[3] + D[5]*b[3])/(6*V)
,
(D[11]*d[0] + D[6]*b[0] + D[9]*c[0])/(6*V)
,
(D[10]*d[0] + D[7]*c[0] + D[9]*b[0])/(6*V)
,
(D[10]*c[0] + D[11]*b[0] + D[8]*d[0])/(6*V)
,
(D[11]*d[1] + D[6]*b[1] + D[9]*c[1])/(6*V)
,
(D[10]*d[1] + D[7]*c[1] + D[9]*b[1])/(6*V)
,
(D[10]*c[1] + D[11]*b[1] + D[8]*d[1])/(6*V)
,
(D[11]*d[2] + D[6]*b[2] + D[9]*c[2])/(6*V)
,
(D[10]*d[2] + D[7]*c[2] + D[9]*b[2])/(6*V)
,
(D[10]*c[2] + D[11]*b[2] + D[8]*d[2])/(6*V)
,
(D[11]*d[3] + D[6]*b[3] + D[9]*c[3])/(6*V)
,
(D[10]*d[3] + D[7]*c[3] + D[9]*b[3])/(6*V)
,
(D[10]*c[3] + D[11]*b[3] + D[8]*d[3])/(6*V)
,
(D[12]*b[0] + D[15]*c[0] + D[17]*d[0])/(6*V)
,
(D[13]*c[0] + D[15]*b[0] + D[16]*d[0])/(6*V)
,
(D[14]*d[0] + D[16]*c[0] + D[17]*b[0])/(6*V)
,
(D[12]*b[1] + D[15]*c[1] + D[17]*d[1])/(6*V)
,
(D[13]*c[1] + D[15]*b[1] + D[16]*d[1])/(6*V)
,
(D[14]*d[1] + D[16]*c[1] + D[17]*b[1])/(6*V)
,
(D[12]*b[2] + D[15]*c[2] + D[17]*d[2])/(6*V)
,
(D[13]*c[2] + D[15]*b[2] + D[16]*d[2])/(6*V)
,
(D[14]*d[2] + D[16]*c[2] + D[17]*b[2])/(6*V)
,
(D[12]*b[3] + D[15]*c[3] + D[17]*d[3])/(6*V)
,
(D[13]*c[3] + D[15]*b[3] + D[16]*d[3])/(6*V)
,
(D[14]*d[3] + D[16]*c[3] + D[17]*b[3])/(6*V)
,
(D[18]*b[0] + D[21]*c[0] + D[23]*d[0])/(6*V)
,
(D[19]*c[0] + D[21]*b[0] + D[22]*d[0])/(6*V)
,
(D[20]*d[0] + D[22]*c[0] + D[23]*b[0])/(6*V)
,
(D[18]*b[1] + D[21]*c[1] + D[23]*d[1])/(6*V)
,
(D[19]*c[1] + D[21]*b[1] + D[22]*d[1])/(6*V)
,
(D[20]*d[1] + D[22]*c[1] + D[23]*b[1])/(6*V)
,
(D[18]*b[2] + D[21]*c[2] + D[23]*d[2])/(6*V)
,
(D[19]*c[2] + D[21]*b[2] + D[22]*d[2])/(6*V)
,
(D[20]*d[2] + D[22]*c[2] + D[23]*b[2])/(6*V)
,
(D[18]*b[3] + D[21]*c[3] + D[23]*d[3])/(6*V)
,
(D[19]*c[3] + D[21]*b[3] + D[22]*d[3])/(6*V)
,
(D[20]*d[3] + D[22]*c[3] + D[23]*b[3])/(6*V)
,
(D[24]*b[0] + D[27]*c[0] + D[29]*d[0])/(6*V)
,
(D[25]*c[0] + D[27]*b[0] + D[28]*d[0])/(6*V)
,
(D[26]*d[0] + D[28]*c[0] + D[29]*b[0])/(6*V)
,
(D[24]*b[1] + D[27]*c[1] + D[29]*d[1])/(6*V)
,
(D[25]*c[1] + D[27]*b[1] + D[28]*d[1])/(6*V)
,
(D[26]*d[1] + D[28]*c[1] + D[29]*b[1])/(6*V)
,
(D[24]*b[2] + D[27]*c[2] + D[29]*d[2])/(6*V)
,
(D[25]*c[2] + D[27]*b[2] + D[28]*d[2])/(6*V)
,
(D[26]*d[2] + D[28]*c[2] + D[29]*b[2])/(6*V)
,
(D[24]*b[3] + D[27]*c[3] + D[29]*d[3])/(6*V)
,
(D[25]*c[3] + D[27]*b[3] + D[28]*d[3])/(6*V)
,
(D[26]*d[3] + D[28]*c[3] + D[29]*b[3])/(6*V)
,
(D[30]*b[0] + D[33]*c[0] + D[35]*d[0])/(6*V)
,
(D[31]*c[0] + D[33]*b[0] + D[34]*d[0])/(6*V)
,
(D[32]*d[0] + D[34]*c[0] + D[35]*b[0])/(6*V)
,
(D[30]*b[1] + D[33]*c[1] + D[35]*d[1])/(6*V)
,
(D[31]*c[1] + D[33]*b[1] + D[34]*d[1])/(6*V)
,
(D[32]*d[1] + D[34]*c[1] + D[35]*b[1])/(6*V)
,
(D[30]*b[2] + D[33]*c[2] + D[35]*d[2])/(6*V)
,
(D[31]*c[2] + D[33]*b[2] + D[34]*d[2])/(6*V)
,
(D[32]*d[2] + D[34]*c[2] + D[35]*b[2])/(6*V)
,
(D[30]*b[3] + D[33]*c[3] + D[35]*d[3])/(6*V)
,
(D[31]*c[3] + D[33]*b[3] + D[34]*d[3])/(6*V)
,
(D[32]*d[3] + D[34]*c[3] + D[35]*b[3])/(6*V)
};

    return DB;
}

std::vector<double> TET4::get_Nf(const double t, const std::vector<gp_Pnt>& points) const{
    (void)t;

    const gp_Vec v1(points[0], points[1]);
    const gp_Vec v2(points[0], points[2]);

    const double AA = v1.Crossed(v2).Magnitude()/6;
    double A[4] = {0,0,0,0};
    for(size_t i = 0; i < 4; ++i){
        for(size_t j = 0; j < 3; ++j){
            if(points[j].IsEqual(this->nodes[i]->point, Precision::Confusion())){
                A[i] = AA;
                break;
            }
        }
    }

    std::vector<double> Nf{
        A[0],  0,  0,
         0, A[0],  0,
         0,  0, A[0],
        A[1],  0,  0,
         0, A[1],  0,
         0,  0, A[1],
        A[2],  0,  0,
         0, A[2],  0,
         0,  0, A[2],
        A[3],  0,  0,
         0, A[3],  0,
         0,  0, A[3]
    };

    return Nf;
}

std::vector<double> TET4::get_nodal_density_gradient(gp_Pnt p) const{
    (void)p;
    
    return std::vector<double>{b[0]/(6*V), b[1]/(6*V), b[2]/(6*V), b[3]/(6*V),
                               c[0]/(6*V), c[1]/(6*V), c[2]/(6*V), c[3]/(6*V),
                               d[0]/(6*V), d[1]/(6*V), d[2]/(6*V), d[3]/(6*V)};
}

std::vector<double> TET4::get_R(const std::vector<double>& K, const double t, const std::vector<gp_Pnt>& points) const{
    (void)t;
    Eigen::Matrix<double, K_DIM, K_DIM> R;
    Eigen::Matrix<double, DIM, DIM> Km = Eigen::Map<const Eigen::Matrix<double, DIM, DIM>>(K.data(), DIM, DIM);
    R.fill(0);

    const double GL[3][3] = {{0.5, 0.5, 0},
                             {0, 0.5, 0.5},
                             {0.5, 0, 0.5}};

    const auto& p = points;
    gp_Vec v1(p[1], p[0]);
    gp_Vec v2(p[2], p[0]);
    const double drnorm = (v1.Crossed(v2)).Magnitude();
    for(size_t i = 0; i < 3; ++i){
        const double xi = GL[i][0]*p[0].X() + GL[i][1]*p[1].X() + GL[i][2]*p[2].X();
        const double eta = GL[i][0]*p[0].Y() + GL[i][1]*p[1].Y() + GL[i][2]*p[2].Y();
        const double zeta = GL[i][0]*p[0].Z() + GL[i][1]*p[1].Z() + GL[i][2]*p[2].Z();
        const auto NN = N_mat(xi, eta, zeta);
        R += (drnorm*NN.transpose()*Km*NN)/3.0;
    }
    std::vector<double> R_vec(K_DIM*K_DIM);
    std::copy(R.data(), R.data()+K_DIM*K_DIM, R_vec.begin());

    return R_vec;
}

std::vector<double> TET4::get_Rf(const std::vector<double>& S, const std::vector<double>& F, const gp_Pnt& C, const double t, const std::vector<gp_Pnt>& points) const{
    (void)t;
    Eigen::Vector<double, DIM> x_vec;
    Eigen::Vector<double, DIM> Fv{F[0], F[1], F[2]};
    Eigen::Vector<double, K_DIM> Rf;
    Eigen::Matrix<double, DIM, DIM> Sm = Eigen::Map<const Eigen::Matrix<double, DIM, DIM>>(S.data(), DIM, DIM).transpose();
    Rf.fill(0);

    const double GL[3][3] = {{0.5, 0.5, 0},
                             {0, 0.5, 0.5},
                             {0.5, 0, 0.5}};

    const auto& p = points;
    gp_Vec v1(p[1], p[0]);
    gp_Vec v2(p[2], p[0]);
    const double drnorm = (v1.Crossed(v2)).Magnitude()/2;
    for(size_t i = 0; i < 3; ++i){
        const double xi = GL[i][0]*p[0].X() + GL[i][1]*p[1].X() + GL[i][2]*p[2].X();
        const double eta = GL[i][0]*p[0].Y() + GL[i][1]*p[1].Y() + GL[i][2]*p[2].Y();
        const double zeta = GL[i][0]*p[0].Z() + GL[i][1]*p[1].Z() + GL[i][2]*p[2].Z();
        x_vec[0] = xi - C.X();
        x_vec[1] = eta - C.Y();
        x_vec[2] = zeta - C.Z();
        const auto NN = N_mat(xi, eta, zeta);
        Rf += (drnorm*NN.transpose()*(Sm*x_vec + Fv))/3.0;
    }
    std::vector<double> Rf_vec(K_DIM);
    std::copy(Rf.data(), Rf.data()+K_DIM, Rf_vec.begin());

    return Rf_vec;
}

Eigen::MatrixXd TET4::diffusion_1dof(const double t, const std::vector<double>& A) const{
    (void)t;
    Eigen::MatrixXd M{{
        b[0]*(A[0]*b[0]/6 + A[3]*c[0]/6 + A[6]*d[0]/6)/(6*V) + c[0]*(A[1]*b[0]/6 + A[4]*c[0]/6 + A[7]*d[0]/6)/(6*V) + d[0]*(A[2]*b[0]/6 + A[5]*c[0]/6 + A[8]*d[0]/6)/(6*V)
        ,
        b[1]*(A[0]*b[0]/6 + A[3]*c[0]/6 + A[6]*d[0]/6)/(6*V) + c[1]*(A[1]*b[0]/6 + A[4]*c[0]/6 + A[7]*d[0]/6)/(6*V) + d[1]*(A[2]*b[0]/6 + A[5]*c[0]/6 + A[8]*d[0]/6)/(6*V)
        ,
        b[2]*(A[0]*b[0]/6 + A[3]*c[0]/6 + A[6]*d[0]/6)/(6*V) + c[2]*(A[1]*b[0]/6 + A[4]*c[0]/6 + A[7]*d[0]/6)/(6*V) + d[2]*(A[2]*b[0]/6 + A[5]*c[0]/6 + A[8]*d[0]/6)/(6*V)
        ,
        b[3]*(A[0]*b[0]/6 + A[3]*c[0]/6 + A[6]*d[0]/6)/(6*V) + c[3]*(A[1]*b[0]/6 + A[4]*c[0]/6 + A[7]*d[0]/6)/(6*V) + d[3]*(A[2]*b[0]/6 + A[5]*c[0]/6 + A[8]*d[0]/6)/(6*V)
        },{
        b[0]*(A[0]*b[1]/6 + A[3]*c[1]/6 + A[6]*d[1]/6)/(6*V) + c[0]*(A[1]*b[1]/6 + A[4]*c[1]/6 + A[7]*d[1]/6)/(6*V) + d[0]*(A[2]*b[1]/6 + A[5]*c[1]/6 + A[8]*d[1]/6)/(6*V)
        ,
        b[1]*(A[0]*b[1]/6 + A[3]*c[1]/6 + A[6]*d[1]/6)/(6*V) + c[1]*(A[1]*b[1]/6 + A[4]*c[1]/6 + A[7]*d[1]/6)/(6*V) + d[1]*(A[2]*b[1]/6 + A[5]*c[1]/6 + A[8]*d[1]/6)/(6*V)
        ,
        b[2]*(A[0]*b[1]/6 + A[3]*c[1]/6 + A[6]*d[1]/6)/(6*V) + c[2]*(A[1]*b[1]/6 + A[4]*c[1]/6 + A[7]*d[1]/6)/(6*V) + d[2]*(A[2]*b[1]/6 + A[5]*c[1]/6 + A[8]*d[1]/6)/(6*V)
        ,
        b[3]*(A[0]*b[1]/6 + A[3]*c[1]/6 + A[6]*d[1]/6)/(6*V) + c[3]*(A[1]*b[1]/6 + A[4]*c[1]/6 + A[7]*d[1]/6)/(6*V) + d[3]*(A[2]*b[1]/6 + A[5]*c[1]/6 + A[8]*d[1]/6)/(6*V)
        },{
        b[0]*(A[0]*b[2]/6 + A[3]*c[2]/6 + A[6]*d[2]/6)/(6*V) + c[0]*(A[1]*b[2]/6 + A[4]*c[2]/6 + A[7]*d[2]/6)/(6*V) + d[0]*(A[2]*b[2]/6 + A[5]*c[2]/6 + A[8]*d[2]/6)/(6*V)
        ,
        b[1]*(A[0]*b[2]/6 + A[3]*c[2]/6 + A[6]*d[2]/6)/(6*V) + c[1]*(A[1]*b[2]/6 + A[4]*c[2]/6 + A[7]*d[2]/6)/(6*V) + d[1]*(A[2]*b[2]/6 + A[5]*c[2]/6 + A[8]*d[2]/6)/(6*V)
        ,
        b[2]*(A[0]*b[2]/6 + A[3]*c[2]/6 + A[6]*d[2]/6)/(6*V) + c[2]*(A[1]*b[2]/6 + A[4]*c[2]/6 + A[7]*d[2]/6)/(6*V) + d[2]*(A[2]*b[2]/6 + A[5]*c[2]/6 + A[8]*d[2]/6)/(6*V)
        ,
        b[3]*(A[0]*b[2]/6 + A[3]*c[2]/6 + A[6]*d[2]/6)/(6*V) + c[3]*(A[1]*b[2]/6 + A[4]*c[2]/6 + A[7]*d[2]/6)/(6*V) + d[3]*(A[2]*b[2]/6 + A[5]*c[2]/6 + A[8]*d[2]/6)/(6*V)
        },{
        b[0]*(A[0]*b[3]/6 + A[3]*c[3]/6 + A[6]*d[3]/6)/(6*V) + c[0]*(A[1]*b[3]/6 + A[4]*c[3]/6 + A[7]*d[3]/6)/(6*V) + d[0]*(A[2]*b[3]/6 + A[5]*c[3]/6 + A[8]*d[3]/6)/(6*V)
        ,
        b[1]*(A[0]*b[3]/6 + A[3]*c[3]/6 + A[6]*d[3]/6)/(6*V) + c[1]*(A[1]*b[3]/6 + A[4]*c[3]/6 + A[7]*d[3]/6)/(6*V) + d[1]*(A[2]*b[3]/6 + A[5]*c[3]/6 + A[8]*d[3]/6)/(6*V)
        ,
        b[2]*(A[0]*b[3]/6 + A[3]*c[3]/6 + A[6]*d[3]/6)/(6*V) + c[2]*(A[1]*b[3]/6 + A[4]*c[3]/6 + A[7]*d[3]/6)/(6*V) + d[2]*(A[2]*b[3]/6 + A[5]*c[3]/6 + A[8]*d[3]/6)/(6*V)
        ,
        b[3]*(A[0]*b[3]/6 + A[3]*c[3]/6 + A[6]*d[3]/6)/(6*V) + c[3]*(A[1]*b[3]/6 + A[4]*c[3]/6 + A[7]*d[3]/6)/(6*V) + d[3]*(A[2]*b[3]/6 + A[5]*c[3]/6 + A[8]*d[3]/6)/(6*V)
        }
    };
    return M;
}
Eigen::MatrixXd TET4::advection_1dof(const double t, const std::vector<double>& v) const{
    (void)t;
    Eigen::MatrixXd M{{
        b[0]*v[0]/24 + c[0]*v[1]/24 + d[0]*v[2]/24
        ,
        b[0]*v[0]/24 + c[0]*v[1]/24 + d[0]*v[2]/24
        ,
        b[0]*v[0]/24 + c[0]*v[1]/24 + d[0]*v[2]/24
        ,
        b[0]*v[0]/24 + c[0]*v[1]/24 + d[0]*v[2]/24
        },{
        b[1]*v[0]/24 + c[1]*v[1]/24 + d[1]*v[2]/24
        ,
        b[1]*v[0]/24 + c[1]*v[1]/24 + d[1]*v[2]/24
        ,
        b[1]*v[0]/24 + c[1]*v[1]/24 + d[1]*v[2]/24
        ,
        b[1]*v[0]/24 + c[1]*v[1]/24 + d[1]*v[2]/24
        },{
        b[2]*v[0]/24 + c[2]*v[1]/24 + d[2]*v[2]/24
        ,
        b[2]*v[0]/24 + c[2]*v[1]/24 + d[2]*v[2]/24
        ,
        b[2]*v[0]/24 + c[2]*v[1]/24 + d[2]*v[2]/24
        ,
        b[2]*v[0]/24 + c[2]*v[1]/24 + d[2]*v[2]/24
        },{
        b[3]*v[0]/24 + c[3]*v[1]/24 + d[3]*v[2]/24
        ,
        b[3]*v[0]/24 + c[3]*v[1]/24 + d[3]*v[2]/24
        ,
        b[3]*v[0]/24 + c[3]*v[1]/24 + d[3]*v[2]/24
        ,
        b[3]*v[0]/24 + c[3]*v[1]/24 + d[3]*v[2]/24
        }
    };

    return M;
}
Eigen::MatrixXd TET4::absorption_1dof(const double t) const{
    (void)t;
    Eigen::MatrixXd M{{
        V/10
        ,
        V/20
        ,
        V/20
        ,
        V/20
        },{
        V/20
        ,
        V/10
        ,
        V/20
        ,
        V/20
        },{
        V/20
        ,
        V/20
        ,
        V/10
        ,
        V/20
        },{
        V/20
        ,
        V/20
        ,
        V/20
        ,
        V/10
        }
    };

    return M;
}
Eigen::VectorXd TET4::source_1dof(const double t) const{
    (void)t;

    Eigen::Vector<double, 4> M{
        V/4
        ,
        V/4
        ,
        V/4
        ,
        V/4
    };
    return M;
}

}
